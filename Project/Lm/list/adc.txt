; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave --exceptions -o.\output\adc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\adc.d --cpu=Cortex-M3 --apcs=interwork//ropi -O0 --diag_suppress=9931 -I.\Include -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32F4-Discovery -I..\lib\inc -I..\..\Utilities\FatFs_R0_10b\src -I..\..\Utilities\MP3 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\..\..\Desktop\rapidjson-master\include -IC:\Users\MOCNIK\Documents\stm32\Project\Lm\RTE -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7\Device\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7 -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F2XX -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 -D__IOC_V2__ --omf_browse=.\output\adc.crf Source\adc.cpp]
                          THUMB

                          AREA ||i._ZN4_ADC6StatusEv||, CODE, READONLY, ALIGN=2

                  _ZN4_ADC6StatusEv PROC ; _ADC::Status()
;;;125    *******************************************************************************/
;;;126    void		_ADC::Status() {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;127    	
;;;128    				adf.T2					+= (buf.T2					- adf.T2)/16;
000004  8921              LDRH     r1,[r4,#8]
000006  8ba2              LDRH     r2,[r4,#0x1c]
000008  1a88              SUBS     r0,r1,r2
00000a  17c1              ASRS     r1,r0,#31
00000c  eb007111          ADD      r1,r0,r1,LSR #28
000010  eb021121          ADD      r1,r2,r1,ASR #4
000014  83a1              STRH     r1,[r4,#0x1c]
;;;129    				adf.T3					+= (buf.T3					- adf.T3)/16;
000016  8962              LDRH     r2,[r4,#0xa]
000018  8be1              LDRH     r1,[r4,#0x1e]
00001a  1a50              SUBS     r0,r2,r1
00001c  17c1              ASRS     r1,r0,#31
00001e  eb007111          ADD      r1,r0,r1,LSR #28
000022  110a              ASRS     r2,r1,#4
000024  8be1              LDRH     r1,[r4,#0x1e]
000026  4411              ADD      r1,r1,r2
000028  83e1              STRH     r1,[r4,#0x1e]
;;;130    				adf.V5					+= (buf.V5					- adf.V5)/16;
00002a  89a2              LDRH     r2,[r4,#0xc]
00002c  8c21              LDRH     r1,[r4,#0x20]
00002e  1a50              SUBS     r0,r2,r1
000030  17c1              ASRS     r1,r0,#31
000032  eb007111          ADD      r1,r0,r1,LSR #28
000036  110a              ASRS     r2,r1,#4
000038  8c21              LDRH     r1,[r4,#0x20]
00003a  4411              ADD      r1,r1,r2
00003c  8421              STRH     r1,[r4,#0x20]
;;;131    				adf.V12					+= (buf.V12					- adf.V12)/16;
00003e  89e2              LDRH     r2,[r4,#0xe]
000040  8c61              LDRH     r1,[r4,#0x22]
000042  1a50              SUBS     r0,r2,r1
000044  17c1              ASRS     r1,r0,#31
000046  eb007111          ADD      r1,r0,r1,LSR #28
00004a  110a              ASRS     r2,r1,#4
00004c  8c61              LDRH     r1,[r4,#0x22]
00004e  4411              ADD      r1,r1,r2
000050  8461              STRH     r1,[r4,#0x22]
;;;132    				adf.V24					+= (buf.V24					- adf.V24)/16;
000052  8a22              LDRH     r2,[r4,#0x10]
000054  8ca1              LDRH     r1,[r4,#0x24]
000056  1a50              SUBS     r0,r2,r1
000058  17c1              ASRS     r1,r0,#31
00005a  eb007111          ADD      r1,r0,r1,LSR #28
00005e  110a              ASRS     r2,r1,#4
000060  8ca1              LDRH     r1,[r4,#0x24]
000062  4411              ADD      r1,r1,r2
000064  84a1              STRH     r1,[r4,#0x24]
;;;133    				adf.cooler			+= (buf.cooler			- adf.cooler)/16;
000066  8a62              LDRH     r2,[r4,#0x12]
000068  8ce1              LDRH     r1,[r4,#0x26]
00006a  1a50              SUBS     r0,r2,r1
00006c  17c1              ASRS     r1,r0,#31
00006e  eb007111          ADD      r1,r0,r1,LSR #28
000072  110a              ASRS     r2,r1,#4
000074  8ce1              LDRH     r1,[r4,#0x26]
000076  4411              ADD      r1,r1,r2
000078  84e1              STRH     r1,[r4,#0x26]
;;;134    				adf.bottle			+= (buf.bottle			- adf.bottle)/16;
00007a  8aa2              LDRH     r2,[r4,#0x14]
00007c  8d21              LDRH     r1,[r4,#0x28]
00007e  1a50              SUBS     r0,r2,r1
000080  17c1              ASRS     r1,r0,#31
000082  eb007111          ADD      r1,r0,r1,LSR #28
000086  110a              ASRS     r2,r1,#4
000088  8d21              LDRH     r1,[r4,#0x28]
00008a  4411              ADD      r1,r1,r2
00008c  8521              STRH     r1,[r4,#0x28]
;;;135    				adf.compressor	+= (buf.compressor	- adf.compressor)/16;
00008e  8ae2              LDRH     r2,[r4,#0x16]
000090  8d61              LDRH     r1,[r4,#0x2a]
000092  1a50              SUBS     r0,r2,r1
000094  17c1              ASRS     r1,r0,#31
000096  eb007111          ADD      r1,r0,r1,LSR #28
00009a  110a              ASRS     r2,r1,#4
00009c  8d61              LDRH     r1,[r4,#0x2a]
00009e  4411              ADD      r1,r1,r2
0000a0  8561              STRH     r1,[r4,#0x2a]
;;;136    				adf.air					+= (buf.air					- adf.air)/16;
0000a2  8b22              LDRH     r2,[r4,#0x18]
0000a4  8da1              LDRH     r1,[r4,#0x2c]
0000a6  1a50              SUBS     r0,r2,r1
0000a8  17c1              ASRS     r1,r0,#31
0000aa  eb007111          ADD      r1,r0,r1,LSR #28
0000ae  110a              ASRS     r2,r1,#4
0000b0  8da1              LDRH     r1,[r4,#0x2c]
0000b2  4411              ADD      r1,r1,r2
0000b4  85a1              STRH     r1,[r4,#0x2c]
;;;137    				adf.Ipump				+= (buf.Ipump				- adf.Ipump)/16;
0000b6  8b62              LDRH     r2,[r4,#0x1a]
0000b8  8de1              LDRH     r1,[r4,#0x2e]
0000ba  1a50              SUBS     r0,r2,r1
0000bc  17c1              ASRS     r1,r0,#31
0000be  eb007111          ADD      r1,r0,r1,LSR #28
0000c2  110a              ASRS     r2,r1,#4
0000c4  8de1              LDRH     r1,[r4,#0x2e]
0000c6  4411              ADD      r1,r1,r2
0000c8  85e1              STRH     r1,[r4,#0x2e]
;;;138    
;;;139    				Th2o=__fit(adf.T2,Rtab,Ttab);
0000ca  8ba0              LDRH     r0,[r4,#0x1c]
0000cc  4a53              LDR      r2,|L1.540|
0000ce  447a              ADD      r2,r2,pc
0000d0  4953              LDR      r1,|L1.544|
0000d2  4479              ADD      r1,r1,pc
0000d4  f7fffffe          BL       _Z5__fitiPKiS0_ ; __fit(int, const int*, const int*)
0000d8  65e0              STR      r0,[r4,#0x5c]
;;;140    
;;;141    				error.V5 =(abs(adf.V5  - _V5)	 > _V5/10);
0000da  8c21              LDRH     r1,[r4,#0x20]
0000dc  f5a14041          SUB      r0,r1,#0xc100
0000e0  38f0              SUBS     r0,r0,#0xf0
0000e2  2800              CMP      r0,#0
0000e4  db01              BLT      |L1.234|
0000e6  4601              MOV      r1,r0
0000e8  e000              B        |L1.236|
                  |L1.234|
0000ea  4241              RSBS     r1,r0,#0
                  |L1.236|
0000ec  f2413264          MOV      r2,#0x1364
0000f0  4291              CMP      r1,r2
0000f2  dd01              BLE      |L1.248|
0000f4  2201              MOVS     r2,#1
0000f6  e000              B        |L1.250|
                  |L1.248|
0000f8  2200              MOVS     r2,#0
                  |L1.250|
0000fa  f8941058          LDRB     r1,[r4,#0x58]
0000fe  f3620100          BFI      r1,r2,#0,#1
000102  f8841058          STRB     r1,[r4,#0x58]
;;;142    				error.V12=(abs(adf.V12 - _V12) > _V12/10);
000106  8c61              LDRH     r1,[r4,#0x22]
000108  f5a14039          SUB      r0,r1,#0xb900
00010c  3846              SUBS     r0,r0,#0x46
00010e  2800              CMP      r0,#0
000110  db01              BLT      |L1.278|
000112  4601              MOV      r1,r0
000114  e000              B        |L1.280|
                  |L1.278|
000116  4241              RSBS     r1,r0,#0
                  |L1.280|
000118  f2412287          MOV      r2,#0x1287
00011c  4291              CMP      r1,r2
00011e  dd01              BLE      |L1.292|
000120  2201              MOVS     r2,#1
000122  e000              B        |L1.294|
                  |L1.292|
000124  2200              MOVS     r2,#0
                  |L1.294|
000126  f8941058          LDRB     r1,[r4,#0x58]
00012a  f3620141          BFI      r1,r2,#1,#1
00012e  f8841058          STRB     r1,[r4,#0x58]
;;;143    				error.V24=(abs(adf.V24 - _V24) > _V24/10);
000132  8ca1              LDRH     r1,[r4,#0x24]
000134  f5a14048          SUB      r0,r1,#0xc800
000138  385a              SUBS     r0,r0,#0x5a
00013a  2800              CMP      r0,#0
00013c  db01              BLT      |L1.322|
00013e  4601              MOV      r1,r0
000140  e000              B        |L1.324|
                  |L1.322|
000142  4241              RSBS     r1,r0,#0
                  |L1.324|
000144  f2414209          MOV      r2,#0x1409
000148  4291              CMP      r1,r2
00014a  dd01              BLE      |L1.336|
00014c  2201              MOVS     r2,#1
00014e  e000              B        |L1.338|
                  |L1.336|
000150  2200              MOVS     r2,#0
                  |L1.338|
000152  f8941058          LDRB     r1,[r4,#0x58]
000156  f3620182          BFI      r1,r2,#2,#1
00015a  f8841058          STRB     r1,[r4,#0x58]
;;;144    				error.InputPressure=(abs(adf.compressor - 4*offset.compressor) > offset.compressor/2);
00015e  8d63              LDRH     r3,[r4,#0x2a]
000160  8fe2              LDRH     r2,[r4,#0x3e]
000162  2504              MOVS     r5,#4
000164  fb053112          MLS      r1,r5,r2,r3
000168  2900              CMP      r1,#0
00016a  db01              BLT      |L1.368|
00016c  460a              MOV      r2,r1
00016e  e000              B        |L1.370|
                  |L1.368|
000170  424a              RSBS     r2,r1,#0
                  |L1.370|
000172  8fe0              LDRH     r0,[r4,#0x3e]
000174  eb0073d0          ADD      r3,r0,r0,LSR #31
000178  105b              ASRS     r3,r3,#1
00017a  429a              CMP      r2,r3
00017c  dd01              BLE      |L1.386|
00017e  2301              MOVS     r3,#1
000180  e000              B        |L1.388|
                  |L1.386|
000182  2300              MOVS     r3,#0
                  |L1.388|
000184  f8942058          LDRB     r2,[r4,#0x58]
000188  f36302c3          BFI      r2,r3,#3,#1
00018c  f8842058          STRB     r2,[r4,#0x58]
;;;145    				error.Overheat=(Th2o > 50*100);
000190  f2413188          MOV      r1,#0x1388
000194  6de0              LDR      r0,[r4,#0x5c]
000196  4288              CMP      r0,r1
000198  dd01              BLE      |L1.414|
00019a  2101              MOVS     r1,#1
00019c  e000              B        |L1.416|
                  |L1.414|
00019e  2100              MOVS     r1,#0
                  |L1.416|
0001a0  f8140f58          LDRB     r0,[r4,#0x58]!
0001a4  f3611004          BFI      r0,r1,#4,#1
0001a8  7020              STRB     r0,[r4,#0]
;;;146    
;;;147    				if(error.Overheat)
0001aa  f8140958          LDRB     r0,[r4],#-0x58
0001ae  f3c01000          UBFX     r0,r0,#4,#1
0001b2  b120              CBZ      r0,|L1.446|
;;;148    					_SYS_SHG_DISABLE;
0001b4  2110              MOVS     r1,#0x10
0001b6  481b              LDR      r0,|L1.548|
0001b8  f7fffffe          BL       GPIO_ResetBits
0001bc  e003              B        |L1.454|
                  |L1.446|
;;;149    				else
;;;150    					_SYS_SHG_ENABLE;
0001be  2110              MOVS     r1,#0x10
0001c0  4818              LDR      r0,|L1.548|
0001c2  f7fffffe          BL       GPIO_SetBits
                  |L1.454|
;;;151    
;;;152    				if(__time__ > timeout) {
0001c6  4918              LDR      r1,|L1.552|
0001c8  6860              LDR      r0,[r4,#4]
0001ca  6809              LDR      r1,[r1,#0]  ; __time__
0001cc  4288              CMP      r0,r1
0001ce  da23              BGE      |L1.536|
;;;153    					timeout=__time__+300;
0001d0  4815              LDR      r0,|L1.552|
0001d2  6800              LDR      r0,[r0,#0]  ; __time__
0001d4  f5007096          ADD      r0,r0,#0x12c
0001d8  6060              STR      r0,[r4,#4]
;;;154    					_RED2(5);
0001da  2105              MOVS     r1,#5
0001dc  4608              MOV      r0,r1
0001de  f7fffffe          BL       _led
;;;155    					if(*(int *)&error & (1 << n)) {
0001e2  7822              LDRB     r2,[r4,#0]
0001e4  2101              MOVS     r1,#1
0001e6  4091              LSLS     r1,r1,r2
0001e8  6da0              LDR      r0,[r4,#0x58]
0001ea  4008              ANDS     r0,r0,r1
0001ec  b130              CBZ      r0,|L1.508|
;;;156    						_RED2(200);
0001ee  21c8              MOVS     r1,#0xc8
0001f0  2005              MOVS     r0,#5
0001f2  f7fffffe          BL       _led
;;;157    						timeout += 200;
0001f6  6860              LDR      r0,[r4,#4]
0001f8  30c8              ADDS     r0,r0,#0xc8
0001fa  6060              STR      r0,[r4,#4]
                  |L1.508|
;;;158    					}
;;;159    					n = ++n % NUM_ADCERR;
0001fc  6820              LDR      r0,[r4,#0]
0001fe  1c40              ADDS     r0,r0,#1
000200  2105              MOVS     r1,#5
000202  fb90f2f1          SDIV     r2,r0,r1
000206  fb010012          MLS      r0,r1,r2,r0
00020a  6020              STR      r0,[r4,#0]
;;;160    					if(!n) 
00020c  6820              LDR      r0,[r4,#0]
00020e  b918              CBNZ     r0,|L1.536|
;;;161    						timeout += 3000;
000210  6860              LDR      r0,[r4,#4]
000212  f60030b8          ADD      r0,r0,#0xbb8
000216  6060              STR      r0,[r4,#4]
                  |L1.536|
;;;162    				}
;;;163    }
000218  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

00021a  0000              DCW      0x0000
                  |L1.540|
                          DCD      Ttab+0x14a - {PC}
                  |L1.544|
                          DCD      Rtab+0x14a - {PC}
                  |L1.548|
                          DCD      0x40020400
                  |L1.552|
                          DCD      __time__

                          AREA ||i._ZN4_ADC8InstanceEv||, CODE, READONLY, ALIGN=2

                  _ZN4_ADC8InstanceEv PROC ; _ADC::Instance()
;;;23     /*******************************************************************************/
;;;24     _ADC*		_ADC::Instance() {
000000  b570              PUSH     {r4-r6,lr}
;;;25     				if(me==NULL)
000002  480a              LDR      r0,|L2.44|
000004  6800              LDR      r0,[r0,#0]  ; me
000006  b960              CBNZ     r0,|L2.34|
;;;26     					me=new _ADC();
000008  2600              MOVS     r6,#0
00000a  2060              MOVS     r0,#0x60
00000c  f7fffffe          BL       _Znwj ; operator new(unsigned)
000010  4604              MOV      r4,r0
000012  2601              MOVS     r6,#1
000014  f7fffffe          BL       _ZN4_ADCC1Ev ; _ADC::_ADC()
000018  4604              MOV      r4,r0
00001a  2600              MOVS     r6,#0
00001c  4803              LDR      r0,|L2.44|
00001e  6004              STR      r4,[r0,#0]  ; me
;;;27     				return me;
000020  bf00              NOP      
                  |L2.34|
000022  4802              LDR      r0,|L2.44|
000024  6805              LDR      r5,[r0,#0]  ; me
000026  4628              MOV      r0,r5
;;;28     }
000028  bd70              POP      {r4-r6,pc}
;;;29     /**
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      ||me||

                          AREA ||i._ZN4_ADC8InstanceEv.clean||, CODE, READONLY, ALIGN=1

000000  b116              CBZ      r6,|L3.8|
000002  4620              MOV      r0,r4
000004  f7fffffe          BL       _ZdlPv ; operator delete (void*)
                  |L3.8|
000008  f7fffffe          BL       __cxa_end_cleanup

                          AREA ||i._ZN4_ADCC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN4_ADCC2Ev                  ; Alternate entry point ; _ADC::_ADC__sub_object()
                  _ZN4_ADCC1Ev PROC ; _ADC::_ADC()
;;;34     /*******************************************************************************/
;;;35     _ADC::_ADC() {
;;;36     #ifndef __SIMULATION__
;;;37     				ADC_InitTypeDef       ADC_InitStructure;
;;;38     				DMA_InitTypeDef       DMA_InitStructure;
;;;39     				GPIO_InitTypeDef      GPIO_InitStructure;
;;;40     
;;;41     				ADC_DeInit();
;;;42     				ADC_CommonInitTypeDef ADC_CommonInitStructure;
;;;43     				RCC_APB2PeriphClockCmd(	RCC_APB2Periph_ADC | RCC_APB2Periph_ADC1 ,ENABLE);
;;;44     
;;;45     				ADC_CommonStructInit(&ADC_CommonInitStructure);
;;;46     				ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
;;;47     				ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
;;;48     				ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
;;;49     				ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
;;;50     				ADC_CommonInit(&ADC_CommonInitStructure);
;;;51     
;;;52     				RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_DMA2, ENABLE);
;;;53     
;;;54     				DMA_DeInit(DMA2_Stream4);
;;;55     	
;;;56     				DMA_InitStructure.DMA_Channel = DMA_Channel_0;
;;;57     				DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(ADC1_BASE+0x4C);
;;;58     				DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&buf;
;;;59     				DMA_InitStructure.DMA_BufferSize = sizeof(buf)/sizeof(short);
;;;60     				DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
;;;61     				DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
;;;62     				DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
;;;63     				DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
;;;64     				DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
;;;65     				DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
;;;66     				DMA_InitStructure.DMA_Priority = DMA_Priority_High;
;;;67     				DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
;;;68     				DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
;;;69     				DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
;;;70     				DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
;;;71     				
;;;72     				DMA_Init(DMA2_Stream4, &DMA_InitStructure);
;;;73     
;;;74     				DMA_Cmd(DMA2_Stream4, ENABLE);
;;;75     //			DMA_ITConfig(DMA2_Stream4, DMA_IT_TC | DMA_IT_HT, ENABLE);
;;;76     //			DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
;;;77     
;;;78     /* Configure ADC1 Channel gpio pin as analog inputs *************************/
;;;79     
;;;80     				GPIO_StructInit(&GPIO_InitStructure);
;;;81     				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
;;;82     				GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
;;;83     				GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;															// T2,T3,V5;
;;;84     				GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;85     				GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;	 																				// V12,V24;
;;;86     				GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;87     				GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;		// P0,P1,P2,P3, pump current sense;
;;;88     				GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;89     
;;;90     /* ADC1 Init ****************************************************************/
;;;91     				ADC_StructInit(&ADC_InitStructure);
;;;92     				ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
;;;93     				ADC_InitStructure.ADC_ScanConvMode = ENABLE;
;;;94     				ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
;;;95     				ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
;;;96     
;;;97     				ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Left;
;;;98     				ADC_InitStructure.ADC_NbrOfConversion = sizeof(_ADCDMA)/sizeof(short);
;;;99     				ADC_Init(ADC1, &ADC_InitStructure);
;;;100    /* ADC1 regular channel12 configuration *************************************/
;;;101    				ADC_RegularChannelConfig(ADC1, ADC_Channel_1,  1, ADC_SampleTime_112Cycles);
;;;102    				ADC_RegularChannelConfig(ADC1, ADC_Channel_2,  2, ADC_SampleTime_112Cycles);
;;;103    				ADC_RegularChannelConfig(ADC1, ADC_Channel_3,  3, ADC_SampleTime_112Cycles);
;;;104    				ADC_RegularChannelConfig(ADC1, ADC_Channel_8,  4, ADC_SampleTime_112Cycles);
;;;105    				ADC_RegularChannelConfig(ADC1, ADC_Channel_9,  5, ADC_SampleTime_112Cycles);
;;;106    				ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 6, ADC_SampleTime_112Cycles);
;;;107    				ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 7, ADC_SampleTime_112Cycles);
;;;108    				ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 8, ADC_SampleTime_112Cycles);
;;;109    				ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 9, ADC_SampleTime_112Cycles);
;;;110    				ADC_RegularChannelConfig(ADC1, ADC_Channel_14,10, ADC_SampleTime_112Cycles);
;;;111    
;;;112    /* Enable DMA request after last transfer (Single-ADC mode) */
;;;113    				ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
;;;114    				ADC_Cmd(ADC1, ENABLE);
;;;115    				ADC_DMACmd(ADC1, ENABLE);
;;;116    				ADC_SoftwareStartConv(ADC1);
;;;117    #endif
;;;118    				n=timeout=0;
;;;119    }
;;;120    /*******************************************************************************
000000  b510              PUSH     {r4,lr}
000002  b09c              SUB      sp,sp,#0x70
000004  4604              MOV      r4,r0
000006  f7fffffe          BL       ADC_DeInit
00000a  2101              MOVS     r1,#1
00000c  0208              LSLS     r0,r1,#8
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
000012  a801              ADD      r0,sp,#4
000014  f7fffffe          BL       ADC_CommonStructInit
000018  2000              MOVS     r0,#0
00001a  9001              STR      r0,[sp,#4]
00001c  9002              STR      r0,[sp,#8]
00001e  9003              STR      r0,[sp,#0xc]
000020  9004              STR      r0,[sp,#0x10]
000022  a801              ADD      r0,sp,#4
000024  f7fffffe          BL       ADC_CommonInit
000028  2101              MOVS     r1,#1
00002a  f44f00c0          MOV      r0,#0x600000
00002e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
000032  485d              LDR      r0,|L4.424|
000034  f7fffffe          BL       DMA_DeInit
000038  2000              MOVS     r0,#0
00003a  9007              STR      r0,[sp,#0x1c]
00003c  485b              LDR      r0,|L4.428|
00003e  9008              STR      r0,[sp,#0x20]
000040  f1040008          ADD      r0,r4,#8
000044  9009              STR      r0,[sp,#0x24]
000046  200a              MOVS     r0,#0xa
000048  900b              STR      r0,[sp,#0x2c]
00004a  2000              MOVS     r0,#0
00004c  900a              STR      r0,[sp,#0x28]
00004e  900c              STR      r0,[sp,#0x30]
000050  f44f6080          MOV      r0,#0x400
000054  900d              STR      r0,[sp,#0x34]
000056  0040              LSLS     r0,r0,#1
000058  900e              STR      r0,[sp,#0x38]
00005a  0080              LSLS     r0,r0,#2
00005c  900f              STR      r0,[sp,#0x3c]
00005e  1140              ASRS     r0,r0,#5
000060  9010              STR      r0,[sp,#0x40]
000062  0240              LSLS     r0,r0,#9
000064  9011              STR      r0,[sp,#0x44]
000066  2004              MOVS     r0,#4
000068  9012              STR      r0,[sp,#0x48]
00006a  2001              MOVS     r0,#1
00006c  9013              STR      r0,[sp,#0x4c]
00006e  2000              MOVS     r0,#0
000070  9014              STR      r0,[sp,#0x50]
000072  9015              STR      r0,[sp,#0x54]
000074  a907              ADD      r1,sp,#0x1c
000076  484c              LDR      r0,|L4.424|
000078  f7fffffe          BL       DMA_Init
00007c  2101              MOVS     r1,#1
00007e  484a              LDR      r0,|L4.424|
000080  f7fffffe          BL       DMA_Cmd
000084  a805              ADD      r0,sp,#0x14
000086  f7fffffe          BL       GPIO_StructInit
00008a  2003              MOVS     r0,#3
00008c  f88d0018          STRB     r0,[sp,#0x18]
000090  2000              MOVS     r0,#0
000092  f88d001b          STRB     r0,[sp,#0x1b]
000096  200e              MOVS     r0,#0xe
000098  9005              STR      r0,[sp,#0x14]
00009a  a905              ADD      r1,sp,#0x14
00009c  4844              LDR      r0,|L4.432|
00009e  f7fffffe          BL       GPIO_Init
0000a2  2003              MOVS     r0,#3
0000a4  9005              STR      r0,[sp,#0x14]
0000a6  a905              ADD      r1,sp,#0x14
0000a8  4842              LDR      r0,|L4.436|
0000aa  f7fffffe          BL       GPIO_Init
0000ae  201f              MOVS     r0,#0x1f
0000b0  9005              STR      r0,[sp,#0x14]
0000b2  a905              ADD      r1,sp,#0x14
0000b4  4840              LDR      r0,|L4.440|
0000b6  f7fffffe          BL       GPIO_Init
0000ba  a816              ADD      r0,sp,#0x58
0000bc  f7fffffe          BL       ADC_StructInit
0000c0  2000              MOVS     r0,#0
0000c2  9016              STR      r0,[sp,#0x58]
0000c4  2001              MOVS     r0,#1
0000c6  f88d005c          STRB     r0,[sp,#0x5c]
0000ca  f88d005d          STRB     r0,[sp,#0x5d]
0000ce  2000              MOVS     r0,#0
0000d0  9018              STR      r0,[sp,#0x60]
0000d2  f44f6000          MOV      r0,#0x800
0000d6  901a              STR      r0,[sp,#0x68]
0000d8  200a              MOVS     r0,#0xa
0000da  f88d006c          STRB     r0,[sp,#0x6c]
0000de  a916              ADD      r1,sp,#0x58
0000e0  4832              LDR      r0,|L4.428|
0000e2  384c              SUBS     r0,r0,#0x4c
0000e4  f7fffffe          BL       ADC_Init
0000e8  2305              MOVS     r3,#5
0000ea  2201              MOVS     r2,#1
0000ec  4611              MOV      r1,r2
0000ee  482f              LDR      r0,|L4.428|
0000f0  384c              SUBS     r0,r0,#0x4c
0000f2  f7fffffe          BL       ADC_RegularChannelConfig
0000f6  2305              MOVS     r3,#5
0000f8  2202              MOVS     r2,#2
0000fa  4611              MOV      r1,r2
0000fc  482b              LDR      r0,|L4.428|
0000fe  384c              SUBS     r0,r0,#0x4c
000100  f7fffffe          BL       ADC_RegularChannelConfig
000104  2305              MOVS     r3,#5
000106  2203              MOVS     r2,#3
000108  4611              MOV      r1,r2
00010a  4828              LDR      r0,|L4.428|
00010c  384c              SUBS     r0,r0,#0x4c
00010e  f7fffffe          BL       ADC_RegularChannelConfig
000112  2305              MOVS     r3,#5
000114  2204              MOVS     r2,#4
000116  2108              MOVS     r1,#8
000118  4824              LDR      r0,|L4.428|
00011a  384c              SUBS     r0,r0,#0x4c
00011c  f7fffffe          BL       ADC_RegularChannelConfig
000120  2305              MOVS     r3,#5
000122  461a              MOV      r2,r3
000124  2109              MOVS     r1,#9
000126  4821              LDR      r0,|L4.428|
000128  384c              SUBS     r0,r0,#0x4c
00012a  f7fffffe          BL       ADC_RegularChannelConfig
00012e  2305              MOVS     r3,#5
000130  2206              MOVS     r2,#6
000132  210a              MOVS     r1,#0xa
000134  481d              LDR      r0,|L4.428|
000136  384c              SUBS     r0,r0,#0x4c
000138  f7fffffe          BL       ADC_RegularChannelConfig
00013c  2305              MOVS     r3,#5
00013e  2207              MOVS     r2,#7
000140  210b              MOVS     r1,#0xb
000142  481a              LDR      r0,|L4.428|
000144  384c              SUBS     r0,r0,#0x4c
000146  f7fffffe          BL       ADC_RegularChannelConfig
00014a  2305              MOVS     r3,#5
00014c  2208              MOVS     r2,#8
00014e  210c              MOVS     r1,#0xc
000150  4816              LDR      r0,|L4.428|
000152  384c              SUBS     r0,r0,#0x4c
000154  f7fffffe          BL       ADC_RegularChannelConfig
000158  2305              MOVS     r3,#5
00015a  2209              MOVS     r2,#9
00015c  210d              MOVS     r1,#0xd
00015e  4813              LDR      r0,|L4.428|
000160  384c              SUBS     r0,r0,#0x4c
000162  f7fffffe          BL       ADC_RegularChannelConfig
000166  2305              MOVS     r3,#5
000168  220a              MOVS     r2,#0xa
00016a  210e              MOVS     r1,#0xe
00016c  480f              LDR      r0,|L4.428|
00016e  384c              SUBS     r0,r0,#0x4c
000170  f7fffffe          BL       ADC_RegularChannelConfig
000174  2101              MOVS     r1,#1
000176  480d              LDR      r0,|L4.428|
000178  384c              SUBS     r0,r0,#0x4c
00017a  f7fffffe          BL       ADC_DMARequestAfterLastTransferCmd
00017e  2101              MOVS     r1,#1
000180  480a              LDR      r0,|L4.428|
000182  384c              SUBS     r0,r0,#0x4c
000184  f7fffffe          BL       ADC_Cmd
000188  2101              MOVS     r1,#1
00018a  4808              LDR      r0,|L4.428|
00018c  384c              SUBS     r0,r0,#0x4c
00018e  f7fffffe          BL       ADC_DMACmd
000192  4806              LDR      r0,|L4.428|
000194  384c              SUBS     r0,r0,#0x4c
000196  f7fffffe          BL       ADC_SoftwareStartConv
00019a  2000              MOVS     r0,#0
00019c  6060              STR      r0,[r4,#4]
00019e  6020              STR      r0,[r4,#0]
0001a0  4620              MOV      r0,r4
0001a2  b01c              ADD      sp,sp,#0x70
0001a4  bd10              POP      {r4,pc}
                          ENDP

0001a6  0000              DCW      0x0000
                  |L4.424|
                          DCD      0x40026470
                  |L4.428|
                          DCD      0x4001204c
                  |L4.432|
                          DCD      0x40020000
                  |L4.436|
                          DCD      0x40020400
                  |L4.440|
                          DCD      0x40020800

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4_ADCC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_ADCC1Ev||
                          DCD      0x801ba8b0

                          AREA ||area_number.6||, LINKORDER=||i._ZN4_ADC8InstanceEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_ADC8InstanceEv||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN4_ADC8InstanceEv||

                          AREA ||area_number.7||, LINKORDER=||i._ZN4_ADC8InstanceEv.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_ADC8InstanceEv.clean||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN4_ADC6StatusEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_ADC6StatusEv||
                          DCD      0x80aab0b0

                          AREA ||.ARM.extab||, DATA, READONLY, ALIGN=2

                  ||.extab._ZN4_ADC8InstanceEv||
                          DCD      0x80aab0b0
000004  00020018          DCW      0x0002,0x0018
                          DCD      0x00000001
                          RELOC 42, ||i._ZN4_ADC8InstanceEv.clean||
                          DCD      0x00000000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Ttab
                          DCD      0x000003e8
                          DCD      0x000009c4
                          DCD      0x00001388
                          DCD      0x00001f40
                  Rtab
                          DCD      0x0000c966
                          DCD      0x0000a988
                          DCD      0x00006ed8
                          DCD      0x0000390d

                          AREA ||.data||, DATA, ALIGN=2

                  ||me||
                          DCD      0x00000000

                          AREA ||i._Z5__fitiPKiS0_||, COMGROUP=_Z5__fitiPKiS0_, CODE, READONLY, ALIGN=1

                  _Z5__fitiPKiS0_ PROC ; __fit(int, const int*, const int*)
;;;18     __inline 
;;;19     int			__fit(int to, const int t[], const int ft[]) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;20     int			f3=(ft[3]*(t[0]-to)-ft[0]*(t[3]-to)) / (t[0]-t[3]);
000004  68d0              LDR      r0,[r2,#0xc]
000006  680f              LDR      r7,[r1,#0]
000008  1aff              SUBS     r7,r7,r3
00000a  4378              MULS     r0,r7,r0
00000c  6817              LDR      r7,[r2,#0]
00000e  f8d1c00c          LDR      r12,[r1,#0xc]
000012  ebac0c03          SUB      r12,r12,r3
000016  fb07001c          MLS      r0,r7,r12,r0
00001a  f8d1c00c          LDR      r12,[r1,#0xc]
00001e  680f              LDR      r7,[r1,#0]
000020  eba7070c          SUB      r7,r7,r12
000024  fb90f4f7          SDIV     r4,r0,r7
;;;21     int			f2=(ft[2]*(t[0]-to)-ft[0]*(t[2]-to)) / (t[0]-t[2]);
000028  6890              LDR      r0,[r2,#8]
00002a  680f              LDR      r7,[r1,#0]
00002c  1aff              SUBS     r7,r7,r3
00002e  4378              MULS     r0,r7,r0
000030  6817              LDR      r7,[r2,#0]
000032  f8d1c008          LDR      r12,[r1,#8]
000036  ebac0c03          SUB      r12,r12,r3
00003a  fb07001c          MLS      r0,r7,r12,r0
00003e  f8d1c008          LDR      r12,[r1,#8]
000042  680f              LDR      r7,[r1,#0]
000044  eba7070c          SUB      r7,r7,r12
000048  fb90f5f7          SDIV     r5,r0,r7
;;;22     int			f1=(ft[1]*(t[0]-to)-ft[0]*(t[1]-to)) / (t[0]-t[1]);
00004c  6850              LDR      r0,[r2,#4]
00004e  680f              LDR      r7,[r1,#0]
000050  1aff              SUBS     r7,r7,r3
000052  4378              MULS     r0,r7,r0
000054  6817              LDR      r7,[r2,#0]
000056  f8d1c004          LDR      r12,[r1,#4]
00005a  ebac0c03          SUB      r12,r12,r3
00005e  fb07001c          MLS      r0,r7,r12,r0
000062  e9d17c00          LDRD     r7,r12,[r1,#0]
000066  eba7070c          SUB      r7,r7,r12
00006a  fb90f6f7          SDIV     r6,r0,r7
;;;23     				f3=(f3*(t[1]-to) - f1*(t[3]-to)) / (t[1]-t[3]);
00006e  6848              LDR      r0,[r1,#4]
000070  1ac0              SUBS     r0,r0,r3
000072  4360              MULS     r0,r4,r0
000074  68cf              LDR      r7,[r1,#0xc]
000076  1aff              SUBS     r7,r7,r3
000078  fb060017          MLS      r0,r6,r7,r0
00007c  f8d1c00c          LDR      r12,[r1,#0xc]
000080  684f              LDR      r7,[r1,#4]
000082  eba7070c          SUB      r7,r7,r12
000086  fb90f4f7          SDIV     r4,r0,r7
;;;24     				f2=(f2*(t[1]-to)-f1*(t[2]-to)) / (t[1]-t[2]);
00008a  6848              LDR      r0,[r1,#4]
00008c  1ac0              SUBS     r0,r0,r3
00008e  4368              MULS     r0,r5,r0
000090  688f              LDR      r7,[r1,#8]
000092  1aff              SUBS     r7,r7,r3
000094  fb060017          MLS      r0,r6,r7,r0
000098  e9d17c01          LDRD     r7,r12,[r1,#4]
00009c  eba7070c          SUB      r7,r7,r12
0000a0  fb90f5f7          SDIV     r5,r0,r7
;;;25     				return(f3*(t[2]-to)-f2*(t[3]-to)) / (t[2]-t[3]);
0000a4  6888              LDR      r0,[r1,#8]
0000a6  1ac0              SUBS     r0,r0,r3
0000a8  4360              MULS     r0,r4,r0
0000aa  68cf              LDR      r7,[r1,#0xc]
0000ac  1aff              SUBS     r7,r7,r3
0000ae  fb050017          MLS      r0,r5,r7,r0
0000b2  e9d17c02          LDRD     r7,r12,[r1,#8]
0000b6  eba7070c          SUB      r7,r7,r12
0000ba  fb90f0f7          SDIV     r0,r0,r7
;;;26     }
0000be  bdf0              POP      {r4-r7,pc}
;;;27     
                          ENDP


                          AREA ||area_number.32||, COMGROUP=_Z5__fitiPKiS0_, LINKORDER=||i._Z5__fitiPKiS0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z5__fitiPKiS0_||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "Source\\adc.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_adc_cpp_ac41cf95___Z7__REV16j|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_adc_cpp_ac41cf95___Z7__REV16j| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_adc_cpp_ac41cf95___Z7__REVSHi|
#line 128
|__asm___7_adc_cpp_ac41cf95___Z7__REVSHi| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
