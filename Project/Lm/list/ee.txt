; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave --exceptions -o.\output\ee.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\ee.d --cpu=Cortex-M3 --apcs=interwork//ropi -O0 --diag_suppress=9931 -I.\Include -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32F4-Discovery -I..\lib\inc -I..\..\Utilities\FatFs_R0_10b\src -I..\..\Utilities\MP3 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\..\..\Desktop\rapidjson-master\include -IC:\Users\MOCNIK\Documents\stm32\Project\Lm\RTE -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7\Device\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7 -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F2XX -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 -D__IOC_V2__ --omf_browse=.\output\ee.crf Source\ee.cpp]
                          THUMB

                          AREA ||i._ZN3_EE3ISREPS_||, CODE, READONLY, ALIGN=2

                  _ZN3_EE3ISREPS_ PROC ; _EE::ISR(_EE*)
;;;30     
;;;31     void	_EE::ISR(_EE *p) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;32     			if(p) {																						// klic za prijavo instance
000006  b14d              CBZ      r5,|L1.28|
;;;33     				me=p;
000008  4839              LDR      r0,|L1.240|
00000a  6005              STR      r5,[r0,#0]  ; me
;;;34     				me->buffer=_buffer_init(3*1000*sizeof(short));
00000c  f2417070          MOV      r0,#0x1770
000010  f7fffffe          BL       _buffer_init
000014  4936              LDR      r1,|L1.240|
000016  6809              LDR      r1,[r1,#0]  ; me
000018  61c8              STR      r0,[r1,#0x1c]
00001a  e068              B        |L1.238|
                  |L1.28|
;;;35     			} else {																					// klic iz ISR, instanca in buffer morata bit ze formirana 																							
;;;36     				switch(status) {
00001c  6860              LDR      r0,[r4,#4]
00001e  b130              CBZ      r0,|L1.46|
000020  2802              CMP      r0,#2
000022  d005              BEQ      |L1.48|
000024  2803              CMP      r0,#3
000026  d04d              BEQ      |L1.196|
000028  2804              CMP      r0,#4
00002a  d15e              BNE      |L1.234|
00002c  e054              B        |L1.216|
                  |L1.46|
;;;37     					case _eeIDLE:
;;;38     						break;
00002e  e05d              B        |L1.236|
                  |L1.48|
;;;39     //______________________________________________________________					
;;;40     					case _eeWRITE:
;;;41     						if(nbits < 16) {
000030  68a0              LDR      r0,[r4,#8]
000032  2810              CMP      r0,#0x10
000034  da2d              BGE      |L1.146|
;;;42     							if(_buffer_pull(buffer,&temp,1)) {
000036  2201              MOVS     r2,#1
000038  f104010c          ADD      r1,r4,#0xc
00003c  69e0              LDR      r0,[r4,#0x1c]
00003e  f7fffffe          BL       _buffer_pull
000042  b328              CBZ      r0,|L1.144|
;;;43     								if(nbits++ % 2 == 0) {
000044  68a0              LDR      r0,[r4,#8]
000046  1c41              ADDS     r1,r0,#1
000048  60a1              STR      r1,[r4,#8]
00004a  eb0071d0          ADD      r1,r0,r0,LSR #31
00004e  1049              ASRS     r1,r1,#1
000050  eba00141          SUB      r1,r0,r1,LSL #1
000054  b989              CBNZ     r1,|L1.122|
;;;44     									if(temp & 0x80)
000056  7b20              LDRB     r0,[r4,#0xc]
000058  f0000080          AND      r0,r0,#0x80
00005c  b118              CBZ      r0,|L1.102|
;;;45     										TIM2->ARR=_tLOW;
00005e  2010              MOVS     r0,#0x10
000060  0681              LSLS     r1,r0,#26
000062  62c8              STR      r0,[r1,#0x2c]
000064  e002              B        |L1.108|
                  |L1.102|
;;;46     									else
;;;47     										TIM2->ARR=_tHIGH;
000066  2002              MOVS     r0,#2
000068  0741              LSLS     r1,r0,#29
00006a  62c8              STR      r0,[r1,#0x2c]
                  |L1.108|
;;;48     									temp <<=1;
00006c  68e0              LDR      r0,[r4,#0xc]
00006e  0040              LSLS     r0,r0,#1
000070  60e0              STR      r0,[r4,#0xc]
;;;49     									EE_PORT->BSRRH  =  EE_BIT;						// low
000072  2001              MOVS     r0,#1
000074  491f              LDR      r1,|L1.244|
000076  8348              STRH     r0,[r1,#0x1a]
000078  e023              B        |L1.194|
                  |L1.122|
;;;50     								} else {
;;;51     									TIM2->ARR = _tBIT - TIM2->ARR;
00007a  f04f4080          MOV      r0,#0x40000000
00007e  6ac0              LDR      r0,[r0,#0x2c]
000080  f1c00019          RSB      r0,r0,#0x19
000084  f04f4180          MOV      r1,#0x40000000
000088  62c8              STR      r0,[r1,#0x2c]
;;;52     									EE_PORT->BSRRL  =  EE_BIT;						// high
00008a  2001              MOVS     r0,#1
00008c  4919              LDR      r1,|L1.244|
00008e  8308              STRH     r0,[r1,#0x18]
                  |L1.144|
000090  e017              B        |L1.194|
                  |L1.146|
;;;53     								}
;;;54     							}
;;;55     						} else {
;;;56     								if(nbits++ % 2 == 0)
000092  68a0              LDR      r0,[r4,#8]
000094  1c41              ADDS     r1,r0,#1
000096  60a1              STR      r1,[r4,#8]
000098  eb0071d0          ADD      r1,r0,r0,LSR #31
00009c  1049              ASRS     r1,r1,#1
00009e  eba00141          SUB      r1,r0,r1,LSL #1
0000a2  b919              CBNZ     r1,|L1.172|
;;;57     									TIM2->ARR=_tHIGH;
0000a4  2002              MOVS     r0,#2
0000a6  0741              LSLS     r1,r0,#29
0000a8  62c8              STR      r0,[r1,#0x2c]
0000aa  e00a              B        |L1.194|
                  |L1.172|
;;;58     								else {
;;;59     									TIM2->ARR = _tBIT - TIM2->ARR;
0000ac  f04f4080          MOV      r0,#0x40000000
0000b0  6ac0              LDR      r0,[r0,#0x2c]
0000b2  f1c00019          RSB      r0,r0,#0x19
0000b6  f04f4180          MOV      r1,#0x40000000
0000ba  62c8              STR      r0,[r1,#0x2c]
;;;60     									EE_PORT->BSRRL  =  EE_BIT;						// high
0000bc  2001              MOVS     r0,#1
0000be  490d              LDR      r1,|L1.244|
0000c0  8308              STRH     r0,[r1,#0x18]
                  |L1.194|
;;;61     								}
;;;62     							
;;;63     						}
;;;64     						break;
0000c2  e013              B        |L1.236|
                  |L1.196|
;;;65     //______________________________________________________________
;;;66     					case _eeRESET:
;;;67     						TIM2->ARR=500;
0000c4  f44f70fa          MOV      r0,#0x1f4
0000c8  0701              LSLS     r1,r0,#28
0000ca  62c8              STR      r0,[r1,#0x2c]
;;;68     						EE_PORT->BSRRH   =  EE_BIT;									// low
0000cc  2001              MOVS     r0,#1
0000ce  4909              LDR      r1,|L1.244|
0000d0  8348              STRH     r0,[r1,#0x1a]
;;;69     						status=_tRRT;
0000d2  2004              MOVS     r0,#4
0000d4  6060              STR      r0,[r4,#4]
;;;70     						break;
0000d6  e009              B        |L1.236|
                  |L1.216|
;;;71     					case _tRRT:
;;;72     						TIM2->ARR=10;
0000d8  200a              MOVS     r0,#0xa
0000da  0741              LSLS     r1,r0,#29
0000dc  62c8              STR      r0,[r1,#0x2c]
;;;73     						EE_PORT->BSRRL   =  EE_BIT;									// high
0000de  2001              MOVS     r0,#1
0000e0  4904              LDR      r1,|L1.244|
0000e2  8308              STRH     r0,[r1,#0x18]
;;;74     						status=_eeIDLE;
0000e4  2000              MOVS     r0,#0
0000e6  6060              STR      r0,[r4,#4]
;;;75     						break;
0000e8  e000              B        |L1.236|
                  |L1.234|
;;;76     //______________________________________________________________
;;;77     //					case tLOW0:
;;;78     //						TIM2->ARR=16;
;;;79     //						EE_PORT->BSRRH   =  EE_BIT;									// low
;;;80     //						status=tLOW1;
;;;81     //						break;
;;;82     //					case tLOW1:
;;;83     //						TIM2->ARR=25;
;;;84     //						EE_PORT->BSRRL   =  EE_BIT;									// high
;;;85     //						status=_eePROC;
;;;86     //						break;
;;;87     //______________________________________________________________
;;;88     					default:
;;;89     						break;
0000ea  bf00              NOP      
                  |L1.236|
0000ec  bf00              NOP                            ;38
                  |L1.238|
;;;90     				}
;;;91     			}
;;;92     }
0000ee  bd70              POP      {r4-r6,pc}
;;;93     /*******************************************************************************
                          ENDP

                  |L1.240|
                          DCD      ||me||
                  |L1.244|
                          DCD      0x40020000

                          AREA ||i._ZN3_EEC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN3_EEC2Ev                  ; Alternate entry point ; _EE::_EE__sub_object()
                  _ZN3_EEC1Ev PROC ; _EE::_EE()
;;;98     *******************************************************************************/
;;;99     _EE::_EE() {	
;;;100          io=_stdio(NULL);
;;;101          _stdio(io);
;;;102    			nbits=temp=count=nsamples=0;
;;;103    			enabled=false;
;;;104    			ISR(this);
;;;105    	
;;;106    GPIO_InitTypeDef					
;;;107    			GPIO_InitStructure;
;;;108    			GPIO_StructInit(&GPIO_InitStructure);
;;;109    			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;110    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;111    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
;;;112    			GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
;;;113    			GPIO_InitStructure.GPIO_Pin = EE_BIT;
;;;114    			GPIO_Init(EE_PORT, &GPIO_InitStructure);
;;;115    			GPIO_SetBits(EE_PORT,EE_BIT);
;;;116    
;;;117    			TIM_TimeBaseInitTypeDef TIM;
;;;118    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
;;;119    			TIM_TimeBaseStructInit(&TIM);
;;;120    			TIM.TIM_Prescaler = (SystemCoreClock/2000000)-1;
;;;121    			TIM.TIM_Period = 1000;
;;;122    			TIM.TIM_ClockDivision = 0;
;;;123    			TIM.TIM_CounterMode = TIM_CounterMode_Up;
;;;124    			TIM_TimeBaseInit(TIM2,&TIM);
;;;125    			TIM_ARRPreloadConfig(TIM2,DISABLE);
;;;126    			TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
;;;127    			NVIC_EnableIRQ(TIM2_IRQn);
;;;128    			TIM_Cmd(TIM2,ENABLE);
;;;129    }
;;;130    /*******************************************************************************
000000  b510              PUSH     {r4,lr}
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       _stdio
00000c  6020              STR      r0,[r4,#0]
00000e  6820              LDR      r0,[r4,#0]
000010  f7fffffe          BL       _stdio
000014  2000              MOVS     r0,#0
000016  6160              STR      r0,[r4,#0x14]
000018  6120              STR      r0,[r4,#0x10]
00001a  60e0              STR      r0,[r4,#0xc]
00001c  60a0              STR      r0,[r4,#8]
00001e  7620              STRB     r0,[r4,#0x18]
000020  4621              MOV      r1,r4
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       _ZN3_EE3ISREPS_ ; _EE::ISR(_EE*)
000028  a804              ADD      r0,sp,#0x10
00002a  f7fffffe          BL       GPIO_StructInit
00002e  2001              MOVS     r0,#1
000030  f88d0014          STRB     r0,[sp,#0x14]
000034  2003              MOVS     r0,#3
000036  f88d0015          STRB     r0,[sp,#0x15]
00003a  2002              MOVS     r0,#2
00003c  f88d0017          STRB     r0,[sp,#0x17]
000040  2001              MOVS     r0,#1
000042  f88d0016          STRB     r0,[sp,#0x16]
000046  9004              STR      r0,[sp,#0x10]
000048  a904              ADD      r1,sp,#0x10
00004a  481f              LDR      r0,|L2.200|
00004c  f7fffffe          BL       GPIO_Init
000050  2101              MOVS     r1,#1
000052  481d              LDR      r0,|L2.200|
000054  f7fffffe          BL       GPIO_SetBits
000058  2101              MOVS     r1,#1
00005a  4608              MOV      r0,r1
00005c  f7fffffe          BL       RCC_APB1PeriphClockCmd
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       TIM_TimeBaseStructInit
000066  4819              LDR      r0,|L2.204|
000068  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00006a  4919              LDR      r1,|L2.208|
00006c  fbb0f0f1          UDIV     r0,r0,r1
000070  1e40              SUBS     r0,r0,#1
000072  b280              UXTH     r0,r0
000074  f8ad0004          STRH     r0,[sp,#4]
000078  f44f707a          MOV      r0,#0x3e8
00007c  9002              STR      r0,[sp,#8]
00007e  2000              MOVS     r0,#0
000080  f8ad000c          STRH     r0,[sp,#0xc]
000084  f8ad0006          STRH     r0,[sp,#6]
000088  a901              ADD      r1,sp,#4
00008a  f04f4080          MOV      r0,#0x40000000
00008e  f7fffffe          BL       TIM_TimeBaseInit
000092  2100              MOVS     r1,#0
000094  f04f4080          MOV      r0,#0x40000000
000098  f7fffffe          BL       TIM_ARRPreloadConfig
00009c  2201              MOVS     r2,#1
00009e  4611              MOV      r1,r2
0000a0  0790              LSLS     r0,r2,#30
0000a2  f7fffffe          BL       TIM_ITConfig
0000a6  201c              MOVS     r0,#0x1c
0000a8  2101              MOVS     r1,#1
0000aa  4081              LSLS     r1,r1,r0
0000ac  0942              LSRS     r2,r0,#5
0000ae  0092              LSLS     r2,r2,#2
0000b0  f10222e0          ADD      r2,r2,#0xe000e000
0000b4  f8c21100          STR      r1,[r2,#0x100]
0000b8  bf00              NOP      
0000ba  2101              MOVS     r1,#1
0000bc  0788              LSLS     r0,r1,#30
0000be  f7fffffe          BL       TIM_Cmd
0000c2  4620              MOV      r0,r4
0000c4  b006              ADD      sp,sp,#0x18
0000c6  bd10              POP      {r4,pc}
                          ENDP

                  |L2.200|
                          DCD      0x40020000
                  |L2.204|
                          DCD      SystemCoreClock
                  |L2.208|
                          DCD      0x001e8480

                          AREA ||i._ZN3_EED1Ev||, CODE, READONLY, ALIGN=2

                  _ZN3_EED2Ev                  ; Alternate entry point ; _EE::~_EE__sub_object()
                  _ZN3_EED1Ev PROC ; _EE::~_EE()
;;;135    *******************************************************************************/
;;;136    _EE::~_EE() {	
;;;137    			TIM_ITConfig(TIM2,TIM_IT_Update,DISABLE);
;;;138    			NVIC_DisableIRQ(TIM2_IRQn);
;;;139    			_buffer_close(buffer);
;;;140    }
;;;141    /**
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  0788              LSLS     r0,r1,#30
00000a  f7fffffe          BL       TIM_ITConfig
00000e  201c              MOVS     r0,#0x1c
000010  2101              MOVS     r1,#1
000012  4081              LSLS     r1,r1,r0
000014  4a04              LDR      r2,|L3.40|
000016  0943              LSRS     r3,r0,#5
000018  f8421023          STR      r1,[r2,r3,LSL #2]
00001c  bf00              NOP      
00001e  69e0              LDR      r0,[r4,#0x1c]
000020  f7fffffe          BL       _buffer_close
000024  4620              MOV      r0,r4
000026  bd10              POP      {r4,pc}
                          ENDP

                  |L3.40|
                          DCD      0xe000e180

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN3_EE3ISREPS_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_EE3ISREPS_||
                          DCD      0x80aab0b0

                          AREA ||area_number.5||, LINKORDER=||i._ZN3_EEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_EEC1Ev||
                          DCD      0x8005a8b0

                          AREA ||area_number.6||, LINKORDER=||i._ZN3_EED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_EED1Ev||
                          DCD      0x80a8b0b0

                          AREA ||.data||, DATA, ALIGN=2

                  ||me||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\ee.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_ee_cpp_63dea964___Z7__REV16j|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_ee_cpp_63dea964___Z7__REV16j| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_ee_cpp_63dea964___Z7__REVSHi|
#line 128
|__asm___6_ee_cpp_63dea964___Z7__REVSHi| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
