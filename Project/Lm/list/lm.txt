; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave --exceptions -o.\output\lm.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\lm.d --cpu=Cortex-M3 --apcs=interwork//ropi -O0 --diag_suppress=9931 -I.\Include -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32F4-Discovery -I..\lib\inc -I..\..\Utilities\FatFs_R0_10b\src -I..\..\Utilities\MP3 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\..\..\Desktop\rapidjson-master\include -IC:\Users\MOCNIK\Documents\stm32\Project\Lm\RTE -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7\Device\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7 -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F2XX -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 -D__IOC_V2__ --omf_browse=.\output\lm.crf Source\lm.cpp]
                          THUMB

                          AREA ||i._ZN3_LM10PlusDecodeEPc||, CODE, READONLY, ALIGN=2

                  _ZN3_LM10PlusDecodeEPc PROC ; _LM::PlusDecode(char*)
;;;226    *******************************************************************************/
;;;227    int		_LM::PlusDecode(char *c) {
000000  b573              PUSH     {r0,r1,r4-r6,lr}
000002  4604              MOV      r4,r0
;;;228    			if(*c) {
000004  9801              LDR      r0,[sp,#4]
000006  7800              LDRB     r0,[r0,#0]
000008  2800              CMP      r0,#0
00000a  d07c              BEQ      |L1.262|
;;;229    				switch(*c) {
00000c  9801              LDR      r0,[sp,#4]
00000e  7800              LDRB     r0,[r0,#0]
000010  2850              CMP      r0,#0x50
000012  d00c              BEQ      |L1.46|
000014  dc06              BGT      |L1.36|
000016  2842              CMP      r0,#0x42
000018  d04c              BEQ      |L1.180|
00001a  2844              CMP      r0,#0x44
00001c  d063              BEQ      |L1.230|
00001e  284c              CMP      r0,#0x4c
000020  d172              BNE      |L1.264|
000022  e015              B        |L1.80|
                  |L1.36|
000024  2857              CMP      r0,#0x57
000026  d02b              BEQ      |L1.128|
000028  2866              CMP      r0,#0x66
00002a  d17e              BNE      |L1.298|
00002c  e074              B        |L1.280|
                  |L1.46|
;;;230    					case 'P':
;;;231    						_thread_add((void *)_LM::Print,this,(char *)"lm",strtoul(++c,NULL,0));
00002e  9901              LDR      r1,[sp,#4]
000030  1c49              ADDS     r1,r1,#1
000032  4608              MOV      r0,r1
000034  2200              MOVS     r2,#0
000036  9101              STR      r1,[sp,#4]
000038  4611              MOV      r1,r2
00003a  f7fffffe          BL       strtoul
00003e  4605              MOV      r5,r0
000040  462b              MOV      r3,r5
000042  a241              ADR      r2,|L1.328|
000044  4621              MOV      r1,r4
000046  4841              LDR      r0,|L1.332|
000048  4478              ADD      r0,r0,pc
00004a  f7fffffe          BL       _thread_add
;;;232    						break;
00004e  e071              B        |L1.308|
                  |L1.80|
;;;233    					case 'L': {
;;;234    						int *cc=(int *)strtoul(++c,&c,0);
000050  9901              LDR      r1,[sp,#4]
000052  1c49              ADDS     r1,r1,#1
000054  4608              MOV      r0,r1
000056  2200              MOVS     r2,#0
000058  9101              STR      r1,[sp,#4]
00005a  a901              ADD      r1,sp,#4
00005c  f7fffffe          BL       strtoul
000060  4605              MOV      r5,r0
;;;235    						while(*c)
000062  e008              B        |L1.118|
                  |L1.100|
;;;236    							*cc++=(int)strtoul(++c,&c,0);
000064  9901              LDR      r1,[sp,#4]
000066  1c49              ADDS     r1,r1,#1
000068  4608              MOV      r0,r1
00006a  2200              MOVS     r2,#0
00006c  9101              STR      r1,[sp,#4]
00006e  a901              ADD      r1,sp,#4
000070  f7fffffe          BL       strtoul
000074  c501              STM      r5!,{r0}
                  |L1.118|
000076  9801              LDR      r0,[sp,#4]            ;235
000078  7800              LDRB     r0,[r0,#0]            ;235
00007a  2800              CMP      r0,#0                 ;235
00007c  d1f2              BNE      |L1.100|
;;;237    						}
;;;238    						break;
00007e  e059              B        |L1.308|
                  |L1.128|
;;;239    					case 'W': {
;;;240    						short *cc=(short *)strtoul(++c,&c,0);
000080  9901              LDR      r1,[sp,#4]
000082  1c49              ADDS     r1,r1,#1
000084  4608              MOV      r0,r1
000086  2200              MOVS     r2,#0
000088  9101              STR      r1,[sp,#4]
00008a  a901              ADD      r1,sp,#4
00008c  f7fffffe          BL       strtoul
000090  4605              MOV      r5,r0
;;;241    						while(*c)
000092  e00a              B        |L1.170|
                  |L1.148|
;;;242    							*cc++=(short)strtoul(++c,&c,0);
000094  9901              LDR      r1,[sp,#4]
000096  1c49              ADDS     r1,r1,#1
000098  4608              MOV      r0,r1
00009a  2200              MOVS     r2,#0
00009c  9101              STR      r1,[sp,#4]
00009e  a901              ADD      r1,sp,#4
0000a0  f7fffffe          BL       strtoul
0000a4  b200              SXTH     r0,r0
0000a6  f8250b02          STRH     r0,[r5],#2
                  |L1.170|
0000aa  9801              LDR      r0,[sp,#4]            ;241
0000ac  7800              LDRB     r0,[r0,#0]            ;241
0000ae  2800              CMP      r0,#0                 ;241
0000b0  d1f0              BNE      |L1.148|
;;;243    						}
;;;244    						break;
0000b2  e03f              B        |L1.308|
                  |L1.180|
;;;245    					case 'B': {
;;;246    						char *cc=(char *)strtoul(++c,&c,0);
0000b4  9901              LDR      r1,[sp,#4]
0000b6  1c49              ADDS     r1,r1,#1
0000b8  4608              MOV      r0,r1
0000ba  2200              MOVS     r2,#0
0000bc  9101              STR      r1,[sp,#4]
0000be  a901              ADD      r1,sp,#4
0000c0  f7fffffe          BL       strtoul
0000c4  4605              MOV      r5,r0
;;;247    						while(*c)
0000c6  e009              B        |L1.220|
                  |L1.200|
;;;248    							*cc++=(char)strtoul(++c,&c,0);
0000c8  9901              LDR      r1,[sp,#4]
0000ca  1c49              ADDS     r1,r1,#1
0000cc  4608              MOV      r0,r1
0000ce  2200              MOVS     r2,#0
0000d0  9101              STR      r1,[sp,#4]
0000d2  a901              ADD      r1,sp,#4
0000d4  f7fffffe          BL       strtoul
0000d8  f8050b01          STRB     r0,[r5],#1
                  |L1.220|
0000dc  9801              LDR      r0,[sp,#4]            ;247
0000de  7800              LDRB     r0,[r0,#0]            ;247
0000e0  2800              CMP      r0,#0                 ;247
0000e2  d1f1              BNE      |L1.200|
;;;249    						}
;;;250    						break;
0000e4  e026              B        |L1.308|
                  |L1.230|
;;;251    					case 'D':
;;;252    						while(*c)
0000e6  e012              B        |L1.270|
                  |L1.232|
;;;253    							debug = (__DEBUG__)(debug | (1<<strtoul(++c,&c,10)));
0000e8  9901              LDR      r1,[sp,#4]
0000ea  1c49              ADDS     r1,r1,#1
0000ec  4608              MOV      r0,r1
0000ee  220a              MOVS     r2,#0xa
0000f0  9101              STR      r1,[sp,#4]
0000f2  a901              ADD      r1,sp,#4
0000f4  f7fffffe          BL       strtoul
0000f8  2101              MOVS     r1,#1
0000fa  fa01f000          LSL      r0,r1,r0
0000fe  f89414a8          LDRB     r1,[r4,#0x4a8]
000102  4308              ORRS     r0,r0,r1
000104  e001              B        |L1.266|
                  |L1.262|
000106  e01a              B        |L1.318|
                  |L1.264|
000108  e00f              B        |L1.298|
                  |L1.266|
00010a  f88404a8          STRB     r0,[r4,#0x4a8]
                  |L1.270|
00010e  9801              LDR      r0,[sp,#4]            ;252
000110  7800              LDRB     r0,[r0,#0]            ;252
000112  2800              CMP      r0,#0                 ;252
000114  d1e8              BNE      |L1.232|
;;;254    						break;
000116  e00d              B        |L1.308|
                  |L1.280|
;;;255    					case 'f':
;;;256    						pyro.addFilter(++c);
000118  9801              LDR      r0,[sp,#4]
00011a  1c40              ADDS     r0,r0,#1
00011c  4601              MOV      r1,r0
00011e  9001              STR      r0,[sp,#4]
000120  f5047094          ADD      r0,r4,#0x128
000124  f7fffffe          BL       _ZN5_PYRO9addFilterEPc ; _PYRO::addFilter(char*)
;;;257    						break;
000128  e004              B        |L1.308|
                  |L1.298|
;;;258    					default:
;;;259    						*c=0;
00012a  2000              MOVS     r0,#0
00012c  9901              LDR      r1,[sp,#4]
00012e  7008              STRB     r0,[r1,#0]
;;;260    						return PARSE_SYNTAX;
000130  2001              MOVS     r0,#1
                  |L1.306|
;;;261    				}
;;;262    				*c=0;
;;;263    				return PARSE_OK;
;;;264    			} else {
;;;265    				*c=0;
;;;266    				return PARSE_MISSING;
;;;267    			}
;;;268    }
000132  bd7c              POP      {r2-r6,pc}
                  |L1.308|
000134  bf00              NOP                            ;232
000136  2000              MOVS     r0,#0                 ;262
000138  9901              LDR      r1,[sp,#4]            ;262
00013a  7008              STRB     r0,[r1,#0]            ;262
00013c  e7f9              B        |L1.306|
                  |L1.318|
00013e  2000              MOVS     r0,#0                 ;265
000140  9901              LDR      r1,[sp,#4]            ;265
000142  7008              STRB     r0,[r1,#0]            ;265
000144  2003              MOVS     r0,#3                 ;266
000146  e7f4              B        |L1.306|
;;;269    /*******************************************************************************
                          ENDP

                  |L1.328|
000148  6c6d00            DCB      "lm",0
00014b  00                DCB      0
                  |L1.332|
                          DCD      _ZN3_LM5PrintEPv+0x100 - {PC} ; _LM::Print(void*)

                          AREA ||i._ZN3_LM10WhatDecodeEPc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  _ZN3_LM10WhatDecodeEPc PROC ; _LM::WhatDecode(char*)
;;;274    *******************************************************************************/
;;;275    int		_LM::WhatDecode(char *c) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;276    			if(*c) {
000006  7820              LDRB     r0,[r4,#0]
000008  b1c0              CBZ      r0,|L2.60|
;;;277    				switch(*c) {
00000a  7820              LDRB     r0,[r4,#0]
00000c  2844              CMP      r0,#0x44
00000e  d006              BEQ      |L2.30|
000010  2866              CMP      r0,#0x66
000012  d10b              BNE      |L2.44|
;;;278    					case 'f':
;;;279    						pyro.printFilter();
000014  f5057094          ADD      r0,r5,#0x128
000018  f7fffffe          BL       _ZN5_PYRO11printFilterEv ; _PYRO::printFilter()
;;;280    						break;
00001c  e00a              B        |L2.52|
                  |L2.30|
;;;281    					case 'D':
;;;282    						printf(" %0*X ",2*sizeof(debug)/sizeof(char),debug);
00001e  f89524a8          LDRB     r2,[r5,#0x4a8]
000022  2102              MOVS     r1,#2
000024  a007              ADR      r0,|L2.68|
000026  f7fffffe          BL       __2printf
;;;283    						break;
00002a  e003              B        |L2.52|
                  |L2.44|
;;;284    					default:
;;;285    						*c=0;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;286    						return PARSE_SYNTAX;
000030  2001              MOVS     r0,#1
                  |L2.50|
;;;287    				}
;;;288    				*c=0;
;;;289    				return PARSE_OK;
;;;290    			} else {
;;;291    				*c=0;
;;;292    				return PARSE_MISSING;
;;;293    			}
;;;294    }
000032  bd70              POP      {r4-r6,pc}
                  |L2.52|
000034  bf00              NOP                            ;280
000036  2000              MOVS     r0,#0                 ;288
000038  7020              STRB     r0,[r4,#0]            ;288
00003a  e7fa              B        |L2.50|
                  |L2.60|
00003c  2000              MOVS     r0,#0                 ;291
00003e  7020              STRB     r0,[r4,#0]            ;291
000040  2003              MOVS     r0,#3                 ;292
000042  e7f6              B        |L2.50|
;;;295    /*******************************************************************************
                          ENDP

                  |L2.68|
000044  2025302a          DCB      " %0*X ",0
000048  582000  
00004b  00                DCB      0

                          AREA ||i._ZN3_LM11MinusDecodeEPc||, CODE, READONLY, ALIGN=2

                  _ZN3_LM11MinusDecodeEPc PROC ; _LM::MinusDecode(char*)
;;;300    *******************************************************************************/
;;;301    int		_LM::MinusDecode(char *c) {
000000  b513              PUSH     {r0,r1,r4,lr}
000002  4604              MOV      r4,r0
;;;302    			if(*c) {
000004  9801              LDR      r0,[sp,#4]
000006  7800              LDRB     r0,[r0,#0]
000008  b390              CBZ      r0,|L3.112|
;;;303    				switch(*c) {
00000a  9801              LDR      r0,[sp,#4]
00000c  7800              LDRB     r0,[r0,#0]
00000e  2844              CMP      r0,#0x44
000010  d00f              BEQ      |L3.50|
000012  2850              CMP      r0,#0x50
000014  d002              BEQ      |L3.28|
000016  2866              CMP      r0,#0x66
000018  d120              BNE      |L3.92|
00001a  e005              B        |L3.40|
                  |L3.28|
;;;304    					case 'P':
;;;305    						_thread_remove((void *)_LM::Print,this);
00001c  4621              MOV      r1,r4
00001e  4817              LDR      r0,|L3.124|
000020  4478              ADD      r0,r0,pc
000022  f7fffffe          BL       _thread_remove
;;;306    						break;
000026  e01e              B        |L3.102|
                  |L3.40|
;;;307    					case 'f':
;;;308    						pyro.initFilter();
000028  f5047094          ADD      r0,r4,#0x128
00002c  f7fffffe          BL       _ZN5_PYRO10initFilterEv ; _PYRO::initFilter()
;;;309    						break;
000030  e019              B        |L3.102|
                  |L3.50|
;;;310    					case 'D':
;;;311    						while(*c)
000032  e00e              B        |L3.82|
                  |L3.52|
;;;312    							debug = (__DEBUG__)(debug & ~(1<<strtoul(++c,&c,10)));
000034  9901              LDR      r1,[sp,#4]
000036  1c49              ADDS     r1,r1,#1
000038  4608              MOV      r0,r1
00003a  220a              MOVS     r2,#0xa
00003c  9101              STR      r1,[sp,#4]
00003e  a901              ADD      r1,sp,#4
000040  f7fffffe          BL       strtoul
000044  2101              MOVS     r1,#1
000046  4081              LSLS     r1,r1,r0
000048  f89404a8          LDRB     r0,[r4,#0x4a8]
00004c  4388              BICS     r0,r0,r1
00004e  f88404a8          STRB     r0,[r4,#0x4a8]
                  |L3.82|
000052  9801              LDR      r0,[sp,#4]            ;311
000054  7800              LDRB     r0,[r0,#0]            ;311
000056  2800              CMP      r0,#0                 ;311
000058  d1ec              BNE      |L3.52|
;;;313    						break;
00005a  e004              B        |L3.102|
                  |L3.92|
;;;314    					default:
;;;315    						*c=0;
00005c  2000              MOVS     r0,#0
00005e  9901              LDR      r1,[sp,#4]
000060  7008              STRB     r0,[r1,#0]
;;;316    						return PARSE_SYNTAX;
000062  2001              MOVS     r0,#1
                  |L3.100|
;;;317    				}
;;;318    				*c=0;
;;;319    				return PARSE_OK;
;;;320    			} else {
;;;321    				*c=0;
;;;322    				return PARSE_MISSING;
;;;323    			}
;;;324    }
000064  bd1c              POP      {r2-r4,pc}
                  |L3.102|
000066  bf00              NOP                            ;306
000068  2000              MOVS     r0,#0                 ;318
00006a  9901              LDR      r1,[sp,#4]            ;318
00006c  7008              STRB     r0,[r1,#0]            ;318
00006e  e7f9              B        |L3.100|
                  |L3.112|
000070  e7ff              B        |L3.114|
                  |L3.114|
000072  2000              MOVS     r0,#0                 ;321
000074  9901              LDR      r1,[sp,#4]            ;321
000076  7008              STRB     r0,[r1,#0]            ;321
000078  2003              MOVS     r0,#3                 ;322
00007a  e7f3              B        |L3.100|
;;;325    /*******************************************************************************
                          ENDP

                  |L3.124|
                          DCD      _ZN3_LM5PrintEPv+0x58 - {PC} ; _LM::Print(void*)

                          AREA ||i._ZN3_LM4PollEPv||, CODE, READONLY, ALIGN=1

                  _ZN3_LM4PollEPv PROC ; _LM::Poll(void*)
;;;96     *******************************************************************************/
;;;97     void	_LM::Poll(void *v) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
;;;98     			_LM *self = static_cast<_LM *>(v);
000006  462c              MOV      r4,r5
;;;99     			_io *temp=_stdio(self->io);
000008  6860              LDR      r0,[r4,#4]
00000a  f7fffffe          BL       _stdio
00000e  4606              MOV      r6,r0
;;;100    	
;;;101    			self->can.Parse(self);
000010  4621              MOV      r1,r4
000012  f504708e          ADD      r0,r4,#0x11c
000016  f7fffffe          BL       _ZN4_CAN5ParseEPv ; _CAN::Parse(void*)
;;;102    			self->spray.Poll();
00001a  f10400cc          ADD      r0,r4,#0xcc
00001e  f7fffffe          BL       _ZN6_SPRAY4PollEv ; _SPRAY::Poll()
;;;103    
;;;104    			_ADC::Instance()->Status();
000022  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000026  4607              MOV      r7,r0
000028  f7fffffe          BL       _ZN4_ADC6StatusEv ; _ADC::Status()
;;;105    	
;;;106    			if(_ADC::Instance()->error.V24 == false) {
00002c  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000030  f8900058          LDRB     r0,[r0,#0x58]
000034  f3c00080          UBFX     r0,r0,#2,#1
000038  b960              CBNZ     r0,|L4.84|
;;;107    				self->fan.Poll();
00003a  f204405c          ADD      r0,r4,#0x45c
00003e  f7fffffe          BL       _ZN4_FAN4PollEv ; _FAN::Poll()
;;;108    				self->pump.Poll();
000042  f5046087          ADD      r0,r4,#0x438
000046  f7fffffe          BL       _ZN5_PUMP4PollEv ; _PUMP::Poll()
;;;109    				_TIM::Instance()->Poll();
00004a  f7fffffe          BL       _ZN4_TIM8InstanceEv ; _TIM::Instance()
00004e  4607              MOV      r7,r0
000050  f7fffffe          BL       _ZN4_TIM4PollEv ; _TIM::Poll()
                  |L4.84|
;;;110    			}
;;;111    
;;;112    #ifdef __SIMULATION__
;;;113    			self->spray.Simulator();
;;;114    #ifdef USE_LCD
;;;115    //			if(!(++self->zzz % 10) && self->plot.Refresh())
;;;116    //				self->lcd.Grid();
;;;117    #endif
;;;118    #endif
;;;119    
;;;120    			_stdio(temp);
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       _stdio
;;;121    }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;122    /*******************************************************************************
                          ENDP


                          AREA ||i._ZN3_LM5ParseEPSt6__FILE||, CODE, READONLY, ALIGN=1

                  _ZN3_LM5ParseEPSt6__FILE PROC ; _LM::Parse(std::__FILE*)
;;;504    *******************************************************************************/
;;;505    bool	_LM::Parse(FILE *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;506    			return Parse(fgetc(f));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       fgetc
00000c  4606              MOV      r6,r0
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       _ZN3_LM5ParseEi ; _LM::Parse(int)
;;;507    }
000016  bd70              POP      {r4-r6,pc}
;;;508    /*******************************************************************************
                          ENDP


                          AREA ||i._ZN3_LM5ParseEi||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_flags
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  _ZN3_LM5ParseEi PROC ; _LM::Parse(int)
;;;513    *******************************************************************************/
;;;514    bool	_LM::Parse(int i) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  f5ad7d0a          SUB      sp,sp,#0x228
000008  4604              MOV      r4,r0
00000a  460e              MOV      r6,r1
;;;515    _ADCDMA	*offset	=&_ADC::Instance()->offset;
00000c  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000010  f1000530          ADD      r5,r0,#0x30
;;;516    _ADCDMA	*gain		=&_ADC::Instance()->gain;
000014  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000018  f1000844          ADD      r8,r0,#0x44
;;;517    _ADCDMA	*adf		=&_ADC::Instance()->adf;
00001c  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000020  f100071c          ADD      r7,r0,#0x1c
;;;518    
;;;519    			switch(i) {
000024  49f7              LDR      r1,|L6.1028|
000026  1a70              SUBS     r0,r6,r1
000028  428e              CMP      r6,r1
00002a  d071              BEQ      |L6.272|
00002c  dc38              BGT      |L6.160|
00002e  2e19              CMP      r6,#0x19
000030  d06f              BEQ      |L6.274|
000032  dc18              BGT      |L6.102|
000034  2e05              CMP      r6,#5
000036  d06d              BEQ      |L6.276|
000038  dc08              BGT      |L6.76|
00003a  f1060001          ADD      r0,r6,#1
00003e  2806              CMP      r0,#6
                  |L6.64|
000040  d269              BCS      |L6.278|
000042  e8dff000          TBB      [pc,r0]
000046  7a68              DCB      0x7a,0x68
000048  fdfcfbfa          DCB      0xfd,0xfc,0xfb,0xfa
                  |L6.76|
00004c  2e0a              CMP      r6,#0xa
00004e  d071              BEQ      |L6.308|
000050  dc04              BGT      |L6.92|
000052  2e08              CMP      r6,#8
000054  d06f              BEQ      |L6.310|
000056  2e09              CMP      r6,#9
                  |L6.88|
000058  d15d              BNE      |L6.278|
00005a  e12e              B        |L6.698|
                  |L6.92|
00005c  2e0d              CMP      r6,#0xd
00005e  d06b              BEQ      |L6.312|
000060  2e16              CMP      r6,#0x16
000062  d1f9              BNE      |L6.88|
000064  e11e              B        |L6.676|
                  |L6.102|
000066  f5b64f78          CMP      r6,#0xf800
00006a  d06f              BEQ      |L6.332|
00006c  dc0f              BGT      |L6.142|
00006e  f5b65f60          CMP      r6,#0x3800
000072  d06c              BEQ      |L6.334|
000074  dc04              BGT      |L6.128|
000076  2e1a              CMP      r6,#0x1a
000078  d06a              BEQ      |L6.336|
00007a  2e7f              CMP      r6,#0x7f
00007c  d1ec              BNE      |L6.88|
00007e  e183              B        |L6.904|
                  |L6.128|
000080  f5b64f38          CMP      r6,#0xb800
000084  d074              BEQ      |L6.368|
000086  f5b64f58          CMP      r6,#0xd800
00008a  d1e5              BNE      |L6.88|
00008c  e148              B        |L6.800|
                  |L6.142|
00008e  48de              LDR      r0,|L6.1032|
000090  4430              ADD      r0,r0,r6
000092  2805              CMP      r0,#5
000094  d2d4              BCS      |L6.64|
000096  e8dff000          TBB      [pc,r0]
00009a  5258              DCB      0x52,0x58
00009c  5d5f7500          DCB      0x5d,0x5f,0x75,0x00
                  |L6.160|
0000a0  4ada              LDR      r2,|L6.1036|
0000a2  1a81              SUBS     r1,r0,r2
0000a4  4290              CMP      r0,r2
0000a6  d04f              BEQ      |L6.328|
0000a8  dc1c              BGT      |L6.228|
0000aa  2806              CMP      r0,#6
0000ac  d075              BEQ      |L6.410|
0000ae  dc05              BGT      |L6.188|
0000b0  d2c6              BCS      |L6.64|
0000b2  e8dff000          TBB      [pc,r0]
0000b6  3084              DCB      0x30,0x84
0000b8  909a9c9e          DCB      0x90,0x9a,0x9c,0x9e
                  |L6.188|
0000bc  f64032ee          MOV      r2,#0xbee
0000c0  1a81              SUBS     r1,r0,r2
0000c2  4290              CMP      r0,r2
0000c4  d06a              BEQ      |L6.412|
0000c6  dc06              BGT      |L6.214|
0000c8  f6a030ec          SUB      r0,r0,#0xbec
0000cc  2800              CMP      r0,#0
0000ce  d072              BEQ      |L6.438|
0000d0  2801              CMP      r0,#1
0000d2  d1c1              BNE      |L6.88|
0000d4  e0cb              B        |L6.622|
                  |L6.214|
0000d6  2901              CMP      r1,#1
0000d8  d06e              BEQ      |L6.440|
0000da  48cd              LDR      r0,|L6.1040|
0000dc  4408              ADD      r0,r0,r1
0000de  2800              CMP      r0,#0
0000e0  d1ba              BNE      |L6.88|
0000e2  e02b              B        |L6.316|
                  |L6.228|
0000e4  f5b16fe0          CMP      r1,#0x700
0000e8  d074              BEQ      |L6.468|
0000ea  dc15              BGT      |L6.280|
0000ec  f5b17f40          CMP      r1,#0x300
0000f0  d047              BEQ      |L6.386|
0000f2  dc06              BGT      |L6.258|
0000f4  f5b17f80          CMP      r1,#0x100
0000f8  d02b              BEQ      |L6.338|
0000fa  f5b17f00          CMP      r1,#0x200
0000fe  d1ab              BNE      |L6.88|
000100  e029              B        |L6.342|
                  |L6.258|
000102  f5b16fa0          CMP      r1,#0x500
000106  d04a              BEQ      |L6.414|
000108  f5b16fc0          CMP      r1,#0x600
00010c  d1a4              BNE      |L6.88|
00010e  e055              B        |L6.444|
                  |L6.272|
000110  e046              B        |L6.416|
                  |L6.274|
000112  e111              B        |L6.824|
                  |L6.276|
000114  e0be              B        |L6.660|
                  |L6.278|
000116  e15f              B        |L6.984|
                  |L6.280|
000118  f5b14f7e          CMP      r1,#0xfe00
00011c  d064              BEQ      |L6.488|
00011e  f5b14f7f          CMP      r1,#0xff00
000122  d063              BEQ      |L6.492|
000124  48bb              LDR      r0,|L6.1044|
000126  4408              ADD      r0,r0,r1
000128  2800              CMP      r0,#0
00012a  d061              BEQ      |L6.496|
00012c  f5b07f80          CMP      r0,#0x100
000130  d192              BNE      |L6.88|
000132  e090              B        |L6.598|
                  |L6.308|
000134  e14f              B        |L6.982|
                  |L6.310|
000136  e126              B        |L6.902|
                  |L6.312|
000138  e135              B        |L6.934|
;;;520    				case EOF:
;;;521    					break;
00013a  e160              B        |L6.1022|
                  |L6.316|
;;;522    
;;;523    				case __F1:
;;;524    				case __f1:
00013c  bf00              NOP      
;;;525    					Select(PYRO);
00013e  2100              MOVS     r1,#0
000140  4620              MOV      r0,r4
000142  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
;;;526    					break;
000146  e15a              B        |L6.1022|
                  |L6.328|
;;;527    
;;;528    				case __F2:
;;;529    				case __f2:
000148  bf00              NOP      
;;;530    					break;
00014a  e158              B        |L6.1022|
                  |L6.332|
00014c  e0c3              B        |L6.726|
                  |L6.334|
00014e  e0d0              B        |L6.754|
                  |L6.336|
000150  e103              B        |L6.858|
                  |L6.338|
;;;531    				case __F3:
;;;532    				case __f3:
000152  bf00              NOP      
;;;533    					break;
000154  e153              B        |L6.1022|
                  |L6.342|
;;;534    				case __F4:
;;;535    				case __f4:
000156  bf00              NOP      
;;;536    					if(spray.mode.On)
000158  f894010c          LDRB     r0,[r4,#0x10c]
00015c  f3c00040          UBFX     r0,r0,#1,#1
000160  b138              CBZ      r0,|L6.370|
;;;537    						spray.mode.On=false;
000162  f894010c          LDRB     r0,[r4,#0x10c]
000166  f0200102          BIC      r1,r0,#2
00016a  f884110c          STRB     r1,[r4,#0x10c]
00016e  e007              B        |L6.384|
                  |L6.368|
000170  e0ca              B        |L6.776|
                  |L6.370|
;;;538    					else
;;;539    						spray.mode.On=true;
000172  f894010c          LDRB     r0,[r4,#0x10c]
000176  f0200002          BIC      r0,r0,#2
00017a  1c80              ADDS     r0,r0,#2
00017c  f884010c          STRB     r0,[r4,#0x10c]
                  |L6.384|
;;;540    					break;
000180  e13d              B        |L6.1022|
                  |L6.386|
;;;541    
;;;542    				case __F5:
;;;543    				case __f5:
000182  bf00              NOP      
;;;544    					Select(PUMP);
000184  2103              MOVS     r1,#3
000186  4620              MOV      r0,r4
000188  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
;;;545    					VT100.Repeat(1000);
00018c  f44f717a          MOV      r1,#0x3e8
000190  f1040008          ADD      r0,r4,#8
000194  f7fffffe          BL       _ZN5_TERM6RepeatEi ; _TERM::Repeat(int)
;;;546    					break;
000198  e131              B        |L6.1022|
                  |L6.410|
00019a  e05d              B        |L6.600|
                  |L6.412|
00019c  e074              B        |L6.648|
                  |L6.414|
;;;547    				case __F6:
;;;548    				case __f6:
00019e  bf00              NOP      
                  |L6.416|
;;;549    					Select(FAN);
0001a0  2104              MOVS     r1,#4
0001a2  4620              MOV      r0,r4
0001a4  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
;;;550    					VT100.Repeat(1000);
0001a8  f44f717a          MOV      r1,#0x3e8
0001ac  f1040008          ADD      r0,r4,#8
0001b0  f7fffffe          BL       _ZN5_TERM6RepeatEi ; _TERM::Repeat(int)
;;;551    					break;			
0001b4  e123              B        |L6.1022|
                  |L6.438|
0001b6  e054              B        |L6.610|
                  |L6.440|
0001b8  e05f              B        |L6.634|
0001ba  e00b              B        |L6.468|
                  |L6.444|
;;;552    				case __F7:
;;;553    				case __f7:
0001bc  bf00              NOP      
;;;554    					Select(SPRAY);
0001be  2105              MOVS     r1,#5
0001c0  4620              MOV      r0,r4
0001c2  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
;;;555    					VT100.Repeat(1000);
0001c6  f44f717a          MOV      r1,#0x3e8
0001ca  f1040008          ADD      r0,r4,#8
0001ce  f7fffffe          BL       _ZN5_TERM6RepeatEi ; _TERM::Repeat(int)
;;;556    					break;
0001d2  e114              B        |L6.1022|
                  |L6.468|
;;;557    				case __F8:
;;;558    				case __f8:
0001d4  bf00              NOP      
;;;559    					Select(EC20);
0001d6  2106              MOVS     r1,#6
0001d8  4620              MOV      r0,r4
0001da  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
;;;560    					Decode((char *)".2100");
0001de  a18e              ADR      r1,|L6.1048|
0001e0  4620              MOV      r0,r4
0001e2  f7fffffe          BL       _ZN3_LM6DecodeEPc ; _LM::Decode(char*)
;;;561    					break;
0001e6  e10a              B        |L6.1022|
                  |L6.488|
;;;562    				case __F9:
;;;563    				case __f9:
0001e8  bf00              NOP      
;;;564    					break;				
0001ea  e108              B        |L6.1022|
                  |L6.492|
;;;565    				case __F10:
;;;566    				case __f10:
0001ec  bf00              NOP      
;;;567    					break;				
0001ee  e106              B        |L6.1022|
                  |L6.496|
;;;568    				case __F11:
;;;569    				case __f11:
0001f0  bf00              NOP      
;;;570    					FIL f;
;;;571    					if(f_open(&f,"0:/lm.ini",FA_WRITE | FA_OPEN_ALWAYS) == FR_OK) {
0001f2  2212              MOVS     r2,#0x12
0001f4  a18a              ADR      r1,|L6.1056|
0001f6  a801              ADD      r0,sp,#4
0001f8  f7fffffe          BL       f_open
0001fc  bb38              CBNZ     r0,|L6.590|
;;;572    							pyro.SaveSettings((FILE *)&f);
0001fe  a901              ADD      r1,sp,#4
000200  f5047094          ADD      r0,r4,#0x128
000204  f7fffffe          BL       _ZN5_PYRO12SaveSettingsEPSt6__FILE ; _PYRO::SaveSettings(std::__FILE*)
;;;573    							pump.SaveSettings((FILE *)&f);
000208  a901              ADD      r1,sp,#4
00020a  f5046087          ADD      r0,r4,#0x438
00020e  f7fffffe          BL       _ZN5_PUMP12SaveSettingsEPSt6__FILE ; _PUMP::SaveSettings(std::__FILE*)
;;;574    							fan.SaveSettings((FILE *)&f);
000212  a901              ADD      r1,sp,#4
000214  f204405c          ADD      r0,r4,#0x45c
000218  f7fffffe          BL       _ZN4_FAN12SaveSettingsEPSt6__FILE ; _FAN::SaveSettings(std::__FILE*)
;;;575    							spray.SaveSettings((FILE *)&f);
00021c  a901              ADD      r1,sp,#4
00021e  f10400cc          ADD      r0,r4,#0xcc
000222  f7fffffe          BL       _ZN6_SPRAY12SaveSettingsEPSt6__FILE ; _SPRAY::SaveSettings(std::__FILE*)
;;;576    							ec20.SaveSettings((FILE *)&f);
000226  a901              ADD      r1,sp,#4
000228  f5046090          ADD      r0,r4,#0x480
00022c  f7fffffe          BL       _ZN5_EC2012SaveSettingsEPSt6__FILE ; _EC20::SaveSettings(std::__FILE*)
;;;577    							f_sync(&f);
000230  a801              ADD      r0,sp,#4
000232  f7fffffe          BL       f_sync
;;;578    							f_close(&f);							
000236  a801              ADD      r0,sp,#4
000238  e003              B        |L6.578|
00023a  e09f              B        |L6.892|
00023c  e099              B        |L6.882|
00023e  e093              B        |L6.872|
000240  e08d              B        |L6.862|
                  |L6.578|
000242  f7fffffe          BL       f_close
;;;579    							printf("\r\n saved...\r\n:");
000246  a079              ADR      r0,|L6.1068|
000248  f7fffffe          BL       __2printf
00024c  e002              B        |L6.596|
                  |L6.590|
;;;580    						}	else				
;;;581    							printf("\r\n file error...\r\n:");
00024e  a07b              ADR      r0,|L6.1084|
000250  f7fffffe          BL       __2printf
                  |L6.596|
;;;582    						break;	
000254  e0d3              B        |L6.1022|
                  |L6.598|
;;;583    
;;;584    				case __F12:
;;;585    				case __f12:
000256  bf00              NOP      
                  |L6.600|
;;;586    					return false;
000258  2000              MOVS     r0,#0
                  |L6.602|
;;;587    				
;;;588    				case __Up:
;;;589    					Increment(1, 0);
;;;590    					break;				
;;;591    				case __Down:
;;;592    					Increment(-1, 0);
;;;593    					break;	
;;;594    				case __Left:
;;;595    					Increment(0, -1);
;;;596    					break;				
;;;597    				case __Right:
;;;598    					Increment(0, 1);
;;;599    					break;	
;;;600    		
;;;601    				case __CtrlE:
;;;602    					Decode((char *)".BA");
;;;603    					printf("\r\n:");
;;;604    					break;	
;;;605    
;;;606    				case __CtrlV:
;;;607    					if(spray.vibrate)
;;;608    						spray.vibrate=false;
;;;609    					else
;;;610    						spray.vibrate=true;
;;;611    					break;
;;;612    
;;;613    				case __CtrlI:
;;;614    					*offset = *adf;
;;;615    					printf("\r\n:offset...  %3d,%3d,%3d,%3d\r\n:",offset->cooler,offset->bottle,offset->compressor,offset->air);
;;;616    					break;
;;;617    					
;;;618    				case __FOOT_OFF:
;;;619    					printf("footswitch disconnected \r\n:");
;;;620    					spray.mode.On=false;
;;;621    					Decode((char *)".2200");
;;;622    					break;	
;;;623    				case __FOOT_IDLE:
;;;624    					spray.mode.On=false;
;;;625    					Decode((char *)".2200");
;;;626    					break;	
;;;627    				case __FOOT_MID:
;;;628    					spray.mode.On=true;
;;;629    					Decode((char *)".2200");
;;;630    					break;	
;;;631    				case __FOOT_ON:		
;;;632    					spray.mode.On=true;
;;;633    					Decode((char *)".2201");
;;;634    					break;	
;;;635    									
;;;636    				case __CtrlY:
;;;637    					NVIC_SystemReset();
;;;638    				case __CtrlZ:
;;;639    					while(1);
;;;640    
;;;641    				case __CtrlA:
;;;642    					Select(CTRL_A);
;;;643    					break;
;;;644    				case __CtrlB:
;;;645    					Select(CTRL_B);
;;;646    					break;
;;;647    				case __CtrlC:
;;;648    					Select(CTRL_C);
;;;649    					break;
;;;650    				case __CtrlD:
;;;651    					Select(CTRL_D);
;;;652    					break;
;;;653    
;;;654    				case 0x08:
;;;655    				case 0x7f:
;;;656    					if(VT100.clp != VT100.cl) {
;;;657    						--VT100.clp;
;;;658    					printf("\b \b");
;;;659    					}
;;;660    					break;
;;;661    				case 0x0d:
;;;662    					*VT100.clp=0;
;;;663    					VT100.clp=VT100.cl;
;;;664    					i=Decode(VT100.clp);
;;;665    					if(i)
;;;666    						printf(" ...wtf(%02X)\r\n:",i);
;;;667    					else
;;;668    						printf("\r\n:");						
;;;669    					break;
;;;670    				case 0x0a:
;;;671    					break;
;;;672    				default:
;;;673    					if(i & 0xff00)
;;;674    						printf("<%X>\r\n:",i);
;;;675    					else {
;;;676    						printf("%c",i);
;;;677    						*VT100.clp++=i;
;;;678    					}
;;;679    			}
;;;680    			return true;
;;;681    }
00025a  f50d7d0a          ADD      sp,sp,#0x228
00025e  e8bd81f0          POP      {r4-r8,pc}
                  |L6.610|
000262  2200              MOVS     r2,#0                 ;589
000264  2101              MOVS     r1,#1                 ;589
000266  4620              MOV      r0,r4                 ;589
000268  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
00026c  e0c7              B        |L6.1022|
                  |L6.622|
00026e  2200              MOVS     r2,#0                 ;592
000270  1e51              SUBS     r1,r2,#1              ;592
000272  4620              MOV      r0,r4                 ;592
000274  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
000278  e0c1              B        |L6.1022|
                  |L6.634|
00027a  f04f32ff          MOV      r2,#0xffffffff        ;595
00027e  2100              MOVS     r1,#0                 ;595
000280  4620              MOV      r0,r4                 ;595
000282  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
000286  e0ba              B        |L6.1022|
                  |L6.648|
000288  2201              MOVS     r2,#1                 ;598
00028a  2100              MOVS     r1,#0                 ;598
00028c  4620              MOV      r0,r4                 ;598
00028e  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
000292  e0b4              B        |L6.1022|
                  |L6.660|
000294  a16e              ADR      r1,|L6.1104|
000296  4620              MOV      r0,r4                 ;602
000298  f7fffffe          BL       _ZN3_LM6DecodeEPc ; _LM::Decode(char*)
00029c  a06b              ADR      r0,|L6.1100|
00029e  f7fffffe          BL       __2printf
0002a2  e0ac              B        |L6.1022|
                  |L6.676|
0002a4  f8940118          LDRB     r0,[r4,#0x118]        ;607
0002a8  b118              CBZ      r0,|L6.690|
0002aa  2100              MOVS     r1,#0                 ;608
0002ac  f8841118          STRB     r1,[r4,#0x118]        ;608
0002b0  e002              B        |L6.696|
                  |L6.690|
0002b2  2101              MOVS     r1,#1                 ;610
0002b4  f8841118          STRB     r1,[r4,#0x118]        ;610
                  |L6.696|
0002b8  e0a1              B        |L6.1022|
                  |L6.698|
0002ba  2214              MOVS     r2,#0x14              ;614
0002bc  4639              MOV      r1,r7                 ;614
0002be  4628              MOV      r0,r5                 ;614
0002c0  f7fffffe          BL       __aeabi_memcpy
0002c4  8a28              LDRH     r0,[r5,#0x10]         ;615
0002c6  9000              STR      r0,[sp,#0]            ;615
0002c8  89eb              LDRH     r3,[r5,#0xe]          ;615
0002ca  89aa              LDRH     r2,[r5,#0xc]          ;615
0002cc  8969              LDRH     r1,[r5,#0xa]          ;615
0002ce  a061              ADR      r0,|L6.1108|
0002d0  f7fffffe          BL       __2printf
0002d4  e093              B        |L6.1022|
                  |L6.726|
0002d6  a068              ADR      r0,|L6.1144|
0002d8  f7fffffe          BL       __2printf
0002dc  f894010c          LDRB     r0,[r4,#0x10c]        ;620
0002e0  f0200102          BIC      r1,r0,#2              ;620
0002e4  f884110c          STRB     r1,[r4,#0x10c]        ;620
0002e8  a16a              ADR      r1,|L6.1172|
0002ea  4620              MOV      r0,r4                 ;621
0002ec  f7fffffe          BL       _ZN3_LM6DecodeEPc ; _LM::Decode(char*)
0002f0  e085              B        |L6.1022|
                  |L6.754|
0002f2  f894010c          LDRB     r0,[r4,#0x10c]        ;624
0002f6  f0200102          BIC      r1,r0,#2              ;624
0002fa  f884110c          STRB     r1,[r4,#0x10c]        ;624
0002fe  a165              ADR      r1,|L6.1172|
000300  4620              MOV      r0,r4                 ;625
000302  f7fffffe          BL       _ZN3_LM6DecodeEPc ; _LM::Decode(char*)
000306  e07a              B        |L6.1022|
                  |L6.776|
000308  f894010c          LDRB     r0,[r4,#0x10c]        ;628
00030c  f0200002          BIC      r0,r0,#2              ;628
000310  1c80              ADDS     r0,r0,#2              ;628
000312  f884010c          STRB     r0,[r4,#0x10c]        ;628
000316  a15f              ADR      r1,|L6.1172|
000318  4620              MOV      r0,r4                 ;629
00031a  f7fffffe          BL       _ZN3_LM6DecodeEPc ; _LM::Decode(char*)
00031e  e06e              B        |L6.1022|
                  |L6.800|
000320  f894010c          LDRB     r0,[r4,#0x10c]        ;632
000324  f0200002          BIC      r0,r0,#2              ;632
000328  1c80              ADDS     r0,r0,#2              ;632
00032a  f884010c          STRB     r0,[r4,#0x10c]        ;632
00032e  a15b              ADR      r1,|L6.1180|
000330  4620              MOV      r0,r4                 ;633
000332  f7fffffe          BL       _ZN3_LM6DecodeEPc ; _LM::Decode(char*)
000336  e062              B        |L6.1022|
                  |L6.824|
000338  bf00              NOP                            ;637
00033a  f3bf8f4f          DSB                            ;637
00033e  4859              LDR      r0,|L6.1188|
000340  6800              LDR      r0,[r0,#0]            ;637
000342  f40060e0          AND      r0,r0,#0x700          ;637
000346  4958              LDR      r1,|L6.1192|
000348  4308              ORRS     r0,r0,r1              ;637
00034a  1d00              ADDS     r0,r0,#4              ;637
00034c  4955              LDR      r1,|L6.1188|
00034e  6008              STR      r0,[r1,#0]            ;637
000350  f3bf8f4f          DSB                            ;637
000354  bf00              NOP                            ;637
000356  bf00              NOP                            ;637
                  |L6.856|
000358  e7fe              B        |L6.856|
                  |L6.858|
00035a  bf00              NOP                            ;639
                  |L6.860|
00035c  e7fe              B        |L6.860|
                  |L6.862|
00035e  2107              MOVS     r1,#7                 ;642
000360  4620              MOV      r0,r4                 ;642
000362  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
000366  e04a              B        |L6.1022|
                  |L6.872|
000368  2108              MOVS     r1,#8                 ;645
00036a  4620              MOV      r0,r4                 ;645
00036c  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
000370  e045              B        |L6.1022|
                  |L6.882|
000372  2109              MOVS     r1,#9                 ;648
000374  4620              MOV      r0,r4                 ;648
000376  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
00037a  e040              B        |L6.1022|
                  |L6.892|
00037c  210a              MOVS     r1,#0xa               ;651
00037e  4620              MOV      r0,r4                 ;651
000380  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
000384  e03b              B        |L6.1022|
                  |L6.902|
000386  bf00              NOP                            ;655
                  |L6.904|
000388  f1040018          ADD      r0,r4,#0x18           ;656
00038c  f8d41098          LDR      r1,[r4,#0x98]         ;656
000390  4281              CMP      r1,r0                 ;656
000392  d007              BEQ      |L6.932|
000394  f8d40098          LDR      r0,[r4,#0x98]         ;657
000398  1e40              SUBS     r0,r0,#1              ;657
00039a  f8c40098          STR      r0,[r4,#0x98]         ;657
00039e  a043              ADR      r0,|L6.1196|
0003a0  f7fffffe          BL       __2printf
                  |L6.932|
0003a4  e02b              B        |L6.1022|
                  |L6.934|
0003a6  2100              MOVS     r1,#0                 ;662
0003a8  f8d40098          LDR      r0,[r4,#0x98]         ;662
0003ac  7001              STRB     r1,[r0,#0]            ;662
0003ae  f1040018          ADD      r0,r4,#0x18           ;663
0003b2  f8c40098          STR      r0,[r4,#0x98]         ;663
0003b6  4620              MOV      r0,r4                 ;664
0003b8  f8d41098          LDR      r1,[r4,#0x98]         ;664
0003bc  f7fffffe          BL       _ZN3_LM6DecodeEPc ; _LM::Decode(char*)
0003c0  4606              MOV      r6,r0                 ;664
0003c2  b126              CBZ      r6,|L6.974|
0003c4  4631              MOV      r1,r6                 ;666
0003c6  a03a              ADR      r0,|L6.1200|
0003c8  f7fffffe          BL       __2printf
0003cc  e002              B        |L6.980|
                  |L6.974|
0003ce  a01f              ADR      r0,|L6.1100|
0003d0  f7fffffe          BL       __2printf
                  |L6.980|
0003d4  e013              B        |L6.1022|
                  |L6.982|
0003d6  e012              B        |L6.1022|
                  |L6.984|
0003d8  f406407f          AND      r0,r6,#0xff00         ;673
0003dc  b120              CBZ      r0,|L6.1000|
0003de  4631              MOV      r1,r6                 ;674
0003e0  a038              ADR      r0,|L6.1220|
0003e2  f7fffffe          BL       __2printf
0003e6  e009              B        |L6.1020|
                  |L6.1000|
0003e8  4631              MOV      r1,r6                 ;676
0003ea  a038              ADR      r0,|L6.1228|
0003ec  f7fffffe          BL       __2printf
0003f0  f8d43098          LDR      r3,[r4,#0x98]         ;677
0003f4  1c58              ADDS     r0,r3,#1              ;677
0003f6  f8c40098          STR      r0,[r4,#0x98]         ;677
0003fa  701e              STRB     r6,[r3,#0]            ;677
                  |L6.1020|
0003fc  bf00              NOP                            ;519
                  |L6.1022|
0003fe  bf00              NOP                            ;521
000400  2001              MOVS     r0,#1                 ;680
000402  e72a              B        |L6.602|
                  |L6.1028|
                          DCD      0x001b4f55
                  |L6.1032|
                          DCD      0xffe4b0b0
                  |L6.1036|
                          DCD      0x5b15e329
                  |L6.1040|
                          DCD      0xa4ea29c5
                  |L6.1044|
                          DCD      0xfffeff00
                  |L6.1048|
000418  2e323130          DCB      ".2100",0
00041c  3000    
00041e  00                DCB      0
00041f  00                DCB      0
                  |L6.1056|
000420  303a2f6c          DCB      "0:/lm.ini",0
000424  6d2e696e
000428  6900    
00042a  00                DCB      0
00042b  00                DCB      0
                  |L6.1068|
00042c  0d0a2073          DCB      "\r\n saved...\r\n:",0
000430  61766564
000434  2e2e2e0d
000438  0a3a00  
00043b  00                DCB      0
                  |L6.1084|
00043c  0d0a2066          DCB      "\r\n file error..."
000440  696c6520
000444  6572726f
000448  722e2e2e
                  |L6.1100|
00044c  0d0a3a00          DCB      "\r\n:",0
                  |L6.1104|
000450  2e424100          DCB      ".BA",0
                  |L6.1108|
000454  0d0a3a6f          DCB      "\r\n:offset...  %3d,%3d,%3d,%3d\r\n:",0
000458  66667365
00045c  742e2e2e
000460  20202533
000464  642c2533
000468  642c2533
00046c  642c2533
000470  640d0a3a
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L6.1144|
000478  666f6f74          DCB      "footswitch disconnected \r\n:",0
00047c  73776974
000480  63682064
000484  6973636f
000488  6e6e6563
00048c  74656420
000490  0d0a3a00
                  |L6.1172|
000494  2e323230          DCB      ".2200",0
000498  3000    
00049a  00                DCB      0
00049b  00                DCB      0
                  |L6.1180|
00049c  2e323230          DCB      ".2201",0
0004a0  3100    
0004a2  00                DCB      0
0004a3  00                DCB      0
                  |L6.1188|
                          DCD      0xe000ed0c
                  |L6.1192|
                          DCD      0x05fa0000
                  |L6.1196|
0004ac  08200800          DCB      "\b \b",0
                  |L6.1200|
0004b0  202e2e2e          DCB      " ...wtf(%02X)\r\n:",0
0004b4  77746628
0004b8  25303258
0004bc  290d0a3a
0004c0  00      
0004c1  00                DCB      0
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L6.1220|
0004c4  3c25583e          DCB      "<%X>\r\n:",0
0004c8  0d0a3a00
                  |L6.1228|
0004cc  256300            DCB      "%c",0
0004cf  00                DCB      0
                          ENDP


                          AREA ||i._ZN3_LM5ParseEv||, CODE, READONLY, ALIGN=1

                  _ZN3_LM5ParseEv PROC ; _LM::Parse()
;;;494    *******************************************************************************/
;;;495    bool	_LM::Parse() {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;496    			_stdio(io);
000004  6860              LDR      r0,[r4,#4]
000006  f7fffffe          BL       _stdio
;;;497    			return Parse(VT100.Escape());
00000a  f1040008          ADD      r0,r4,#8
00000e  f7fffffe          BL       _ZN5_TERM6EscapeEv ; _TERM::Escape()
000012  4605              MOV      r5,r0
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _ZN3_LM5ParseEi ; _LM::Parse(int)
;;;498    }
00001c  bd70              POP      {r4-r6,pc}
;;;499    /*******************************************************************************
                          ENDP


                          AREA ||i._ZN3_LM5PrintEPv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _ZN3_LM5PrintEPv PROC ; _LM::Print(void*)
;;;127    *******************************************************************************/
;;;128    void	_LM::Print(void *v) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4605              MOV      r5,r0
;;;129    			_LM *self = static_cast<_LM *>(v);	
000004  462e              MOV      r6,r5
;;;130    			_io*	temp=_stdio(self->io);
000006  6870              LDR      r0,[r6,#4]
000008  f7fffffe          BL       _stdio
00000c  4607              MOV      r7,r0
;;;131    			_ADCDMA *adf=&_ADC::Instance()->adf;
00000e  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000012  f100041c          ADD      r4,r0,#0x1c
;;;132    
;;;133    			printf("%d,%d,%d,%d\r\n",adf->cooler,adf->bottle,adf->compressor,adf->air);
000016  8a20              LDRH     r0,[r4,#0x10]
000018  9000              STR      r0,[sp,#0]
00001a  89e3              LDRH     r3,[r4,#0xe]
00001c  89a2              LDRH     r2,[r4,#0xc]
00001e  8961              LDRH     r1,[r4,#0xa]
000020  a003              ADR      r0,|L8.48|
000022  f7fffffe          BL       __2printf
;;;134    
;;;135    			_stdio(temp);
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       _stdio
;;;136    }
00002c  bdf8              POP      {r3-r7,pc}
;;;137    /*******************************************************************************
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
000030  25642c25          DCB      "%d,%d,%d,%d\r\n",0
000034  642c2564
000038  2c25640d
00003c  0a00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i._ZN3_LM6DecodeEPc||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  _ZN3_LM6DecodeEPc PROC ; _LM::Decode(char*)
;;;330    *******************************************************************************/
;;;331    int		_LM::Decode(char *c) {
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
000004  f5ad7d19          SUB      sp,sp,#0x264
000008  4682              MOV      r10,r0
;;;332    			if(*c)
00000a  989a              LDR      r0,[sp,#0x268]
00000c  7800              LDRB     r0,[r0,#0]
00000e  2800              CMP      r0,#0
000010  d07b              BEQ      |L9.266|
;;;333    				switch(*c) {
000012  989a              LDR      r0,[sp,#0x268]
000014  7800              LDRB     r0,[r0,#0]
000016  283f              CMP      r0,#0x3f
000018  d019              BEQ      |L9.78|
00001a  dc0c              BGT      |L9.54|
00001c  282b              CMP      r0,#0x2b
00001e  d021              BEQ      |L9.100|
000020  dc04              BGT      |L9.44|
000022  2821              CMP      r0,#0x21
000024  d072              BEQ      |L9.268|
000026  2823              CMP      r0,#0x23
                  |L9.40|
000028  d171              BNE      |L9.270|
00002a  e059              B        |L9.224|
                  |L9.44|
00002c  282d              CMP      r0,#0x2d
00002e  d021              BEQ      |L9.116|
000030  282e              CMP      r0,#0x2e
000032  d1f9              BNE      |L9.40|
000034  e042              B        |L9.188|
                  |L9.54|
000036  284c              CMP      r0,#0x4c
000038  d024              BEQ      |L9.132|
00003a  2857              CMP      r0,#0x57
00003c  d030              BEQ      |L9.160|
00003e  285f              CMP      r0,#0x5f
000040  d045              BEQ      |L9.206|
000042  2876              CMP      r0,#0x76
000044  d1f0              BNE      |L9.40|
;;;334    					case 'v':
;;;335    						PrintVersion(SW_version);
000046  200a              MOVS     r0,#0xa
000048  f7fffffe          BL       PrintVersion
;;;336    						break;
00004c  e172              B        |L9.820|
                  |L9.78|
;;;337    					case '?':
;;;338    						return WhatDecode(++c);
00004e  989a              LDR      r0,[sp,#0x268]
000050  1c40              ADDS     r0,r0,#1
000052  4601              MOV      r1,r0
000054  909a              STR      r0,[sp,#0x268]
000056  4650              MOV      r0,r10
000058  f7fffffe          BL       _ZN3_LM10WhatDecodeEPc ; _LM::WhatDecode(char*)
                  |L9.92|
;;;339    					case '+':
;;;340    						return PlusDecode(++c);
;;;341    					case '-':
;;;342    						return MinusDecode(++c);
;;;343    					case 'L':
;;;344    						printf(" %08X",*(int *)strtoul(++c,NULL,0));
;;;345    						break;
;;;346    					case 'W':
;;;347    						printf(" %04X",*(int *)strtoul(++c,NULL,0));
;;;348    						break;
;;;349    					case '.':
;;;350    						can.Send(++c);
;;;351    						break;
;;;352    					case '_':
;;;353    						can.Recv(++c);
;;;354    						break;
;;;355    					case '#':	
;;;356    					{
;;;357    #define _PI 3.14159265359
;;;358    						int dacoff=strtoul(++c,&c,0);
;;;359    						int dacgain=strtoul(++c,&c,0);
;;;360    						for(int i=0; i<sizeof(DacBuff)/sizeof(short); ++i)
;;;361    							DacBuff[i]=dacoff + (double)dacgain*sin(2.0*_PI*(double)i/(sizeof(DacBuff)/sizeof(short)));	
;;;362    						break;
;;;363    					}
;;;364    					case '!': {
;;;365    						FIL 									f;
;;;366    						WAVE_FormatTypeDef		w;
;;;367    						short									nbytes, sample;
;;;368    						char									flag=0;
;;;369    						
;;;370    #ifdef	USE_LCD
;;;371    int					to=0;
;;;372    //int					pref=0,
;;;373    //						peak=0;
;;;374    #endif
;;;375    						plot.Clear();
;;;376    						plot.Add(&plotA,0,5, LCD_COLOR_GREEN);
;;;377    						plot.Add(&plotB,0,10, LCD_COLOR_CYAN);
;;;378    //					plot.Add(&plotC,0,1, LCD_COLOR_YELLOW);
;;;379    
;;;380    						if(f_open(&f,"0:/3.wav",FA_READ) == FR_OK) {
;;;381    							if(f_read (&f, &w, sizeof(w), (UINT *)&nbytes)==FR_OK) {
;;;382    								while(!f_eof(&f)) {
;;;383    									_wait(3,_thread_loop);
;;;384    									if(!flag) {
;;;385    										f_read (&f, &sample, sizeof(sample),(UINT *)&nbytes);
;;;386    										plotA=sample-6767;
;;;387    										plotB=pyro.addSample(plotA);
;;;388    
;;;389    //										if(peak==0) {															// falling..
;;;390    //											if(plotB < pref) {
;;;391    //												if(plotB < pref-50) {
;;;392    //													peak=pref;
;;;393    //													plotC=0;
;;;394    //													printf("%d,%d\r\n",to,peak);
;;;395    //												}
;;;396    //											}
;;;397    //											else
;;;398    //												pref=plotB;
;;;399    //										} else {																	// rising...
;;;400    //											if(plotB > pref) {
;;;401    //												if(plotB > pref + 50)
;;;402    //													if(peak > 5) {
;;;403    //														peak=0;
;;;404    //														plotC=50;
;;;405    //													}
;;;406    //											}
;;;407    //											else {
;;;408    //												pref=plotB;
;;;409    //											}
;;;410    //										}	
;;;411    
;;;412    #ifdef	USE_LCD
;;;413    										to=(f_tell(&f)-sizeof(w))*3/2;
;;;414    										if(plot.Refresh()) {
;;;415    char									str[16];
;;;416    											lcd.Grid();
;;;417    											sprintf(str,"%d",to/1000);
;;;418    											LCD_SetFont(&Font8x12);
;;;419    											sFONT *fnt = LCD_GetFont();
;;;420    											LCD_SetTextColor(LCD_COLOR_GREY);
;;;421    											LCD_DisplayStringLine(1, (uint8_t *)str);
;;;422    										}
;;;423    #endif
;;;424    									}
;;;425    									switch(VT100.Escape()) {
;;;426    										case EOF:
;;;427    											break;
;;;428    										case ' ':
;;;429    											flag ^= 1;
;;;430    											break;
;;;431    										case 'l':
;;;432    											f_lseek(&f, f_tell(&f) - 320);
;;;433    											break;
;;;434    										case 'r':
;;;435    											f_lseek(&f, f_tell(&f) + 320);
;;;436    											break;
;;;437    										case 0x1b:
;;;438    											f_lseek (&f, f.fsize);
;;;439    											break;
;;;440    										case __F2:case __f2:
;;;441    											Select(PLOT_OFFSET);
;;;442    											break;
;;;443    										case __F3:case __f3:
;;;444    											Select(PLOT_SCALE);
;;;445    											break;
;;;446    										case __Up:
;;;447    											Increment(1, 0);
;;;448    											break;				
;;;449    										case __Down:
;;;450    											Increment(-1, 0);
;;;451    											break;	
;;;452    										case __Left:
;;;453    											Increment(0, -1);
;;;454    											break;				
;;;455    										case __Right:
;;;456    											Increment(0, 1);
;;;457    											break;	
;;;458    									}
;;;459    								}
;;;460    							f_close(&f);
;;;461    							}
;;;462    						} else
;;;463    							printf("\r\n file not found...\r\n:");
;;;464    }
;;;465    						break;
;;;466    
;;;467    					default:
;;;468    						*c=0;
;;;469    						return PARSE_SYNTAX;					
;;;470    				}
;;;471    			*c=0;
;;;472    			return PARSE_OK;
;;;473    }
00005c  f50d7d1b          ADD      sp,sp,#0x26c
000060  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.100|
000064  989a              LDR      r0,[sp,#0x268]        ;340
000066  1c40              ADDS     r0,r0,#1              ;340
000068  4601              MOV      r1,r0                 ;340
00006a  909a              STR      r0,[sp,#0x268]        ;340
00006c  4650              MOV      r0,r10                ;340
00006e  f7fffffe          BL       _ZN3_LM10PlusDecodeEPc ; _LM::PlusDecode(char*)
000072  e7f3              B        |L9.92|
                  |L9.116|
000074  989a              LDR      r0,[sp,#0x268]        ;342
000076  1c40              ADDS     r0,r0,#1              ;342
000078  4601              MOV      r1,r0                 ;342
00007a  909a              STR      r0,[sp,#0x268]        ;342
00007c  4650              MOV      r0,r10                ;342
00007e  f7fffffe          BL       _ZN3_LM11MinusDecodeEPc ; _LM::MinusDecode(char*)
000082  e7eb              B        |L9.92|
                  |L9.132|
000084  999a              LDR      r1,[sp,#0x268]        ;344
000086  1c49              ADDS     r1,r1,#1              ;344
000088  4608              MOV      r0,r1                 ;344
00008a  2200              MOVS     r2,#0                 ;344
00008c  919a              STR      r1,[sp,#0x268]        ;344
00008e  4611              MOV      r1,r2                 ;344
000090  f7fffffe          BL       strtoul
000094  6804              LDR      r4,[r0,#0]            ;344
000096  4621              MOV      r1,r4                 ;344
000098  a0a9              ADR      r0,|L9.832|
00009a  f7fffffe          BL       __2printf
00009e  e149              B        |L9.820|
                  |L9.160|
0000a0  999a              LDR      r1,[sp,#0x268]        ;347
0000a2  1c49              ADDS     r1,r1,#1              ;347
0000a4  4608              MOV      r0,r1                 ;347
0000a6  2200              MOVS     r2,#0                 ;347
0000a8  919a              STR      r1,[sp,#0x268]        ;347
0000aa  4611              MOV      r1,r2                 ;347
0000ac  f7fffffe          BL       strtoul
0000b0  6804              LDR      r4,[r0,#0]            ;347
0000b2  4621              MOV      r1,r4                 ;347
0000b4  a0a4              ADR      r0,|L9.840|
0000b6  f7fffffe          BL       __2printf
0000ba  e13b              B        |L9.820|
                  |L9.188|
0000bc  989a              LDR      r0,[sp,#0x268]        ;350
0000be  1c40              ADDS     r0,r0,#1              ;350
0000c0  4601              MOV      r1,r0                 ;350
0000c2  909a              STR      r0,[sp,#0x268]        ;350
0000c4  f50a708e          ADD      r0,r10,#0x11c         ;350
0000c8  f7fffffe          BL       _ZN4_CAN4SendEPc ; _CAN::Send(char*)
0000cc  e132              B        |L9.820|
                  |L9.206|
0000ce  989a              LDR      r0,[sp,#0x268]        ;353
0000d0  1c40              ADDS     r0,r0,#1              ;353
0000d2  4601              MOV      r1,r0                 ;353
0000d4  909a              STR      r0,[sp,#0x268]        ;353
0000d6  f50a708e          ADD      r0,r10,#0x11c         ;353
0000da  f7fffffe          BL       _ZN4_CAN4RecvEPc ; _CAN::Recv(char*)
0000de  e129              B        |L9.820|
                  |L9.224|
0000e0  999a              LDR      r1,[sp,#0x268]        ;358
0000e2  1c49              ADDS     r1,r1,#1              ;358
0000e4  4608              MOV      r0,r1                 ;358
0000e6  2200              MOVS     r2,#0                 ;358
0000e8  919a              STR      r1,[sp,#0x268]        ;358
0000ea  a99a              ADD      r1,sp,#0x268          ;358
0000ec  f7fffffe          BL       strtoul
0000f0  9098              STR      r0,[sp,#0x260]        ;358
0000f2  999a              LDR      r1,[sp,#0x268]        ;359
0000f4  1c49              ADDS     r1,r1,#1              ;359
0000f6  4608              MOV      r0,r1                 ;359
0000f8  2200              MOVS     r2,#0                 ;359
0000fa  919a              STR      r1,[sp,#0x268]        ;359
0000fc  a99a              ADD      r1,sp,#0x268          ;359
0000fe  f7fffffe          BL       strtoul
000102  9097              STR      r0,[sp,#0x25c]        ;359
000104  f04f0b00          MOV      r11,#0                ;360
000108  e031              B        |L9.366|
                  |L9.266|
00010a  e114              B        |L9.822|
                  |L9.268|
00010c  e033              B        |L9.374|
                  |L9.270|
00010e  e10c              B        |L9.810|
                  |L9.272|
000110  4658              MOV      r0,r11                ;361
000112  f7fffffe          BL       __aeabi_i2d
000116  4606              MOV      r6,r0                 ;361
000118  4a8d              LDR      r2,|L9.848|
00011a  4b8e              LDR      r3,|L9.852|
00011c  f7fffffe          BL       __aeabi_dmul
000120  2200              MOVS     r2,#0                 ;361
000122  4b8d              LDR      r3,|L9.856|
000124  918d              STR      r1,[sp,#0x234]        ;361
000126  908c              STR      r0,[sp,#0x230]        ;361
000128  f7fffffe          BL       __aeabi_ddiv
00012c  4604              MOV      r4,r0                 ;361
00012e  f7fffffe          BL       ||sin||
000132  918f              STR      r1,[sp,#0x23c]        ;361
000134  908e              STR      r0,[sp,#0x238]        ;361
000136  9897              LDR      r0,[sp,#0x25c]        ;361
000138  f7fffffe          BL       __aeabi_i2d
00013c  4680              MOV      r8,r0                 ;361
00013e  9b8f              LDR      r3,[sp,#0x23c]        ;361
000140  9a8e              LDR      r2,[sp,#0x238]        ;361
000142  f7fffffe          BL       __aeabi_dmul
000146  9193              STR      r1,[sp,#0x24c]        ;361
000148  9092              STR      r0,[sp,#0x248]        ;361
00014a  9898              LDR      r0,[sp,#0x260]        ;361
00014c  f7fffffe          BL       __aeabi_i2d
000150  9191              STR      r1,[sp,#0x244]        ;361
000152  9090              STR      r0,[sp,#0x240]        ;361
000154  9b93              LDR      r3,[sp,#0x24c]        ;361
000156  9a92              LDR      r2,[sp,#0x248]        ;361
000158  f7fffffe          BL       __aeabi_dadd
00015c  9195              STR      r1,[sp,#0x254]        ;361
00015e  9094              STR      r0,[sp,#0x250]        ;361
000160  f7fffffe          BL       __aeabi_d2uiz
000164  497d              LDR      r1,|L9.860|
000166  f821001b          STRH     r0,[r1,r11,LSL #1]    ;361
00016a  f10b0b01          ADD      r11,r11,#1            ;360
                  |L9.366|
00016e  f1bb0f64          CMP      r11,#0x64             ;360
000172  d3cd              BCC      |L9.272|
000174  e0de              B        |L9.820|
                  |L9.374|
000176  2400              MOVS     r4,#0                 ;368
000178  f10a00b8          ADD      r0,r10,#0xb8          ;375
00017c  f7fffffe          BL       _ZN5_PLOTIdE5ClearEv ; _PLOT<double>::Clear()
000180  f44f60fc          MOV      r0,#0x7e0             ;376
000184  2100              MOVS     r1,#0                 ;376
000186  9002              STR      r0,[sp,#8]            ;376
000188  4875              LDR      r0,|L9.864|
00018a  460a              MOV      r2,r1                 ;376
00018c  460b              MOV      r3,r1                 ;376
00018e  e9cd1000          STRD     r1,r0,[sp,#0]         ;376
000192  f10a01a0          ADD      r1,r10,#0xa0          ;376
000196  f10a00b8          ADD      r0,r10,#0xb8          ;376
00019a  f7fffffe          BL       _ZN5_PLOTIdE3AddEPddds ; _PLOT<double>::Add(double*, double, double, short)
00019e  f64770ff          MOV      r0,#0x7fff            ;377
0001a2  9002              STR      r0,[sp,#8]            ;377
0001a4  2000              MOVS     r0,#0                 ;377
0001a6  496f              LDR      r1,|L9.868|
0001a8  4602              MOV      r2,r0                 ;377
0001aa  4603              MOV      r3,r0                 ;377
0001ac  e9cd0100          STRD     r0,r1,[sp,#0]         ;377
0001b0  f10a01a8          ADD      r1,r10,#0xa8          ;377
0001b4  f10a00b8          ADD      r0,r10,#0xb8          ;377
0001b8  f7fffffe          BL       _ZN5_PLOTIdE3AddEPddds ; _PLOT<double>::Add(double*, double, double, short)
0001bc  2201              MOVS     r2,#1                 ;380
0001be  a16a              ADR      r1,|L9.872|
0001c0  a810              ADD      r0,sp,#0x40           ;380
0001c2  f7fffffe          BL       f_open
0001c6  2800              CMP      r0,#0                 ;380
0001c8  d16f              BNE      |L9.682|
0001ca  ab04              ADD      r3,sp,#0x10           ;381
0001cc  222c              MOVS     r2,#0x2c              ;381
0001ce  a905              ADD      r1,sp,#0x14           ;381
0001d0  a810              ADD      r0,sp,#0x40           ;381
0001d2  f7fffffe          BL       f_read
0001d6  2800              CMP      r0,#0                 ;381
0001d8  d168              BNE      |L9.684|
0001da  e094              B        |L9.774|
                  |L9.476|
0001dc  4965              LDR      r1,|L9.884|
0001de  4479              ADD      r1,r1,pc              ;383
0001e0  2003              MOVS     r0,#3                 ;383
0001e2  f7fffffe          BL       _wait
0001e6  b9f4              CBNZ     r4,|L9.550|
0001e8  ab04              ADD      r3,sp,#0x10           ;385
0001ea  2202              MOVS     r2,#2                 ;385
0001ec  a903              ADD      r1,sp,#0xc            ;385
0001ee  a810              ADD      r0,sp,#0x40           ;385
0001f0  f7fffffe          BL       f_read
0001f4  f9bd100c          LDRSH    r1,[sp,#0xc]          ;386
0001f8  f5a150d0          SUB      r0,r1,#0x1a00         ;386
0001fc  386f              SUBS     r0,r0,#0x6f           ;386
0001fe  f7fffffe          BL       __aeabi_i2d
000202  e9ca0128          STRD     r0,r1,[r10,#0xa0]     ;386
000206  e9da2128          LDRD     r2,r1,[r10,#0xa0]     ;387
00020a  4610              MOV      r0,r2                 ;387
00020c  f7fffffe          BL       __aeabi_d2iz
000210  4606              MOV      r6,r0                 ;387
000212  4631              MOV      r1,r6                 ;387
000214  f50a7094          ADD      r0,r10,#0x128         ;387
000218  f7fffffe          BL       _ZN5_PYRO9addSampleEi ; _PYRO::addSample(int)
00021c  4605              MOV      r5,r0                 ;387
00021e  f7fffffe          BL       __aeabi_i2d
000222  e9ca012a          STRD     r0,r1,[r10,#0xa8]     ;387
                  |L9.550|
000226  f10a0008          ADD      r0,r10,#8             ;425
00022a  f7fffffe          BL       _ZN5_TERM6EscapeEv ; _TERM::Escape()
00022e  4601              MOV      r1,r0                 ;425
000230  4a51              LDR      r2,|L9.888|
000232  1a80              SUBS     r0,r0,r2              ;425
000234  4291              CMP      r1,r2                 ;425
000236  d046              BEQ      |L9.710|
000238  dc10              BGT      |L9.604|
00023a  296c              CMP      r1,#0x6c              ;425
00023c  d027              BEQ      |L9.654|
00023e  dc07              BGT      |L9.592|
000240  f1b13fff          CMP      r1,#0xffffffff        ;425
000244  d01f              BEQ      |L9.646|
000246  291b              CMP      r1,#0x1b              ;425
000248  d031              BEQ      |L9.686|
00024a  2920              CMP      r1,#0x20              ;425
00024c  d15a              BNE      |L9.772|
00024e  e01b              B        |L9.648|
                  |L9.592|
000250  2972              CMP      r1,#0x72              ;425
000252  d023              BEQ      |L9.668|
000254  4849              LDR      r0,|L9.892|
000256  4408              ADD      r0,r0,r1              ;425
000258  b9f8              CBNZ     r0,|L9.666|
00025a  e02e              B        |L9.698|
                  |L9.604|
00025c  f64032f2          MOV      r2,#0xbf2             ;425
000260  1a81              SUBS     r1,r0,r2              ;425
000262  4290              CMP      r0,r2                 ;425
000264  d041              BEQ      |L9.746|
000266  dc07              BGT      |L9.632|
000268  f6a030ef          SUB      r0,r0,#0xbef          ;425
00026c  b380              CBZ      r0,|L9.720|
00026e  2801              CMP      r0,#1                 ;425
000270  d035              BEQ      |L9.734|
000272  2802              CMP      r0,#2                 ;425
000274  d146              BNE      |L9.772|
000276  e03f              B        |L9.760|
                  |L9.632|
000278  4841              LDR      r0,|L9.896|
00027a  4408              ADD      r0,r0,r1              ;425
00027c  b1e0              CBZ      r0,|L9.696|
00027e  f5b07f80          CMP      r0,#0x100             ;425
000282  d13f              BNE      |L9.772|
000284  e01e              B        |L9.708|
                  |L9.646|
000286  e03d              B        |L9.772|
                  |L9.648|
000288  f0840401          EOR      r4,r4,#1              ;429
00028c  e03a              B        |L9.772|
                  |L9.654|
00028e  9812              LDR      r0,[sp,#0x48]         ;432
000290  f5a071a0          SUB      r1,r0,#0x140          ;432
000294  a810              ADD      r0,sp,#0x40           ;432
000296  f7fffffe          BL       f_lseek
                  |L9.666|
00029a  e033              B        |L9.772|
                  |L9.668|
00029c  9812              LDR      r0,[sp,#0x48]         ;435
00029e  f50071a0          ADD      r1,r0,#0x140          ;435
0002a2  a810              ADD      r0,sp,#0x40           ;435
0002a4  f7fffffe          BL       f_lseek
0002a8  e02c              B        |L9.772|
                  |L9.682|
0002aa  e03a              B        |L9.802|
                  |L9.684|
0002ac  e03c              B        |L9.808|
                  |L9.686|
0002ae  a810              ADD      r0,sp,#0x40           ;438
0002b0  9913              LDR      r1,[sp,#0x4c]         ;438
0002b2  f7fffffe          BL       f_lseek
0002b6  e025              B        |L9.772|
                  |L9.696|
0002b8  bf00              NOP                            ;440
                  |L9.698|
0002ba  2101              MOVS     r1,#1                 ;441
0002bc  4650              MOV      r0,r10                ;441
0002be  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
0002c2  e01f              B        |L9.772|
                  |L9.708|
0002c4  bf00              NOP                            ;443
                  |L9.710|
0002c6  2102              MOVS     r1,#2                 ;444
0002c8  4650              MOV      r0,r10                ;444
0002ca  f7fffffe          BL       _ZN3_LM6SelectE12__SELECTED__ ; _LM::Select(__SELECTED__)
0002ce  e019              B        |L9.772|
                  |L9.720|
0002d0  e7ff              B        |L9.722|
                  |L9.722|
0002d2  2200              MOVS     r2,#0                 ;447
0002d4  2101              MOVS     r1,#1                 ;447
0002d6  4650              MOV      r0,r10                ;447
0002d8  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
0002dc  e012              B        |L9.772|
                  |L9.734|
0002de  2200              MOVS     r2,#0                 ;450
0002e0  1e51              SUBS     r1,r2,#1              ;450
0002e2  4650              MOV      r0,r10                ;450
0002e4  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
0002e8  e00c              B        |L9.772|
                  |L9.746|
0002ea  f04f32ff          MOV      r2,#0xffffffff        ;453
0002ee  2100              MOVS     r1,#0                 ;453
0002f0  4650              MOV      r0,r10                ;453
0002f2  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
0002f6  e005              B        |L9.772|
                  |L9.760|
0002f8  2201              MOVS     r2,#1                 ;456
0002fa  2100              MOVS     r1,#0                 ;456
0002fc  4650              MOV      r0,r10                ;456
0002fe  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
000302  bf00              NOP                            ;457
                  |L9.772|
000304  bf00              NOP                            ;427
                  |L9.774|
000306  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;382
00030a  4288              CMP      r0,r1                 ;382
00030c  d101              BNE      |L9.786|
00030e  2001              MOVS     r0,#1                 ;382
000310  e000              B        |L9.788|
                  |L9.786|
000312  2000              MOVS     r0,#0                 ;382
                  |L9.788|
000314  2800              CMP      r0,#0                 ;382
000316  f43faf61          BEQ      |L9.476|
00031a  a810              ADD      r0,sp,#0x40           ;460
00031c  f7fffffe          BL       f_close
000320  e002              B        |L9.808|
                  |L9.802|
000322  a018              ADR      r0,|L9.900|
000324  f7fffffe          BL       __2printf
                  |L9.808|
000328  e004              B        |L9.820|
                  |L9.810|
00032a  2000              MOVS     r0,#0                 ;468
00032c  999a              LDR      r1,[sp,#0x268]        ;468
00032e  7008              STRB     r0,[r1,#0]            ;468
000330  2001              MOVS     r0,#1                 ;469
000332  e693              B        |L9.92|
                  |L9.820|
000334  bf00              NOP                            ;336
                  |L9.822|
000336  2000              MOVS     r0,#0                 ;471
000338  999a              LDR      r1,[sp,#0x268]        ;471
00033a  7008              STRB     r0,[r1,#0]            ;471
00033c  bf00              NOP                            ;472
00033e  e68d              B        |L9.92|
;;;474    /*******************************************************************************
                          ENDP

                  |L9.832|
000340  20253038          DCB      " %08X",0
000344  5800    
000346  00                DCB      0
000347  00                DCB      0
                  |L9.840|
000348  20253034          DCB      " %04X",0
00034c  5800    
00034e  00                DCB      0
00034f  00                DCB      0
                  |L9.848|
                          DCD      0x54442eea
                  |L9.852|
                          DCD      0x401921fb
                  |L9.856|
                          DCD      0x40590000
                  |L9.860|
                          DCD      DacBuff
                  |L9.864|
                          DCD      0x40140000
                  |L9.868|
                          DCD      0x40240000
                  |L9.872|
000368  303a2f33          DCB      "0:/3.wav",0
00036c  2e776176
000370  00      
000371  00                DCB      0
000372  00                DCB      0
000373  00                DCB      0
                  |L9.884|
                          DCD      _thread_loop+0x192 - {PC}
                  |L9.888|
                          DCD      0x001b4f52
                  |L9.892|
                          DCD      0xffe4b0af
                  |L9.896|
                          DCD      0xa4ea28c6
                  |L9.900|
000384  0d0a2066          DCB      "\r\n file not found...\r\n:",0
000388  696c6520
00038c  6e6f7420
000390  666f756e
000394  642e2e2e
000398  0d0a3a00

                          AREA ||i._ZN3_LM6SelectE12__SELECTED__||, CODE, READONLY, ALIGN=2

                  _ZN3_LM6SelectE12__SELECTED__ PROC ; _LM::Select(__SELECTED__)
;;;142    *******************************************************************************/
;;;143    void	_LM::Select(__SELECTED__ i) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;144    			if(i != item)
000006  7820              LDRB     r0,[r4,#0]
000008  42a8              CMP      r0,r5
00000a  d002              BEQ      |L10.18|
;;;145    				printf("\r\n");
00000c  a003              ADR      r0,|L10.28|
00000e  f7fffffe          BL       __2printf
                  |L10.18|
;;;146    			item = i;
000012  7025              STRB     r5,[r4,#0]
;;;147    			Refresh();
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN3_LM7RefreshEv ; _LM::Refresh()
;;;148    }
00001a  bd70              POP      {r4-r6,pc}
;;;149    /*******************************************************************************
                          ENDP

                  |L10.28|
00001c  0d0a00            DCB      "\r\n",0
00001f  00                DCB      0

                          AREA ||i._ZN3_LM7DisplayEPv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_truncate_unsigned
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_u
                          REQUIRE _printf_f
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_fp_dec
                  _ZN3_LM7DisplayEPv PROC ; _LM::Display(void*)
;;;687    *******************************************************************************/
;;;688    void	_LM::Display(void *v) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4681              MOV      r9,r0
;;;689    _LM 	*self = static_cast<_LM *>(v);	
000008  464c              MOV      r4,r9
;;;690    _io*	temp=_stdio(self->io);
00000a  6860              LDR      r0,[r4,#4]
00000c  f7fffffe          BL       _stdio
000010  4683              MOV      r11,r0
;;;691    			while(_buffer_len(self->pyro.buffer) > 3*sizeof(short)) {
000012  e07b              B        |L11.268|
                  |L11.20|
;;;692    				short 	ta,tp,t;
;;;693    //______ buffer pull from ISR __________________________________________________					
;;;694    				_buffer_pull(self->pyro.buffer,&t,sizeof(short));							
000014  2202              MOVS     r2,#2
000016  a904              ADD      r1,sp,#0x10
000018  f8d40428          LDR      r0,[r4,#0x428]
00001c  f7fffffe          BL       _buffer_pull
;;;695    				_buffer_pull(self->pyro.buffer,&ta,sizeof(short));
000020  2202              MOVS     r2,#2
000022  a906              ADD      r1,sp,#0x18
000024  f8d40428          LDR      r0,[r4,#0x428]
000028  f7fffffe          BL       _buffer_pull
;;;696    				_buffer_pull(self->pyro.buffer,&tp,sizeof(short));
00002c  2202              MOVS     r2,#2
00002e  a905              ADD      r1,sp,#0x14
000030  f8d40428          LDR      r0,[r4,#0x428]
000034  f7fffffe          BL       _buffer_pull
;;;697    //______ filter ________________________________________________________________			
;;;698    				self->plotA=ta;
000038  f9bd0018          LDRSH    r0,[sp,#0x18]
00003c  f7fffffe          BL       __aeabi_i2d
000040  e9c40128          STRD     r0,r1,[r4,#0xa0]
;;;699    				self->plotB=self->pyro.addSample(ta+tp);
000044  f9bd0018          LDRSH    r0,[sp,#0x18]
000048  f9bd2014          LDRSH    r2,[sp,#0x14]
00004c  1881              ADDS     r1,r0,r2
00004e  f5047094          ADD      r0,r4,#0x128
000052  f7fffffe          BL       _ZN5_PYRO9addSampleEi ; _PYRO::addSample(int)
000056  4605              MOV      r5,r0
000058  f7fffffe          BL       __aeabi_i2d
00005c  e9c4012a          STRD     r0,r1,[r4,#0xa8]
;;;700    //______ print at F1____________________________________________________________							
;;;701    				if(self->pyro.enabled && self->item == PYRO) {
000060  f8940430          LDRB     r0,[r4,#0x430]
000064  2800              CMP      r0,#0
000066  d033              BEQ      |L11.208|
000068  7820              LDRB     r0,[r4,#0]
00006a  bb88              CBNZ     r0,|L11.208|
;;;702    //					printf("%4d,%5d,%3.1lf,%hu,%u",ta,(int)tp+0x8000,(double)_ADC::Instance()->Th2o/100,t,self->pyro.sync);
;;;703    					printf("%4d,%5d,%3.1lf,%hu",ta,(int)tp+0x8000,(double)_ADC::Instance()->Th2o/100,t);
00006c  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000070  f8d0a05c          LDR      r10,[r0,#0x5c]
000074  4650              MOV      r0,r10
000076  f7fffffe          BL       __aeabi_i2d
00007a  4607              MOV      r7,r0
00007c  2200              MOVS     r2,#0
00007e  4b28              LDR      r3,|L11.288|
000080  f7fffffe          BL       __aeabi_ddiv
000084  4605              MOV      r5,r0
000086  f9bd0010          LDRSH    r0,[sp,#0x10]
00008a  e9cd5100          STRD     r5,r1,[sp,#0]
00008e  9002              STR      r0,[sp,#8]
000090  f9bd2014          LDRSH    r2,[sp,#0x14]
000094  f5024200          ADD      r2,r2,#0x8000
000098  f9bd1018          LDRSH    r1,[sp,#0x18]
00009c  a021              ADR      r0,|L11.292|
00009e  f7fffffe          BL       __2printf
;;;704    					if(self->ec20.E) {
0000a2  f44f6094          MOV      r0,#0x4a0
0000a6  5900              LDR      r0,[r0,r4]
0000a8  b150              CBZ      r0,|L11.192|
;;;705    						//printf(".");								
;;;706    						if(__time__ > self->timeout) {
0000aa  4923              LDR      r1,|L11.312|
0000ac  f8d4009c          LDR      r0,[r4,#0x9c]
0000b0  6809              LDR      r1,[r1,#0]  ; __time__
0000b2  4288              CMP      r0,r1
0000b4  da09              BGE      |L11.202|
;;;707    							//printf(".");				
;;;708    							self->ec20.E=0;
0000b6  2100              MOVS     r1,#0
0000b8  f44f6094          MOV      r0,#0x4a0
0000bc  5101              STR      r1,[r0,r4]
0000be  e004              B        |L11.202|
                  |L11.192|
;;;709    						}
;;;710    					}	else 
;;;711    						self->timeout = __time__ + 180;
0000c0  481d              LDR      r0,|L11.312|
0000c2  6800              LDR      r0,[r0,#0]  ; __time__
0000c4  30b4              ADDS     r0,r0,#0xb4
0000c6  f8c4009c          STR      r0,[r4,#0x9c]
                  |L11.202|
;;;712    					printf("\r\n");					
0000ca  a01c              ADR      r0,|L11.316|
0000cc  f7fffffe          BL       __2printf
                  |L11.208|
;;;713    				}
;;;714    //______ print at F8 ___________________________________________________________							
;;;715    				if(self->pyro.enabled && self->item == EC20) {
0000d0  f8940430          LDRB     r0,[r4,#0x430]
0000d4  b1c8              CBZ      r0,|L11.266|
0000d6  7820              LDRB     r0,[r4,#0]
0000d8  2806              CMP      r0,#6
0000da  d116              BNE      |L11.266|
;;;716    					if(self->ec20.E) {							
0000dc  f44f6094          MOV      r0,#0x4a0
0000e0  5900              LDR      r0,[r0,r4]
0000e2  b168              CBZ      r0,|L11.256|
;;;717    						if(__time__ > self->timeout) {
0000e4  4914              LDR      r1,|L11.312|
0000e6  f8d4009c          LDR      r0,[r4,#0x9c]
0000ea  6809              LDR      r1,[r1,#0]  ; __time__
0000ec  4288              CMP      r0,r1
0000ee  da0c              BGE      |L11.266|
;;;718    							self->Refresh();
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       _ZN3_LM7RefreshEv ; _LM::Refresh()
;;;719    							self->ec20.E=0;
0000f6  2100              MOVS     r1,#0
0000f8  f44f6094          MOV      r0,#0x4a0
0000fc  5101              STR      r1,[r0,r4]
0000fe  e004              B        |L11.266|
                  |L11.256|
;;;720    						}
;;;721    					}	else 
;;;722    						self->timeout = __time__ + 180;	
000100  480d              LDR      r0,|L11.312|
000102  6800              LDR      r0,[r0,#0]  ; __time__
000104  30b4              ADDS     r0,r0,#0xb4
000106  f8c4009c          STR      r0,[r4,#0x9c]
                  |L11.266|
;;;723    				}
;;;724    //______________________________________________________________________________							
;;;725    #ifdef	USE_LCD
;;;726    				if(self->plot.Refresh())
;;;727    					self->lcd.Grid();				
;;;728    #endif
;;;729    			}
00010a  bf00              NOP      
                  |L11.268|
00010c  f8d40428          LDR      r0,[r4,#0x428]        ;691
000110  f7fffffe          BL       _buffer_len
000114  2806              CMP      r0,#6                 ;691
000116  f63faf7d          BHI      |L11.20|
;;;730    }
00011a  b007              ADD      sp,sp,#0x1c
00011c  e8bd8ff0          POP      {r4-r11,pc}
;;;731    //Q1   +f 0.00229515,0.00459030,0.00229515,1.89738149,-0.90656211
                          ENDP

                  |L11.288|
                          DCD      0x40590000
                  |L11.292|
000124  2534642c          DCB      "%4d,%5d,%3.1lf,%hu",0
000128  2535642c
00012c  25332e31
000130  6c662c25
000134  687500  
000137  00                DCB      0
                  |L11.312|
                          DCD      __time__
                  |L11.316|
00013c  0d0a00            DCB      "\r\n",0
00013f  00                DCB      0

                          AREA ||i._ZN3_LM9IncrementEii||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _ZN3_LM9IncrementEii PROC ; _LM::Increment(int, int)
;;;1      #ifndef					LM_H
;;;156    void	_LM::Increment(int i, int j) {
000000  e92d43fe          PUSH     {r1-r9,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;157    _ADCDMA	*offset	=&_ADC::Instance()->offset;
00000a  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
00000e  f1000530          ADD      r5,r0,#0x30
;;;158    _ADCDMA	*gain		=&_ADC::Instance()->gain;
000012  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000016  f1000644          ADD      r6,r0,#0x44
;;;159    _ADCDMA	*adf		=&_ADC::Instance()->adf;
00001a  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
00001e  f100091c          ADD      r9,r0,#0x1c
;;;160    			switch(item) {
000022  7820              LDRB     r0,[r4,#0]
000024  280b              CMP      r0,#0xb
000026  d20d              BCS      |L12.68|
000028  e8dff000          TBB      [pc,r0]
00002c  23a8af06          DCB      0x23,0xa8,0xaf,0x06
000030  0d141b6c          DCB      0x0d,0x14,0x1b,0x6c
000034  7b8a9900          DCB      0x7b,0x8a,0x99,0x00
;;;161    				case PUMP:
;;;162    					pump.Increment(i,j);
000038  4642              MOV      r2,r8
00003a  4639              MOV      r1,r7
00003c  f5046087          ADD      r0,r4,#0x438
000040  f7fffffe          BL       _ZN5_PUMP9IncrementEii ; _PUMP::Increment(int, int)
                  |L12.68|
;;;163    					break;
000044  e0a8              B        |L12.408|
;;;164    				case FAN:
;;;165    					fan.Increment(i,j);
000046  4642              MOV      r2,r8
000048  4639              MOV      r1,r7
00004a  f204405c          ADD      r0,r4,#0x45c
00004e  f7fffffe          BL       _ZN4_FAN9IncrementEii ; _FAN::Increment(int, int)
;;;166    					break;
000052  e0a1              B        |L12.408|
;;;167    				case SPRAY:
;;;168    					spray.Increment(i,j);
000054  4642              MOV      r2,r8
000056  4639              MOV      r1,r7
000058  f10400cc          ADD      r0,r4,#0xcc
00005c  f7fffffe          BL       _ZN6_SPRAY9IncrementEii ; _SPRAY::Increment(int, int)
;;;169    					break;
000060  e09a              B        |L12.408|
;;;170    				case EC20:
;;;171    					ec20.Increment(i,j,this);
000062  4623              MOV      r3,r4
000064  4642              MOV      r2,r8
000066  4639              MOV      r1,r7
000068  f5046090          ADD      r0,r4,#0x480
00006c  f7fffffe          BL       _ZN5_EC209IncrementEiiPv ; _EC20::Increment(int, int, void*)
;;;172    					break;
000070  e092              B        |L12.408|
;;;173    				
;;;174    				case PYRO:
;;;175    					if(i || j || pyro.enabled) {
000072  b92f              CBNZ     r7,|L12.128|
000074  f1b80f00          CMP      r8,#0
000078  d102              BNE      |L12.128|
00007a  f8940430          LDRB     r0,[r4,#0x430]
00007e  b148              CBZ      r0,|L12.148|
                  |L12.128|
;;;176    						pyro.enabled=false;
000080  2100              MOVS     r1,#0
000082  f8841430          STRB     r1,[r4,#0x430]
;;;177    						pyro.Increment(i,j);
000086  4642              MOV      r2,r8
000088  4639              MOV      r1,r7
00008a  f5047094          ADD      r0,r4,#0x128
00008e  f7fffffe          BL       _ZN5_PYRO9IncrementEii ; _PYRO::Increment(int, int)
000092  e036              B        |L12.258|
                  |L12.148|
;;;178    					}	else {
;;;179    						pyro.enabled=true;
000094  2101              MOVS     r1,#1
000096  f8841430          STRB     r1,[r4,#0x430]
;;;180    						printf("\r\n");
00009a  a041              ADR      r0,|L12.416|
00009c  f7fffffe          BL       __2printf
;;;181    						plot.Clear();
0000a0  f10400b8          ADD      r0,r4,#0xb8
0000a4  f7fffffe          BL       _ZN5_PLOTIdE5ClearEv ; _PLOT<double>::Clear()
;;;182    						plot.Add(&plotA,0,1, LCD_COLOR_GREEN);
0000a8  f44f60fc          MOV      r0,#0x7e0
0000ac  9002              STR      r0,[sp,#8]
0000ae  2000              MOVS     r0,#0
0000b0  493c              LDR      r1,|L12.420|
0000b2  4602              MOV      r2,r0
0000b4  4603              MOV      r3,r0
0000b6  e9cd0100          STRD     r0,r1,[sp,#0]
0000ba  f10401a0          ADD      r1,r4,#0xa0
0000be  f10400b8          ADD      r0,r4,#0xb8
0000c2  f7fffffe          BL       _ZN5_PLOTIdE3AddEPddds ; _PLOT<double>::Add(double*, double, double, short)
;;;183    						plot.Add(&plotB,2813,10, LCD_COLOR_CYAN);
0000c6  f64770ff          MOV      r0,#0x7fff
0000ca  2100              MOVS     r1,#0
0000cc  9002              STR      r0,[sp,#8]
0000ce  4836              LDR      r0,|L12.424|
0000d0  460a              MOV      r2,r1
0000d2  4b36              LDR      r3,|L12.428|
0000d4  e9cd1000          STRD     r1,r0,[sp,#0]
0000d8  f10401a8          ADD      r1,r4,#0xa8
0000dc  f10400b8          ADD      r0,r4,#0xb8
0000e0  f7fffffe          BL       _ZN5_PLOTIdE3AddEPddds ; _PLOT<double>::Add(double*, double, double, short)
;;;184    						plot.Add(&plotC,0,1, LCD_COLOR_YELLOW);
0000e4  f06f001f          MVN      r0,#0x1f
0000e8  2100              MOVS     r1,#0
0000ea  9002              STR      r0,[sp,#8]
0000ec  482d              LDR      r0,|L12.420|
0000ee  460a              MOV      r2,r1
0000f0  460b              MOV      r3,r1
0000f2  e9cd1000          STRD     r1,r0,[sp,#0]
0000f6  f10401b0          ADD      r1,r4,#0xb0
0000fa  f10400b8          ADD      r0,r4,#0xb8
0000fe  f7fffffe          BL       _ZN5_PLOTIdE3AddEPddds ; _PLOT<double>::Add(double*, double, double, short)
                  |L12.258|
;;;185    					}
;;;186    					break;
000102  e049              B        |L12.408|
;;;187    			
;;;188    				case CTRL_A:
;;;189    					offset->cooler+=10*i;
000104  8968              LDRH     r0,[r5,#0xa]
000106  210a              MOVS     r1,#0xa
000108  fb010007          MLA      r0,r1,r7,r0
00010c  8168              STRH     r0,[r5,#0xa]
;;;190    					gain->cooler+=10*j;
00010e  8970              LDRH     r0,[r6,#0xa]
000110  fb010008          MLA      r0,r1,r8,r0
000114  8170              STRH     r0,[r6,#0xa]
;;;191    					printf("\r:cooler.....  %5d,%5d",offset->cooler,gain->cooler);
000116  8972              LDRH     r2,[r6,#0xa]
000118  8969              LDRH     r1,[r5,#0xa]
00011a  a025              ADR      r0,|L12.432|
00011c  f7fffffe          BL       __2printf
;;;192    					break;
000120  e03a              B        |L12.408|
;;;193    				case CTRL_B:
;;;194    					offset->bottle+=10*i;
000122  89a8              LDRH     r0,[r5,#0xc]
000124  210a              MOVS     r1,#0xa
000126  fb010007          MLA      r0,r1,r7,r0
00012a  81a8              STRH     r0,[r5,#0xc]
;;;195    					gain->bottle+=10*j;
00012c  89b0              LDRH     r0,[r6,#0xc]
00012e  fb010008          MLA      r0,r1,r8,r0
000132  81b0              STRH     r0,[r6,#0xc]
;;;196    					printf("\r:bottle.....  %5d,%5d",offset->bottle,gain->bottle);
000134  89b2              LDRH     r2,[r6,#0xc]
000136  89a9              LDRH     r1,[r5,#0xc]
000138  a023              ADR      r0,|L12.456|
00013a  f7fffffe          BL       __2printf
;;;197    					break;
00013e  e02b              B        |L12.408|
;;;198    				case CTRL_C:
;;;199    					offset->compressor+=10*i;
000140  89e8              LDRH     r0,[r5,#0xe]
000142  210a              MOVS     r1,#0xa
000144  fb010007          MLA      r0,r1,r7,r0
000148  81e8              STRH     r0,[r5,#0xe]
;;;200    					gain->compressor+=10*j;
00014a  89f0              LDRH     r0,[r6,#0xe]
00014c  fb010008          MLA      r0,r1,r8,r0
000150  81f0              STRH     r0,[r6,#0xe]
;;;201    				printf("\r:compressor...  %5d,%5d",offset->compressor,gain->compressor);
000152  89f2              LDRH     r2,[r6,#0xe]
000154  89e9              LDRH     r1,[r5,#0xe]
000156  a022              ADR      r0,|L12.480|
000158  f7fffffe          BL       __2printf
;;;202    					break;
00015c  e01c              B        |L12.408|
;;;203    				case CTRL_D:
;;;204    					offset->air+=10*i;
00015e  8a28              LDRH     r0,[r5,#0x10]
000160  210a              MOVS     r1,#0xa
000162  fb010007          MLA      r0,r1,r7,r0
000166  8228              STRH     r0,[r5,#0x10]
;;;205    					gain->air+=10*j;
000168  8a30              LDRH     r0,[r6,#0x10]
00016a  fb010008          MLA      r0,r1,r8,r0
00016e  8230              STRH     r0,[r6,#0x10]
;;;206    					printf("\r:air........  %5d,%5d",offset->air,gain->air);
000170  8a32              LDRH     r2,[r6,#0x10]
000172  8a29              LDRH     r1,[r5,#0x10]
000174  a021              ADR      r0,|L12.508|
000176  f7fffffe          BL       __2printf
;;;207    					break;
00017a  e00d              B        |L12.408|
;;;208    				
;;;209    				case PLOT_OFFSET:
;;;210    					plot.Offset(i,j);
00017c  4642              MOV      r2,r8
00017e  4639              MOV      r1,r7
000180  f10400b8          ADD      r0,r4,#0xb8
000184  f7fffffe          BL       _ZN5_PLOTIdE6OffsetEii ; _PLOT<double>::Offset(int, int)
;;;211    					break;
000188  e006              B        |L12.408|
;;;212    				case PLOT_SCALE:
;;;213    					plot.Scale(i,j);
00018a  4642              MOV      r2,r8
00018c  4639              MOV      r1,r7
00018e  f10400b8          ADD      r0,r4,#0xb8
000192  f7fffffe          BL       _ZN5_PLOTIdE5ScaleEii ; _PLOT<double>::Scale(int, int)
;;;214    					break;
000196  bf00              NOP      
                  |L12.408|
000198  bf00              NOP                            ;163
;;;215    			}
;;;216    }
00019a  e8bd83fe          POP      {r1-r9,pc}
;;;217    
                          ENDP

00019e  0000              DCW      0x0000
                  |L12.416|
0001a0  0d0a00            DCB      "\r\n",0
0001a3  00                DCB      0
                  |L12.420|
                          DCD      0x3ff00000
                  |L12.424|
                          DCD      0x40240000
                  |L12.428|
                          DCD      0x40a5fa00
                  |L12.432|
0001b0  0d3a636f          DCB      "\r:cooler.....  %5d,%5d",0
0001b4  6f6c6572
0001b8  2e2e2e2e
0001bc  2e202025
0001c0  35642c25
0001c4  356400  
0001c7  00                DCB      0
                  |L12.456|
0001c8  0d3a626f          DCB      "\r:bottle.....  %5d,%5d",0
0001cc  74746c65
0001d0  2e2e2e2e
0001d4  2e202025
0001d8  35642c25
0001dc  356400  
0001df  00                DCB      0
                  |L12.480|
0001e0  0d3a636f          DCB      "\r:compressor...  %5d,%5d",0
0001e4  6d707265
0001e8  73736f72
0001ec  2e2e2e20
0001f0  20253564
0001f4  2c253564
0001f8  00      
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L12.508|
0001fc  0d3a6169          DCB      "\r:air........  %5d,%5d",0
000200  722e2e2e
000204  2e2e2e2e
000208  2e202025
00020c  35642c25
000210  356400  
000213  00                DCB      0

                          AREA ||i._ZN3_LMC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN3_LMC2Ev                  ; Alternate entry point ; _LM::_LM__sub_object()
                  _ZN3_LMC1Ev PROC ; _LM::_LM()
;;;22     
;;;23     _LM::_LM() {
;;;24     	
;;;25           io=_stdio(NULL);
;;;26           _stdio(io);
;;;27     	
;;;28     			_thread_add((void *)Poll,this,(char *)"lm",1);
;;;29     			_thread_add((void *)Display,this,(char *)"plot",1);						
;;;30     			FIL f;
;;;31     			if(f_open(&f,"0:/lm.ini",FA_READ) == FR_OK) {
;;;32     				pyro.LoadSettings((FILE *)&f);
;;;33     				pump.LoadSettings((FILE *)&f);
;;;34     				fan.LoadSettings((FILE *)&f);
;;;35     				spray.LoadSettings((FILE *)&f);
;;;36     				ec20.LoadSettings((FILE *)&f);
;;;37     				while(!f_eof(&f))
;;;38     				Parse((FILE *)&f);
;;;39     				f_close(&f);	
;;;40     			}	else				
;;;41     				printf("\r\n setup file error...\r\n:");
;;;42     
;;;43     			printf("\r\n[F1]  - thermopile");
;;;44     			printf("\r\n[F4]  - spray on/off");
;;;45     			printf("\r\n[F5]  - pump");
;;;46     			printf("\r\n[F6]  - fan");
;;;47     			printf("\r\n[F7]  - spray");
;;;48     			printf("\r\n[F11] - save settings");	
;;;49     			printf("\r\n[F12] - exit app.    ");	
;;;50     			printf("\r\nCtrlE - EC20 console ");	
;;;51     			printf("\r\n");	
;;;52     			printf("\r\nCtrlY - reset");	
;;;53     
;;;54     			_12Voff_ENABLE;
;;;55     			debug=(__DEBUG__)0;
;;;56     			
;;;57     // not used in the application
;;;58     //
;;;59     #ifdef	USE_LCD
;;;60     #ifdef	__SIMULATION__
;;;61     			plot.Clear();
;;;62     			plot.Add(&spray.pComp,1.0,0.02, LCD_COLOR_GREEN);
;;;63     			plot.Add(&spray.pBott,1.0,0.02, LCD_COLOR_CYAN);
;;;64     			plot.Add(&spray.pAir,1.0,0.002, LCD_COLOR_MAGENTA);
;;;65     
;;;66     
;;;67     //		plot.Add(&_ADC::Instance()->buf.compressor,_BAR(1),_BAR(1)*0.02, LCD_COLOR_GREEN);
;;;68     //		plot.Add(&_ADC::Instance()->buf.bottle,_BAR(1),_BAR(1)*0.02, LCD_COLOR_CYAN);
;;;69     //		plot.Add(&_ADC::Instance()->buf.air,_BAR(1),_BAR(1)*0.002, LCD_COLOR_MAGENTA);
;;;70     
;;;71     #endif
;;;72     #endif
;;;73     //
;;;74     //
;;;75     //
;;;76     //
;;;77     //
;;;78     }
;;;79     /*******************************************************************************
000000  b5f0              PUSH     {r4-r7,lr}
000002  f5ad7d0b          SUB      sp,sp,#0x22c
000006  4604              MOV      r4,r0
000008  f1040508          ADD      r5,r4,#8
00000c  f1050008          ADD      r0,r5,#8
000010  f7fffffe          BL       _ZN5_GPIOC1Ev ; _GPIO::_GPIO()
000014  f1a00508          SUB      r5,r0,#8
000018  2000              MOVS     r0,#0
00001a  6068              STR      r0,[r5,#4]
00001c  6028              STR      r0,[r5,#0]
00001e  f1050010          ADD      r0,r5,#0x10
000022  f8c50090          STR      r0,[r5,#0x90]
000026  bf00              NOP      
000028  f1a50408          SUB      r4,r5,#8
00002c  f10406b8          ADD      r6,r4,#0xb8
000030  f1060508          ADD      r5,r6,#8
000034  a801              ADD      r0,sp,#4
000036  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEEC1Ev ; std::allocator<_PLOT<double>::_POINT>::allocator()
00003a  4607              MOV      r7,r0
00003c  4639              MOV      r1,r7
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEEC1ERKS2_ ; std::allocator<_PLOT<double>::_POINT>::allocator(const std::allocator<_PLOT<double>::_POINT>&)
000044  4605              MOV      r5,r0
000046  2000              MOVS     r0,#0
000048  6028              STR      r0,[r5,#0]
00004a  6068              STR      r0,[r5,#4]
00004c  60a8              STR      r0,[r5,#8]
00004e  bf00              NOP      
000050  f1a50608          SUB      r6,r5,#8
000054  6070              STR      r0,[r6,#4]
000056  f84609b8          STR      r0,[r6],#-0xb8
00005a  bf00              NOP      
00005c  4634              MOV      r4,r6
00005e  f7fffffe          BL       _ZN4_ADC8InstanceEv ; _ADC::Instance()
000062  4605              MOV      r5,r0
000064  4629              MOV      r1,r5
000066  f10400cc          ADD      r0,r4,#0xcc
00006a  f7fffffe          BL       _ZN6_SPRAYC1EP4_ADC ; _SPRAY::_SPRAY(_ADC*)
00006e  f1a004cc          SUB      r4,r0,#0xcc
000072  2100              MOVS     r1,#0
000074  f504708e          ADD      r0,r4,#0x11c
000078  f7fffffe          BL       _ZN4_CANC1Eb ; _CAN::_CAN(bool)
00007c  f5a0748e          SUB      r4,r0,#0x11c
000080  f5047094          ADD      r0,r4,#0x128
000084  f7fffffe          BL       _ZN5_PYROC1Ev ; _PYRO::_PYRO()
000088  f5a07494          SUB      r4,r0,#0x128
00008c  f5046087          ADD      r0,r4,#0x438
000090  f7fffffe          BL       _ZN5_PUMPC1Ev ; _PUMP::_PUMP()
000094  f5a06487          SUB      r4,r0,#0x438
000098  f204405c          ADD      r0,r4,#0x45c
00009c  f7fffffe          BL       _ZN4_FANC1Ev ; _FAN::_FAN()
0000a0  f2a0445c          SUB      r4,r0,#0x45c
0000a4  f5046090          ADD      r0,r4,#0x480
0000a8  f7fffffe          BL       _ZN5_EC20C1Ev ; _EC20::_EC20()
0000ac  f5a06490          SUB      r4,r0,#0x480
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       _stdio
0000b6  6060              STR      r0,[r4,#4]
0000b8  6860              LDR      r0,[r4,#4]
0000ba  f7fffffe          BL       _stdio
0000be  2301              MOVS     r3,#1
0000c0  a234              ADR      r2,|L13.404|
0000c2  4621              MOV      r1,r4
0000c4  4834              LDR      r0,|L13.408|
0000c6  4478              ADD      r0,r0,pc
0000c8  f7fffffe          BL       _thread_add
0000cc  2301              MOVS     r3,#1
0000ce  a233              ADR      r2,|L13.412|
0000d0  4621              MOV      r1,r4
0000d2  4834              LDR      r0,|L13.420|
0000d4  4478              ADD      r0,r0,pc
0000d6  f7fffffe          BL       _thread_add
0000da  2201              MOVS     r2,#1
0000dc  a132              ADR      r1,|L13.424|
0000de  a802              ADD      r0,sp,#8
0000e0  f7fffffe          BL       f_open
0000e4  bb50              CBNZ     r0,|L13.316|
0000e6  a902              ADD      r1,sp,#8
0000e8  f5047094          ADD      r0,r4,#0x128
0000ec  f7fffffe          BL       _ZN5_PYRO12LoadSettingsEPSt6__FILE ; _PYRO::LoadSettings(std::__FILE*)
0000f0  a902              ADD      r1,sp,#8
0000f2  f5046087          ADD      r0,r4,#0x438
0000f6  f7fffffe          BL       _ZN5_PUMP12LoadSettingsEPSt6__FILE ; _PUMP::LoadSettings(std::__FILE*)
0000fa  a902              ADD      r1,sp,#8
0000fc  f204405c          ADD      r0,r4,#0x45c
000100  f7fffffe          BL       _ZN4_FAN12LoadSettingsEPSt6__FILE ; _FAN::LoadSettings(std::__FILE*)
000104  a902              ADD      r1,sp,#8
000106  f10400cc          ADD      r0,r4,#0xcc
00010a  f7fffffe          BL       _ZN6_SPRAY12LoadSettingsEPSt6__FILE ; _SPRAY::LoadSettings(std::__FILE*)
00010e  a902              ADD      r1,sp,#8
000110  f5046090          ADD      r0,r4,#0x480
000114  f7fffffe          BL       _ZN5_EC2012LoadSettingsEPSt6__FILE ; _EC20::LoadSettings(std::__FILE*)
000118  e003              B        |L13.290|
                  |L13.282|
00011a  a902              ADD      r1,sp,#8
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       _ZN3_LM5ParseEPSt6__FILE ; _LM::Parse(std::__FILE*)
                  |L13.290|
000122  e9dd0104          LDRD     r0,r1,[sp,#0x10]
000126  4288              CMP      r0,r1
000128  d101              BNE      |L13.302|
00012a  2001              MOVS     r0,#1
00012c  e000              B        |L13.304|
                  |L13.302|
00012e  2000              MOVS     r0,#0
                  |L13.304|
000130  2800              CMP      r0,#0
000132  d0f2              BEQ      |L13.282|
000134  a802              ADD      r0,sp,#8
000136  f7fffffe          BL       f_close
00013a  e002              B        |L13.322|
                  |L13.316|
00013c  a01d              ADR      r0,|L13.436|
00013e  f7fffffe          BL       __2printf
                  |L13.322|
000142  a023              ADR      r0,|L13.464|
000144  f7fffffe          BL       __2printf
000148  a027              ADR      r0,|L13.488|
00014a  f7fffffe          BL       __2printf
00014e  a02c              ADR      r0,|L13.512|
000150  f7fffffe          BL       __2printf
000154  a02e              ADR      r0,|L13.528|
000156  f7fffffe          BL       __2printf
00015a  a031              ADR      r0,|L13.544|
00015c  f7fffffe          BL       __2printf
000160  a033              ADR      r0,|L13.560|
000162  f7fffffe          BL       __2printf
000166  a038              ADR      r0,|L13.584|
000168  f7fffffe          BL       __2printf
00016c  a03c              ADR      r0,|L13.608|
00016e  f7fffffe          BL       __2printf
000172  a041              ADR      r0,|L13.632|
000174  f7fffffe          BL       __2printf
000178  a040              ADR      r0,|L13.636|
00017a  f7fffffe          BL       __2printf
00017e  2108              MOVS     r1,#8
000180  4842              LDR      r0,|L13.652|
000182  f7fffffe          BL       GPIO_ResetBits
000186  2000              MOVS     r0,#0
000188  f88404a8          STRB     r0,[r4,#0x4a8]
00018c  4620              MOV      r0,r4
00018e  f50d7d0b          ADD      sp,sp,#0x22c
000192  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L13.404|
000194  6c6d00            DCB      "lm",0
000197  00                DCB      0
                  |L13.408|
                          DCD      _ZN3_LM4PollEPv+0xce - {PC} ; _LM::Poll(void*)
                  |L13.412|
00019c  706c6f74          DCB      "plot",0
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L13.420|
                          DCD      _ZN3_LM7DisplayEPv+0xcc - {PC} ; _LM::Display(void*)
                  |L13.424|
0001a8  303a2f6c          DCB      "0:/lm.ini",0
0001ac  6d2e696e
0001b0  6900    
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L13.436|
0001b4  0d0a2073          DCB      "\r\n setup file error...\r\n:",0
0001b8  65747570
0001bc  2066696c
0001c0  65206572
0001c4  726f722e
0001c8  2e2e0d0a
0001cc  3a00    
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L13.464|
0001d0  0d0a5b46          DCB      "\r\n[F1]  - thermopile",0
0001d4  315d2020
0001d8  2d207468
0001dc  65726d6f
0001e0  70696c65
0001e4  00      
0001e5  00                DCB      0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L13.488|
0001e8  0d0a5b46          DCB      "\r\n[F4]  - spray on/off",0
0001ec  345d2020
0001f0  2d207370
0001f4  72617920
0001f8  6f6e2f6f
0001fc  666600  
0001ff  00                DCB      0
                  |L13.512|
000200  0d0a5b46          DCB      "\r\n[F5]  - pump",0
000204  355d2020
000208  2d207075
00020c  6d7000  
00020f  00                DCB      0
                  |L13.528|
000210  0d0a5b46          DCB      "\r\n[F6]  - fan",0
000214  365d2020
000218  2d206661
00021c  6e00    
00021e  00                DCB      0
00021f  00                DCB      0
                  |L13.544|
000220  0d0a5b46          DCB      "\r\n[F7]  - spray",0
000224  375d2020
000228  2d207370
00022c  72617900
                  |L13.560|
000230  0d0a5b46          DCB      "\r\n[F11] - save settings",0
000234  31315d20
000238  2d207361
00023c  76652073
000240  65747469
000244  6e677300
                  |L13.584|
000248  0d0a5b46          DCB      "\r\n[F12] - exit app.    ",0
00024c  31325d20
000250  2d206578
000254  69742061
000258  70702e20
00025c  20202000
                  |L13.608|
000260  0d0a4374          DCB      "\r\nCtrlE - EC20 console ",0
000264  726c4520
000268  2d204543
00026c  32302063
000270  6f6e736f
000274  6c652000
                  |L13.632|
000278  0d0a00            DCB      "\r\n",0
00027b  00                DCB      0
                  |L13.636|
00027c  0d0a4374          DCB      "\r\nCtrlY - reset",0
000280  726c5920
000284  2d207265
000288  73657400
                  |L13.652|
                          DCD      0x40020400

                          AREA ||i._ZN3_LMC1Ev.clean||, CODE, READONLY, ALIGN=1

000000  f5046090          ADD      r0,r4,#0x480
000004  f7fffffe          BL       _ZN5_EC20D1Ev ; _EC20::~_EC20()
000008  f5a06490          SUB      r4,r0,#0x480
00000c  f5047094          ADD      r0,r4,#0x128
000010  f7fffffe          BL       _ZN5_PYROD1Ev ; _PYRO::~_PYRO()
000014  f5a07494          SUB      r4,r0,#0x128
000018  f10400b8          ADD      r0,r4,#0xb8
00001c  f7fffffe          BL       _ZN5_PLOTIdED1Ev ; _PLOT<double>::~_PLOT()
000020  f7fffffe          BL       __cxa_end_cleanup

                          AREA ||i._ZN3_LMD1Ev||, CODE, READONLY, ALIGN=2

                  _ZN3_LMD2Ev                  ; Alternate entry point ; _LM::~_LM__sub_object()
                  _ZN3_LMD1Ev PROC ; _LM::~_LM()
;;;84     *******************************************************************************/
;;;85     _LM::~_LM() {																			// destructor
;;;86     			_thread_remove((void *)Poll,this);
;;;87     			_thread_remove((void *)Print,this);
;;;88     			_thread_remove((void *)Display,this);
;;;89     }
;;;90     /*******************************************************************************
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4621              MOV      r1,r4
000006  4811              LDR      r0,|L15.76|
000008  4478              ADD      r0,r0,pc
00000a  f7fffffe          BL       _thread_remove
00000e  4621              MOV      r1,r4
000010  480f              LDR      r0,|L15.80|
000012  4478              ADD      r0,r0,pc
000014  f7fffffe          BL       _thread_remove
000018  4621              MOV      r1,r4
00001a  480e              LDR      r0,|L15.84|
00001c  4478              ADD      r0,r0,pc
00001e  f7fffffe          BL       _thread_remove
000022  f5046090          ADD      r0,r4,#0x480
000026  f7fffffe          BL       _ZN5_EC20D1Ev ; _EC20::~_EC20()
00002a  f5a06490          SUB      r4,r0,#0x480
00002e  f5047094          ADD      r0,r4,#0x128
000032  f7fffffe          BL       _ZN5_PYROD1Ev ; _PYRO::~_PYRO()
000036  f5a07494          SUB      r4,r0,#0x128
00003a  f10400b8          ADD      r0,r4,#0xb8
00003e  f7fffffe          BL       _ZN5_PLOTIdED1Ev ; _PLOT<double>::~_PLOT()
000042  f1a004b8          SUB      r4,r0,#0xb8
000046  4620              MOV      r0,r4
000048  bd10              POP      {r4,pc}
                          ENDP

00004a  0000              DCW      0x0000
                  |L15.76|
                          DCD      _ZN3_LM4PollEPv+0x40 - {PC} ; _LM::Poll(void*)
                  |L15.80|
                          DCD      _ZN3_LM5PrintEPv+0x3a - {PC} ; _LM::Print(void*)
                  |L15.84|
                          DCD      _ZN3_LM7DisplayEPv+0x34 - {PC} ; _LM::Display(void*)

                          AREA ||i._ZN3_LMD1Ev.clean||, CODE, READONLY, ALIGN=1

000000  f5046090          ADD      r0,r4,#0x480
000004  f7fffffe          BL       _ZN5_EC20D1Ev ; _EC20::~_EC20()
000008  f5a06490          SUB      r4,r0,#0x480
00000c  f5047094          ADD      r0,r4,#0x128
000010  f7fffffe          BL       _ZN5_PYROD1Ev ; _PYRO::~_PYRO()
000014  f5a07494          SUB      r4,r0,#0x128
000018  f10400b8          ADD      r0,r4,#0xb8
00001c  f7fffffe          BL       _ZN5_PLOTIdED1Ev ; _PLOT<double>::~_PLOT()
000020  f7fffffe          BL       __cxa_end_cleanup

                          AREA ||i.lm||, CODE, READONLY, ALIGN=2

                  ||lm|| PROC
;;;479    *******************************************************************************/
;;;480    int		lm() {
000000  b500              PUSH     {lr}
000002  f2ad4db4          SUB      sp,sp,#0x4b4
;;;481    _LM 	lm;
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       _ZN3_LMC1Ev ; _LM::_LM()
;;;482    			printf("\r\n:");						
00000c  a008              ADR      r0,|L17.48|
00000e  f7fffffe          BL       __2printf
;;;483    			do
000012  bf00              NOP      
                  |L17.20|
;;;484    				_thread_loop();
000014  f7fffffe          BL       _thread_loop
;;;485    			while(lm.Parse()==true);
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       _ZN3_LM5ParseEv ; _LM::Parse()
00001e  2801              CMP      r0,#1
000020  d0f8              BEQ      |L17.20|
;;;486    			return 0;
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       _ZN3_LMD1Ev ; _LM::~_LM()
000028  2000              MOVS     r0,#0
;;;487    }
00002a  f20d4db4          ADD      sp,sp,#0x4b4
00002e  bd00              POP      {pc}
;;;488    }
                          ENDP

                  |L17.48|
000030  0d0a3a00          DCB      "\r\n:",0

                          AREA ||i.lm.clean||, CODE, READONLY, ALIGN=1

000000  4668              MOV      r0,sp
000002  f7fffffe          BL       _ZN3_LMD1Ev ; _LM::~_LM()
000006  f7fffffe          BL       __cxa_end_cleanup

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN3_LM9IncrementEii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM9IncrementEii||
                          DCD      0x8002adb0

                          AREA ||area_number.20||, LINKORDER=||i._ZN3_LM7DisplayEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM7DisplayEPv||
                          DCD      0x8006afb0

                          AREA ||area_number.21||, LINKORDER=||i._ZN3_LM5PrintEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM5PrintEPv||
                          DCD      0x8000abb0

                          AREA ||area_number.22||, LINKORDER=||i._ZN3_LM4PollEPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM4PollEPv||
                          DCD      0x80acb0b0

                          AREA ||area_number.23||, LINKORDER=||i._ZN3_LMD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LMD1Ev||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN3_LMD1Ev||

                          AREA ||area_number.24||, LINKORDER=||i._ZN3_LMD1Ev.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LMD1Ev.clean||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN3_LM6SelectE12__SELECTED__||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM6SelectE12__SELECTED__||
                          DCD      0x80aab0b0

                          AREA ||area_number.26||, LINKORDER=||i._ZN3_LM11MinusDecodeEPc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM11MinusDecodeEPc||
                          DCD      0x8001a8b0

                          AREA ||area_number.27||, LINKORDER=||i._ZN3_LM10PlusDecodeEPc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM10PlusDecodeEPc||
                          DCD      0x8001aab0

                          AREA ||area_number.28||, LINKORDER=||i._ZN3_LM10WhatDecodeEPc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM10WhatDecodeEPc||
                          DCD      0x80aab0b0

                          AREA ||area_number.29||, LINKORDER=||i._ZN3_LM6DecodeEPc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM6DecodeEPc||
                          DCD      0x80b21aaf

                          AREA ||area_number.30||, LINKORDER=||i._ZN3_LM5ParseEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM5ParseEi||
                          DCD      0x80b209ac

                          AREA ||area_number.31||, LINKORDER=||i._ZN3_LM5ParseEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM5ParseEv||
                          DCD      0x80aab0b0

                          AREA ||area_number.32||, LINKORDER=||i._ZN3_LM5ParseEPSt6__FILE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM5ParseEPSt6__FILE||
                          DCD      0x80aab0b0

                          AREA ||area_number.33||, LINKORDER=||i._ZN3_LMC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LMC1Ev||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN3_LMC1Ev||

                          AREA ||area_number.34||, LINKORDER=||i._ZN3_LMC1Ev.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LMC1Ev.clean||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i.lm||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr1
                          DCD      0x00000000
                          RELOC 42, ||i.lm||
                          DCD      0x00000000
                          RELOC 42, ||.extab.lm||

                          AREA ||area_number.36||, LINKORDER=||i.lm.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.lm.clean||
                          DCD      0x00000001

                          AREA ||.ARM.extab||, DATA, READONLY, ALIGN=2

                  ||.extab._ZN3_LMD1Ev||
                          DCD      0x80a8b0b0
000004  001c000e          DCW      0x001c,0x000e
                          DCD      0x00000001
                          RELOC 42, ||i._ZN3_LMD1Ev.clean||
00000c  000c002a          DCW      0x000c,0x002a
                          DCD      0x0000000d
                          RELOC 42, ||i._ZN3_LMD1Ev.clean||
000014  000c0036          DCW      0x000c,0x0036
                          DCD      0x00000019
                          RELOC 42, ||i._ZN3_LMD1Ev.clean||
                          DCD      0x00000000

                          AREA ||area_number.38||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.extab||
                  ||.extab._ZN3_LMC1Ev||
                          DCD      0x80b20aab
000004  00320062          DCW      0x0032,0x0062
                          DCD      0x00000019
                          RELOC 42, ||i._ZN3_LMC1Ev.clean||
00000c  00220094          DCW      0x0022,0x0094
                          DCD      0x0000000d
                          RELOC 42, ||i._ZN3_LMC1Ev.clean||
000014  00d200b6          DCW      0x00d2,0x00b6
                          DCD      0x00000001
                          RELOC 42, ||i._ZN3_LMC1Ev.clean||
                          DCD      0x00000000

                          AREA ||area_number.39||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.extab||
                  ||.extab.lm||
                          DCD      0x8101b2ac
                          DCD      0x018400b0
000008  00100018          DCW      0x0010,0x0018
                          DCD      0x00000001
                          RELOC 42, ||i.lm.clean||
                          DCD      0x00000000

                          AREA ||.constdata__ZZN5_PLOTIdE6OffsetEiiEs||, COMGROUP=_ZZN5_PLOTIdE6OffsetEiiEs, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE6OffsetEiiEs ; _PLOT<double>::Offset(int, int)::string
000000  0d3a706c          DCB      0x0d,0x3a,0x70,0x6c
000004  6f74206f          DCB      0x6f,0x74,0x20,0x6f
000008  66667365          DCB      0x66,0x66,0x73,0x65
00000c  742000            DCB      0x74,0x20,0x00

                          AREA ||.constdata__ZZN5_PLOTIdE6OffsetEiiEs_0||, COMGROUP=_ZZN5_PLOTIdE6OffsetEiiEs_0, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE6OffsetEiiEs_0 ; _PLOT<double>::Offset(int, int)::string (instance 2)
000000  25366400          DCB      0x25,0x36,0x64,0x00

                          AREA ||.constdata__ZZN5_PLOTIdE6OffsetEiiEs_1||, COMGROUP=_ZZN5_PLOTIdE6OffsetEiiEs_1, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE6OffsetEiiEs_1 ; _PLOT<double>::Offset(int, int)::string (instance 3)
000000  0800              DCB      0x08,0x00

                          AREA ||.constdata__ZZN5_PLOTIdE6OffsetEiiEs_2||, COMGROUP=_ZZN5_PLOTIdE6OffsetEiiEs_2, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE6OffsetEiiEs_2 ; _PLOT<double>::Offset(int, int)::string (instance 4)
000000  08080808          DCB      0x08,0x08,0x08,0x08
000004  080800            DCB      0x08,0x08,0x00

                          AREA ||.constdata__ZZN5_PLOTIdE5ScaleEiiEs||, COMGROUP=_ZZN5_PLOTIdE5ScaleEiiEs, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE5ScaleEiiEs ; _PLOT<double>::Scale(int, int)::string
000000  0d3a706c          DCB      0x0d,0x3a,0x70,0x6c
000004  6f742073          DCB      0x6f,0x74,0x20,0x73
000008  63616c65          DCB      0x63,0x61,0x6c,0x65
00000c  2000              DCB      0x20,0x00

                          AREA ||.constdata__ZZN5_PLOTIdE5ScaleEiiEs_0||, COMGROUP=_ZZN5_PLOTIdE5ScaleEiiEs_0, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE5ScaleEiiEs_0 ; _PLOT<double>::Scale(int, int)::string (instance 2)
000000  25366400          DCB      0x25,0x36,0x64,0x00

                          AREA ||.constdata__ZZN5_PLOTIdE5ScaleEiiEs_1||, COMGROUP=_ZZN5_PLOTIdE5ScaleEiiEs_1, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE5ScaleEiiEs_1 ; _PLOT<double>::Scale(int, int)::string (instance 3)
000000  0800              DCB      0x08,0x00

                          AREA ||.constdata__ZZN5_PLOTIdE5ScaleEiiEs_2||, COMGROUP=_ZZN5_PLOTIdE5ScaleEiiEs_2, DATA, READONLY, ALIGN=0

                  _ZZN5_PLOTIdE5ScaleEiiEs_2 ; _PLOT<double>::Scale(int, int)::string (instance 4)
000000  08080808          DCB      0x08,0x08,0x08,0x08
000004  080800            DCB      0x08,0x08,0x00

                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_, CODE, READONLY, ALIGN=1

                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_ PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::_C_destroy(_PLOT<double>::_POINT*, _PLOT<double>::_POINT*)
;;;172    
;;;173        void _C_destroy (iterator __start, iterator __finish) {
000000  e004              B        |L123.12|
                  |L123.2|
;;;174            for ( ; __start != __finish; ++__start)
;;;175                _RWSTD_VALUE_ALLOC (_C_value_alloc_type, destroy (&*__start));
000002  bf00              NOP      
000004  bf00              NOP      
000006  bf00              NOP      
000008  bf00              NOP      
00000a  310c              ADDS     r1,r1,#0xc            ;174
                  |L123.12|
00000c  4291              CMP      r1,r2                 ;174
00000e  d1f8              BNE      |L123.2|
;;;176        }
000010  4770              BX       lr
;;;177        
                          ENDP


                          AREA ||area_number.124||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.124||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_||
                          DCD      0x00000001

                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED1Ev||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED1Ev, CODE, READONLY, ALIGN=1

                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED2Ev                  ; Alternate entry point ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::~vector__sub_object()
                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED1Ev PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::~vector()
;;;306        
;;;307        ~vector () { 
;;;308            _C_destroy(begin (), end ()); 
;;;309            _RWSTD_VALUE_ALLOC(_C_value_alloc_type, deallocate(_C_start,
;;;310                                                  _C_end_of_storage - _C_start));
;;;311        }
;;;312        
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
00000a  4605              MOV      r5,r0
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
000012  4606              MOV      r6,r0
000014  462a              MOV      r2,r5
000016  4631              MOV      r1,r6
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_ ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::_C_destroy(_PLOT<double>::_POINT*, _PLOT<double>::_POINT*)
00001e  6821              LDR      r1,[r4,#0]
000020  68a0              LDR      r0,[r4,#8]
000022  1a40              SUBS     r0,r0,r1
000024  210c              MOVS     r1,#0xc
000026  fb90f5f1          SDIV     r5,r0,r1
00002a  462a              MOV      r2,r5
00002c  4620              MOV      r0,r4
00002e  6821              LDR      r1,[r4,#0]
000030  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j ; std::allocator<_PLOT<double>::_POINT>::deallocate(_PLOT<double>::_POINT*, unsigned)
000034  4620              MOV      r0,r4
000036  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||area_number.131||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED1Ev, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.131||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED1Ev||
                          DCD      0x80aab0b0

                          AREA ||t._ZN5_PLOTIdE5ScaleEii||, COMGROUP=_ZN5_PLOTIdE5ScaleEii, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _ZN5_PLOTIdE5ScaleEii PROC ; _PLOT<double>::Scale(int, int)
;;;84     
;;;85     		void	Scale(int a, int b) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;86     			idx= __min(__max(idx+b,0),points.size()-1);
00000a  f1040008          ADD      r0,r4,#8
00000e  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
000012  1e40              SUBS     r0,r0,#1
000014  6861              LDR      r1,[r4,#4]
000016  4429              ADD      r1,r1,r5
000018  2900              CMP      r1,#0
00001a  dd02              BLE      |L137.34|
00001c  6861              LDR      r1,[r4,#4]
00001e  4429              ADD      r1,r1,r5
000020  e000              B        |L137.36|
                  |L137.34|
000022  2100              MOVS     r1,#0
                  |L137.36|
000024  4288              CMP      r0,r1
000026  d908              BLS      |L137.58|
000028  6860              LDR      r0,[r4,#4]
00002a  4428              ADD      r0,r0,r5
00002c  2800              CMP      r0,#0
00002e  dd02              BLE      |L137.54|
000030  6860              LDR      r0,[r4,#4]
000032  4428              ADD      r0,r0,r5
000034  e006              B        |L137.68|
                  |L137.54|
000036  2000              MOVS     r0,#0
000038  e004              B        |L137.68|
                  |L137.58|
00003a  f1040008          ADD      r0,r4,#8
00003e  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
000042  1e40              SUBS     r0,r0,#1
                  |L137.68|
000044  6060              STR      r0,[r4,#4]
;;;87     			points[idx].Scale = __max(points[idx].Scale-a,1);
000046  f1040008          ADD      r0,r4,#8
00004a  6861              LDR      r1,[r4,#4]
00004c  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
000050  f9b00008          LDRSH    r0,[r0,#8]
000054  1b80              SUBS     r0,r0,r6
000056  2801              CMP      r0,#1
000058  dd08              BLE      |L137.108|
00005a  f1040008          ADD      r0,r4,#8
00005e  6861              LDR      r1,[r4,#4]
000060  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
000064  f9b00008          LDRSH    r0,[r0,#8]
000068  1b80              SUBS     r0,r0,r6
00006a  e000              B        |L137.110|
                  |L137.108|
00006c  2001              MOVS     r0,#1
                  |L137.110|
00006e  b207              SXTH     r7,r0
000070  f1040008          ADD      r0,r4,#8
000074  6861              LDR      r1,[r4,#4]
000076  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
00007a  8107              STRH     r7,[r0,#8]
;;;88     			printf("\r:plot scale ");
00007c  4817              LDR      r0,|L137.220|
00007e  4478              ADD      r0,r0,pc
000080  f7fffffe          BL       __2printf
;;;89     			for(int i=0; i<points.size(); ++i)
000084  2700              MOVS     r7,#0
000086  e00c              B        |L137.162|
                  |L137.136|
;;;90     				printf("%6d", points[i].Scale);
000088  4639              MOV      r1,r7
00008a  f1040008          ADD      r0,r4,#8
00008e  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
000092  f9b08008          LDRSH    r8,[r0,#8]
000096  4641              MOV      r1,r8
000098  4811              LDR      r0,|L137.224|
00009a  4478              ADD      r0,r0,pc
00009c  f7fffffe          BL       __2printf
0000a0  1c7f              ADDS     r7,r7,#1              ;89
                  |L137.162|
0000a2  f1040008          ADD      r0,r4,#8              ;89
0000a6  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
0000aa  42b8              CMP      r0,r7                 ;89
0000ac  d8ec              BHI      |L137.136|
;;;91     			
;;;92     			printf("\b");
0000ae  480d              LDR      r0,|L137.228|
0000b0  4478              ADD      r0,r0,pc
0000b2  f7fffffe          BL       __2printf
;;;93     			for(int i=0; i<points.size()-idx-1; ++i)
0000b6  2700              MOVS     r7,#0
0000b8  e004              B        |L137.196|
                  |L137.186|
;;;94     				printf("\b\b\b\b\b\b");
0000ba  480b              LDR      r0,|L137.232|
0000bc  4478              ADD      r0,r0,pc
0000be  f7fffffe          BL       __2printf
0000c2  1c7f              ADDS     r7,r7,#1              ;93
                  |L137.196|
0000c4  f1040008          ADD      r0,r4,#8              ;93
0000c8  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
0000cc  6861              LDR      r1,[r4,#4]            ;93
0000ce  1a40              SUBS     r0,r0,r1              ;93
0000d0  1e40              SUBS     r0,r0,#1              ;93
0000d2  42b8              CMP      r0,r7                 ;93
0000d4  d8f1              BHI      |L137.186|
;;;95     			};			
0000d6  e8bd81f0          POP      {r4-r8,pc}
;;;96     			
                          ENDP

0000da  0000              DCW      0x0000
                  |L137.220|
                          DCD      _ZZN5_PLOTIdE5ScaleEiiEs+0x5a - {PC} ; _PLOT<double>::Scale(int, int)::string
                  |L137.224|
                          DCD      _ZZN5_PLOTIdE5ScaleEiiEs_0+0x42 - {PC} ; _PLOT<double>::Scale(int, int)::string (instance 2)
                  |L137.228|
                          DCD      _ZZN5_PLOTIdE5ScaleEiiEs_1+0x30 - {PC} ; _PLOT<double>::Scale(int, int)::string (instance 3)
                  |L137.232|
                          DCD      _ZZN5_PLOTIdE5ScaleEiiEs_2+0x28 - {PC} ; _PLOT<double>::Scale(int, int)::string (instance 4)

                          AREA ||area_number.138||, COMGROUP=_ZN5_PLOTIdE5ScaleEii, LINKORDER=||t._ZN5_PLOTIdE5ScaleEii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.138||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZN5_PLOTIdE5ScaleEii||
                          DCD      0x80acb0b0

                          AREA ||t._ZN5_PLOTIdE6OffsetEii||, COMGROUP=_ZN5_PLOTIdE6OffsetEii, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _ZN5_PLOTIdE6OffsetEii PROC ; _PLOT<double>::Offset(int, int)
;;;72     		
;;;73     		void	Offset(int a, int b) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;74     			idx= __min(__max(idx+b,0),points.size()-1);
00000a  f1040008          ADD      r0,r4,#8
00000e  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
000012  1e40              SUBS     r0,r0,#1
000014  6861              LDR      r1,[r4,#4]
000016  4429              ADD      r1,r1,r5
000018  2900              CMP      r1,#0
00001a  dd02              BLE      |L144.34|
00001c  6861              LDR      r1,[r4,#4]
00001e  4429              ADD      r1,r1,r5
000020  e000              B        |L144.36|
                  |L144.34|
000022  2100              MOVS     r1,#0
                  |L144.36|
000024  4288              CMP      r0,r1
000026  d908              BLS      |L144.58|
000028  6860              LDR      r0,[r4,#4]
00002a  4428              ADD      r0,r0,r5
00002c  2800              CMP      r0,#0
00002e  dd02              BLE      |L144.54|
000030  6860              LDR      r0,[r4,#4]
000032  4428              ADD      r0,r0,r5
000034  e006              B        |L144.68|
                  |L144.54|
000036  2000              MOVS     r0,#0
000038  e004              B        |L144.68|
                  |L144.58|
00003a  f1040008          ADD      r0,r4,#8
00003e  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
000042  1e40              SUBS     r0,r0,#1
                  |L144.68|
000044  6060              STR      r0,[r4,#4]
;;;75     			points[idx].Offset -= a*points[idx].Scale;
000046  f1040008          ADD      r0,r4,#8
00004a  6861              LDR      r1,[r4,#4]
00004c  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
000050  1d86              ADDS     r6,r0,#6
000052  f1040008          ADD      r0,r4,#8
000056  6861              LDR      r1,[r4,#4]
000058  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
00005c  f9b00008          LDRSH    r0,[r0,#8]
000060  f9b61000          LDRSH    r1,[r6,#0]
000064  fb071010          MLS      r0,r7,r0,r1
000068  b200              SXTH     r0,r0
00006a  8030              STRH     r0,[r6,#0]
;;;76     			printf("\r:plot offset ");
00006c  4817              LDR      r0,|L144.204|
00006e  4478              ADD      r0,r0,pc
000070  f7fffffe          BL       __2printf
;;;77     			for(int i=0; i<points.size(); ++i)
000074  2600              MOVS     r6,#0
000076  e00c              B        |L144.146|
                  |L144.120|
;;;78     				printf("%6d", points[i].Offset);
000078  4631              MOV      r1,r6
00007a  f1040008          ADD      r0,r4,#8
00007e  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
000082  f9b08006          LDRSH    r8,[r0,#6]
000086  4641              MOV      r1,r8
000088  4811              LDR      r0,|L144.208|
00008a  4478              ADD      r0,r0,pc
00008c  f7fffffe          BL       __2printf
000090  1c76              ADDS     r6,r6,#1              ;77
                  |L144.146|
000092  f1040008          ADD      r0,r4,#8              ;77
000096  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
00009a  42b0              CMP      r0,r6                 ;77
00009c  d8ec              BHI      |L144.120|
;;;79     			
;;;80     			printf("\b");
00009e  480d              LDR      r0,|L144.212|
0000a0  4478              ADD      r0,r0,pc
0000a2  f7fffffe          BL       __2printf
;;;81     			for(int i=0; i<points.size()-idx-1; ++i)
0000a6  2600              MOVS     r6,#0
0000a8  e004              B        |L144.180|
                  |L144.170|
;;;82     				printf("\b\b\b\b\b\b");
0000aa  480b              LDR      r0,|L144.216|
0000ac  4478              ADD      r0,r0,pc
0000ae  f7fffffe          BL       __2printf
0000b2  1c76              ADDS     r6,r6,#1              ;81
                  |L144.180|
0000b4  f1040008          ADD      r0,r4,#8              ;81
0000b8  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
0000bc  6861              LDR      r1,[r4,#4]            ;81
0000be  1a40              SUBS     r0,r0,r1              ;81
0000c0  1e40              SUBS     r0,r0,#1              ;81
0000c2  42b0              CMP      r0,r6                 ;81
0000c4  d8f1              BHI      |L144.170|
;;;83     			};			
0000c6  e8bd81f0          POP      {r4-r8,pc}
;;;84     
                          ENDP

0000ca  0000              DCW      0x0000
                  |L144.204|
                          DCD      _ZZN5_PLOTIdE6OffsetEiiEs+0x5a - {PC} ; _PLOT<double>::Offset(int, int)::string
                  |L144.208|
                          DCD      _ZZN5_PLOTIdE6OffsetEiiEs_0+0x42 - {PC} ; _PLOT<double>::Offset(int, int)::string (instance 2)
                  |L144.212|
                          DCD      _ZZN5_PLOTIdE6OffsetEiiEs_1+0x30 - {PC} ; _PLOT<double>::Offset(int, int)::string (instance 3)
                  |L144.216|
                          DCD      _ZZN5_PLOTIdE6OffsetEiiEs_2+0x28 - {PC} ; _PLOT<double>::Offset(int, int)::string (instance 4)

                          AREA ||area_number.145||, COMGROUP=_ZN5_PLOTIdE6OffsetEii, LINKORDER=||t._ZN5_PLOTIdE6OffsetEii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.145||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZN5_PLOTIdE6OffsetEii||
                          DCD      0x80acb0b0

                          AREA ||t._ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_, CODE, READONLY, ALIGN=1

                  _ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_ PROC ; std::allocator<_PLOT<double>::_POINT>::construct(_PLOT<double>::_POINT*, const _PLOT<double>::_POINT&)
;;;209    
;;;210        void construct (pointer __p, const_reference __val) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;211            _RW::__rw_construct (__p, __val);
00000a  4626              MOV      r6,r4
00000c  46b0              MOV      r8,r6
00000e  4631              MOV      r1,r6
000010  200c              MOVS     r0,#0xc
000012  f7fffffe          BL       _ZnwjPv ; operator new(unsigned, void*)
000016  0007              MOVS     r7,r0
000018  d003              BEQ      |L151.34|
00001a  e8950007          LDM      r5,{r0-r2}
00001e  e8870007          STM      r7,{r0-r2}
                  |L151.34|
000022  bf00              NOP      
;;;212        }
000024  e8bd87f0          POP      {r4-r10,pc}
;;;213        
                          ENDP


                          AREA ||area_number.152||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_, LINKORDER=||t._ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.152||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_||
                          DCD      0x00000001

                          AREA ||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_||, COMGROUP=_ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_, CODE, READONLY, ALIGN=1

                  _ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_ PROC ; T2 std::uninitialized_copy<_PLOT<double>::_POINT*, _PLOT<double>::_POINT*, std::allocator<_PLOT<double>::_POINT>>(T1, T1, T2, T3&)
;;;669    inline
;;;670    _ForwardIterator uninitialized_copy (_InputIterator   __first,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;671                                         _InputIterator   __last,
;;;672                                         _ForwardIterator __res,
;;;673                                         _Allocator&      __alloc)
;;;674    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;675        _ForwardIterator __start = __res;
00000c  46a0              MOV      r8,r4
;;;676    
;;;677        _TRY {
;;;678            for (; __first != __last; ++__first, ++__res)
00000e  e006              B        |L158.30|
                  |L158.16|
;;;679                __alloc.construct (&*__res, *__first);
000010  462a              MOV      r2,r5
000012  4621              MOV      r1,r4
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_ ; std::allocator<_PLOT<double>::_POINT>::construct(_PLOT<double>::_POINT*, const _PLOT<double>::_POINT&)
00001a  350c              ADDS     r5,r5,#0xc            ;678
00001c  340c              ADDS     r4,r4,#0xc            ;678
                  |L158.30|
00001e  42b5              CMP      r5,r6                 ;678
000020  d1f6              BNE      |L158.16|
;;;680        }
;;;681        _CATCH (...) {
;;;682            for (; __start != __res; ++__start)
;;;683                __alloc.destroy (&*__start);
;;;684            _RETHROW;
;;;685        }
;;;686    
;;;687        return __res;
000022  46a1              MOV      r9,r4
000024  4648              MOV      r0,r9
;;;688    }
000026  b004              ADD      sp,sp,#0x10
000028  e8bd87f0          POP      {r4-r10,pc}
00002c  f7fffffe          BL       __cxa_begin_catch
000030  e005              B        |L158.62|
                  |L158.50|
000032  bf00              NOP                            ;683
000034  bf00              NOP                            ;683
000036  bf00              NOP                            ;683
000038  bf00              NOP                            ;683
00003a  f108080c          ADD      r8,r8,#0xc            ;682
                  |L158.62|
00003e  45a0              CMP      r8,r4                 ;682
000040  d1f7              BNE      |L158.50|
000042  f7fffffe          BL       __cxa_rethrow
;;;689    
                          ENDP


                          AREA ||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_.clean||, COMGROUP=_ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_, CODE, READONLY, ALIGN=1

000000  bf00              NOP      
000002  f7fffffe          BL       __cxa_end_catch
000006  f7fffffe          BL       __cxa_end_cleanup

                          AREA ||area_number.160||, COMGROUP=_ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_, LINKORDER=||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.160||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_||

                          AREA ||area_number.161||, COMGROUP=_ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_, LINKORDER=||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.161||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_.clean||
                          DCD      0x00000001

                          AREA ||area_number.162||, COMGROUP=_ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.162||, ||.ARM.extab||
                  ||.extab._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_||
                          DCD      0x8003aeb0
000004  002d001a          DCW      0x002d,0x001a
                          DCD      0x0000002d
                          RELOC 42, ||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_||
                          DCD      0xffffffff
000010  00020046          DCW      0x0002,0x0046
                          DCD      0x00000003
                          RELOC 42, ||t._ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_.clean||
                          DCD      0x00000000

                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_, CODE, READONLY, ALIGN=1

                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_ PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::_C_insert_aux(_PLOT<double>::_POINT*, const _PLOT<double>::_POINT&)
;;;100    template <class _TypeT, class _Allocator>
;;;101    void vector<_TypeT,_Allocator>::_C_insert_aux ( iterator __it,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;102                                                    const_reference __x)
;;;103    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
;;;104        if (capacity () > size ()) {
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::capacity() const
000010  4605              MOV      r5,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
000018  4285              CMP      r5,r0
00001a  d925              BLS      |L168.104|
;;;105            // avoid dereferencing end () by incrementing _C_finish first
;;;106            pointer __old_end = _C_finish;
00001c  6865              LDR      r5,[r4,#4]
;;;107            ++_C_finish;
00001e  6860              LDR      r0,[r4,#4]
000020  300c              ADDS     r0,r0,#0xc
000022  6060              STR      r0,[r4,#4]
;;;108            _TRY {
;;;109                _RWSTD_VALUE_ALLOC(_C_value_alloc_type,
000024  f1a5020c          SUB      r2,r5,#0xc
000028  4629              MOV      r1,r5
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_ ; std::allocator<_PLOT<double>::_POINT>::construct(_PLOT<double>::_POINT*, const _PLOT<double>::_POINT&)
;;;110                                   construct (__old_end,
;;;111                                              *(__old_end - difference_type (1))));
;;;112            }
;;;113            _CATCH (...) {
;;;114                _RWSTD_VALUE_ALLOC(_C_value_alloc_type, destroy(__old_end));
;;;115                --_C_finish;
;;;116                _RETHROW;
;;;117            }
;;;118            copy_backward (__it, _C_make_iter (__old_end - difference_type (1)) ,
000030  4632              MOV      r2,r6
000032  f1a5000c          SUB      r0,r5,#0xc
000036  bf00              NOP      
000038  4629              MOV      r1,r5
00003a  bf00              NOP      
00003c  bf00              NOP      
00003e  e00b              B        |L168.88|
                  |L168.64|
000040  f1a1030c          SUB      r3,r1,#0xc
000044  4619              MOV      r1,r3
000046  f1a0070c          SUB      r7,r0,#0xc
00004a  4638              MOV      r0,r7
00004c  e9d7c900          LDRD     r12,r9,[r7,#0]
000050  68bf              LDR      r7,[r7,#8]
000052  e9c3c900          STRD     r12,r9,[r3,#0]
000056  609f              STR      r7,[r3,#8]
                  |L168.88|
000058  4282              CMP      r2,r0
00005a  d1f1              BNE      |L168.64|
00005c  bf00              NOP      
;;;119                           _C_make_iter (__old_end));
;;;120            *__it = __x;
00005e  e8980007          LDM      r8,{r0-r2}
000062  e8860007          STM      r6,{r0-r2}
;;;121        }
000066  e073              B        |L168.336|
                  |L168.104|
;;;122        else {
;;;123            // more memory needed
;;;124            size_t __new_capacity = _RW::__rw_new_capacity(size(),this);
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
00006e  4681              MOV      r9,r0
000070  eb090159          ADD      r1,r9,r9,LSR #1
000074  eb0100d9          ADD      r0,r1,r9,LSR #3
000078  f1090120          ADD      r1,r9,#0x20
00007c  4689              MOV      r9,r1
00007e  4281              CMP      r1,r0
000080  d901              BLS      |L168.134|
000082  4649              MOV      r1,r9
000084  e000              B        |L168.136|
                  |L168.134|
000086  4601              MOV      r1,r0
                  |L168.136|
000088  460f              MOV      r7,r1
00008a  bf00              NOP      
;;;125            pointer __start =
00008c  46b9              MOV      r9,r7
00008e  f8d4b000          LDR      r11,[r4,#0]
000092  464f              MOV      r7,r9
000094  eb090147          ADD      r1,r9,r7,LSL #1
000098  0088              LSLS     r0,r1,#2
00009a  2100              MOVS     r1,#0
00009c  f7fffffe          BL       _ZN4__rw13__rw_allocateEji ; __rw::__rw_allocate(unsigned, int)
0000a0  4605              MOV      r5,r0
;;;126                _RWSTD_VALUE_ALLOC(_C_value_alloc_type,
;;;127                                   allocate(__new_capacity, (void*)_C_start));
;;;128            _TRY {
;;;129                uninitialized_copy(begin(), __it, __start,
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
0000a8  4681              MOV      r9,r0
0000aa  4623              MOV      r3,r4
0000ac  462a              MOV      r2,r5
0000ae  4631              MOV      r1,r6
0000b0  f7fffffe          BL       _ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_ ; T2 std::uninitialized_copy<_PLOT<double>::_POINT*, _PLOT<double>::_POINT*, std::allocator<_PLOT<double>::_POINT>>(T1, T1, T2, T3&)
;;;130                                   _RWSTD_VALUE_ALLOC_CAST (*this));
;;;131                _RWSTD_VALUE_ALLOC(_C_value_alloc_type, 
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
0000ba  1a30              SUBS     r0,r6,r0
0000bc  210c              MOVS     r1,#0xc
0000be  fb90f0f1          SDIV     r0,r0,r1
0000c2  eb000040          ADD      r0,r0,r0,LSL #1
0000c6  eb050980          ADD      r9,r5,r0,LSL #2
0000ca  4642              MOV      r2,r8
0000cc  4649              MOV      r1,r9
0000ce  4620              MOV      r0,r4
0000d0  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_ ; std::allocator<_PLOT<double>::_POINT>::construct(_PLOT<double>::_POINT*, const _PLOT<double>::_POINT&)
;;;132                    construct((__start + (__it - begin())), __x));
;;;133                uninitialized_copy(__it, end(),
0000d4  4620              MOV      r0,r4
0000d6  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
0000da  1a30              SUBS     r0,r6,r0
0000dc  210c              MOVS     r1,#0xc
0000de  fb90f0f1          SDIV     r0,r0,r1
0000e2  eb000040          ADD      r0,r0,r0,LSL #1
0000e6  eb050080          ADD      r0,r5,r0,LSL #2
0000ea  f100090c          ADD      r9,r0,#0xc
0000ee  4620              MOV      r0,r4
0000f0  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
0000f4  4683              MOV      r11,r0
0000f6  4623              MOV      r3,r4
0000f8  464a              MOV      r2,r9
0000fa  4659              MOV      r1,r11
0000fc  4630              MOV      r0,r6
0000fe  f7fffffe          BL       _ZSt18uninitialized_copyIPN5_PLOTIdE6_POINTES3_SaIS2_EET0_T_S6_S5_RT1_ ; T2 std::uninitialized_copy<_PLOT<double>::_POINT*, _PLOT<double>::_POINT*, std::allocator<_PLOT<double>::_POINT>>(T1, T1, T2, T3&)
;;;134                                   __start + (__it - begin()) + difference_type (1),
;;;135                                   _RWSTD_VALUE_ALLOC_CAST (*this)); 
;;;136            }
;;;137            _CATCH (...) {
;;;138                _C_destroy (_C_make_iter (__start),
;;;139                            _C_make_iter (__start + __new_capacity));
;;;140                _RWSTD_VALUE_ALLOC(_C_value_alloc_type,
;;;141                                   deallocate (__start,__new_capacity));
;;;142                _RETHROW;
;;;143            }
;;;144            
;;;145            // compute size before deallocating
;;;146            size_type __size = size ();
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
000108  4682              MOV      r10,r0
;;;147    
;;;148            _C_destroy (begin(), end());
00010a  4620              MOV      r0,r4
00010c  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
000110  4681              MOV      r9,r0
000112  4620              MOV      r0,r4
000114  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
000118  4683              MOV      r11,r0
00011a  464a              MOV      r2,r9
00011c  4659              MOV      r1,r11
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_ ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::_C_destroy(_PLOT<double>::_POINT*, _PLOT<double>::_POINT*)
;;;149    
;;;150            // invalidates all iterators into `*this'
;;;151            _RWSTD_VALUE_ALLOC(_C_value_alloc_type,
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::capacity() const
00012a  4681              MOV      r9,r0
00012c  464a              MOV      r2,r9
00012e  4620              MOV      r0,r4
000130  6821              LDR      r1,[r4,#0]
000132  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j ; std::allocator<_PLOT<double>::_POINT>::deallocate(_PLOT<double>::_POINT*, unsigned)
;;;152                               deallocate(_C_start, capacity ()));
;;;153    
;;;154            _C_start          = __start;
000136  6025              STR      r5,[r4,#0]
;;;155            _C_finish         = __start + __size + difference_type (1);
000138  eb0a004a          ADD      r0,r10,r10,LSL #1
00013c  eb050080          ADD      r0,r5,r0,LSL #2
000140  300c              ADDS     r0,r0,#0xc
000142  6060              STR      r0,[r4,#4]
;;;156            _C_end_of_storage = __start + __new_capacity;
000144  eb070047          ADD      r0,r7,r7,LSL #1
000148  eb050080          ADD      r0,r5,r0,LSL #2
00014c  60a0              STR      r0,[r4,#8]
;;;157        }
00014e  bf00              NOP      
                  |L168.336|
;;;158    }
000150  e8bd8ffe          POP      {r1-r11,pc}
000154  f7fffffe          BL       __cxa_begin_catch
000158  bf00              NOP                            ;114
00015a  bf00              NOP                            ;114
00015c  bf00              NOP                            ;114
00015e  bf00              NOP                            ;114
000160  6860              LDR      r0,[r4,#4]            ;115
000162  380c              SUBS     r0,r0,#0xc            ;115
000164  6060              STR      r0,[r4,#4]            ;115
000166  f7fffffe          BL       __cxa_rethrow
00016a  f7fffffe          BL       __cxa_begin_catch
00016e  eb070147          ADD      r1,r7,r7,LSL #1       ;138
000172  eb050081          ADD      r0,r5,r1,LSL #2       ;138
000176  bf00              NOP                            ;138
000178  4681              MOV      r9,r0                 ;138
00017a  bf00              NOP                            ;138
00017c  46ab              MOV      r11,r5                ;138
00017e  464a              MOV      r2,r9                 ;138
000180  4659              MOV      r1,r11                ;138
000182  4620              MOV      r0,r4                 ;138
000184  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_ ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::_C_destroy(_PLOT<double>::_POINT*, _PLOT<double>::_POINT*)
000188  463a              MOV      r2,r7                 ;140
00018a  4629              MOV      r1,r5                 ;140
00018c  4620              MOV      r0,r4                 ;140
00018e  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j ; std::allocator<_PLOT<double>::_POINT>::deallocate(_PLOT<double>::_POINT*, unsigned)
000192  f7fffffe          BL       __cxa_rethrow
;;;159    
                          ENDP


                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_.clean||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_, CODE, READONLY, ALIGN=1

000000  f7fffffe          BL       __cxa_end_catch
                  |L169.4|
000004  f7fffffe          BL       __cxa_end_cleanup
000008  f7fffffe          BL       __cxa_end_catch
00000c  e7fa              B        |L169.4|

                          AREA ||area_number.170||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.170||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_||

                          AREA ||area_number.171||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.171||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_.clean||
                          DCD      0x00000001

                          AREA ||area_number.172||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.172||, ||.ARM.extab||
                  ||.extab._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_||
                          DCD      0x8002afb0
000004  003f0030          DCW      0x003f,0x0030
                          DCD      0x00000155
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_||
                          DCD      0xffffffff
000010  006100a8          DCW      0x0061,0x00a8
                          DCD      0x0000016b
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_||
                          DCD      0xffffffff
00001c  001e016a          DCW      0x001e,0x016a
                          DCD      0x00000001
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_.clean||
000024  00100188          DCW      0x0010,0x0188
                          DCD      0x00000009
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_.clean||
                          DCD      0x00000000

                          AREA ||t._ZN5_PLOTIdE3AddEPddds||, COMGROUP=_ZN5_PLOTIdE3AddEPddds, CODE, READONLY, ALIGN=1

                  _ZN5_PLOTIdE3AddEPddds PROC ; _PLOT<double>::Add(double*, double, double, short)
;;;63     
;;;64     		void	Add(Type *type, Type offset, Type scale, short colour) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  b084              SUB      sp,sp,#0x10
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
00000e  e9dd7812          LDRD     r7,r8,[sp,#0x48]
;;;65     			_POINT p;
;;;66     			p.Plot=type;
000012  f8cda004          STR      r10,[sp,#4]
;;;67     			p.Offset=offset;
000016  4628              MOV      r0,r5
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       __aeabi_d2iz
00001e  b200              SXTH     r0,r0
000020  f8ad000a          STRH     r0,[sp,#0xa]
;;;68     			p.Scale=scale;
000024  4638              MOV      r0,r7
000026  4641              MOV      r1,r8
000028  f7fffffe          BL       __aeabi_d2iz
00002c  b200              SXTH     r0,r0
00002e  f8ad000c          STRH     r0,[sp,#0xc]
;;;69     			p.Colour=colour;
000032  9814              LDR      r0,[sp,#0x50]
000034  f8ad0008          STRH     r0,[sp,#8]
;;;70     			points.push_back(p);
000038  f1090408          ADD      r4,r9,#8
00003c  f10d0b04          ADD      r11,sp,#4
000040  e9d40101          LDRD     r0,r1,[r4,#4]
000044  4288              CMP      r0,r1
000046  d00a              BEQ      |L178.94|
000048  6860              LDR      r0,[r4,#4]
00004a  300c              ADDS     r0,r0,#0xc
00004c  6060              STR      r0,[r4,#4]
00004e  6860              LDR      r0,[r4,#4]
000050  f1a0010c          SUB      r1,r0,#0xc
000054  465a              MOV      r2,r11
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       _ZNSaIN5_PLOTIdE6_POINTEE9constructEPS1_RKS1_ ; std::allocator<_PLOT<double>::_POINT>::construct(_PLOT<double>::_POINT*, const _PLOT<double>::_POINT&)
00005c  e008              B        |L178.112|
                  |L178.94|
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
000064  465a              MOV      r2,r11
000066  4601              MOV      r1,r0
000068  9000              STR      r0,[sp,#0]
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE13_C_insert_auxEPS2_RKS2_ ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::_C_insert_aux(_PLOT<double>::_POINT*, const _PLOT<double>::_POINT&)
                  |L178.112|
000070  bf00              NOP      
;;;71     		};
000072  b008              ADD      sp,sp,#0x20
000074  e8bd9ff0          POP      {r4-r12,pc}
000078  f7fffffe          BL       __cxa_begin_catch
00007c  6860              LDR      r0,[r4,#4]
00007e  380c              SUBS     r0,r0,#0xc
000080  6060              STR      r0,[r4,#4]
000082  f7fffffe          BL       __cxa_rethrow
;;;72     		
                          ENDP


                          AREA ||t._ZN5_PLOTIdE3AddEPddds.clean||, COMGROUP=_ZN5_PLOTIdE3AddEPddds, CODE, READONLY, ALIGN=1

000000  f7fffffe          BL       __cxa_end_catch
000004  f7fffffe          BL       __cxa_end_cleanup

                          AREA ||area_number.180||, COMGROUP=_ZN5_PLOTIdE3AddEPddds, LINKORDER=||t._ZN5_PLOTIdE3AddEPddds||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.180||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr1
                          DCD      0x00000000
                          RELOC 42, ||t._ZN5_PLOTIdE3AddEPddds||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN5_PLOTIdE3AddEPddds||

                          AREA ||area_number.181||, COMGROUP=_ZN5_PLOTIdE3AddEPddds, LINKORDER=||t._ZN5_PLOTIdE3AddEPddds.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.181||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZN5_PLOTIdE3AddEPddds.clean||
                          DCD      0x00000001

                          AREA ||area_number.182||, COMGROUP=_ZN5_PLOTIdE3AddEPddds, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.182||, ||.ARM.extab||
                  ||.extab._ZN5_PLOTIdE3AddEPddds||
                          DCD      0x810107a7
                          DCD      0x008400b0
000008  0009005c          DCW      0x0009,0x005c
                          DCD      0x00000079
                          RELOC 42, ||t._ZN5_PLOTIdE3AddEPddds||
                          DCD      0xffffffff
000014  00020086          DCW      0x0002,0x0086
                          DCD      0x00000001
                          RELOC 42, ||t._ZN5_PLOTIdE3AddEPddds.clean||
                          DCD      0x00000000

                          AREA ||t._ZN5_PLOTIdE5ClearEv||, COMGROUP=_ZN5_PLOTIdE5ClearEv, CODE, READONLY, ALIGN=1

                  _ZN5_PLOTIdE5ClearEv PROC ; _PLOT<double>::Clear()
;;;96     			
;;;97     		void	Clear(void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
;;;98     			points.clear();
000006  f1040508          ADD      r5,r4,#8
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
000010  4607              MOV      r7,r0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
000018  4606              MOV      r6,r0
00001a  463a              MOV      r2,r7
00001c  4631              MOV      r1,r6
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_ ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::erase(_PLOT<double>::_POINT*, _PLOT<double>::_POINT*)
000024  bf00              NOP      
;;;99     		}
000026  e8bd81f0          POP      {r4-r8,pc}
;;;100    
                          ENDP


                          AREA ||area_number.189||, COMGROUP=_ZN5_PLOTIdE5ClearEv, LINKORDER=||t._ZN5_PLOTIdE5ClearEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.189||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZN5_PLOTIdE5ClearEv||
                          DCD      0x80acb0b0

                          AREA ||i._ZnwjPv||, COMGROUP=_ZnwjPv, CODE, READONLY, ALIGN=1

                  _ZnwjPv PROC ; operator new(unsigned, void*)
;;;89     /* Placement new. */
;;;90     inline void *operator new(std::size_t, void* __ptr) throw() { return __ptr; }
000000  4602              MOV      r2,r0
000002  4608              MOV      r0,r1
000004  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||area_number.196||, COMGROUP=_ZnwjPv, LINKORDER=||i._ZnwjPv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.196||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZnwjPv||
                          DCD      0x00000001

                          AREA ||t._ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j, CODE, READONLY, ALIGN=1

                  _ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j PROC ; std::allocator<_PLOT<double>::_POINT>::deallocate(_PLOT<double>::_POINT*, unsigned)
;;;195    #ifdef _RWSTD_ALLOCATOR        
;;;196        void deallocate (pointer __p, size_type __n)
000000  b570              PUSH     {r4-r6,lr}
;;;197    #else
;;;198        void deallocate (void* __p, size_type __n)
;;;199    #endif   // _RWSTD_ALLOCATOR
;;;200        {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;201            _RW::__rw_deallocate (__p, __n);
000008  2200              MOVS     r2,#0
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZN4__rw15__rw_deallocateEPvji ; __rw::__rw_deallocate(void*, unsigned, int)
;;;202        }
000012  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP


                          AREA ||area_number.203||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j, LINKORDER=||t._ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.203||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSaIN5_PLOTIdE6_POINTEE10deallocateEPS1_j||
                          DCD      0x80aab0b0

                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv, CODE, READONLY, ALIGN=1

                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
;;;353    
;;;354        iterator       end ()         {
000000  4601              MOV      r1,r0
;;;355            return _C_make_iter (_C_finish);
000002  6848              LDR      r0,[r1,#4]
000004  bf00              NOP      
;;;356        }
000006  4770              BX       lr
;;;357    
                          ENDP


                          AREA ||area_number.210||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.210||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv||
                          DCD      0x00000001

                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv, CODE, READONLY, ALIGN=1

                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
;;;345        //
;;;346        iterator       begin ()       {
000000  4601              MOV      r1,r0
;;;347            return _C_make_iter (_C_start);
000002  6808              LDR      r0,[r1,#0]
000004  bf00              NOP      
;;;348        }
000006  4770              BX       lr
;;;349    
                          ENDP


                          AREA ||area_number.217||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.217||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv||
                          DCD      0x00000001

                          AREA ||t._ZN5_PLOTIdED1Ev||, COMGROUP=_ZN5_PLOTIdED1Ev, CODE, READONLY, ALIGN=1

                  _ZN5_PLOTIdED2Ev                  ; Alternate entry point ; _PLOT<double>::~_PLOT__sub_object()
                  _ZN5_PLOTIdED1Ev PROC ; _PLOT<double>::~_PLOT()
;;;60     
;;;61     		~_PLOT() {
;;;62     		};
;;;63     
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  f1040008          ADD      r0,r4,#8
000008  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EED1Ev ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::~vector()
00000c  f1a00408          SUB      r4,r0,#8
000010  4620              MOV      r0,r4
000012  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.224||, COMGROUP=_ZN5_PLOTIdED1Ev, LINKORDER=||t._ZN5_PLOTIdED1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.224||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZN5_PLOTIdED1Ev||
                          DCD      0x80a8b0b0

                          AREA ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv, CODE, READONLY, ALIGN=1

                  _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::size() const
;;;381    
;;;382        size_type size ()     const {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;383            return size_type(end() - begin());
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end() const
00000a  4605              MOV      r5,r0
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin() const
000012  1a28              SUBS     r0,r5,r0
000014  210c              MOVS     r1,#0xc
000016  fb90f0f1          SDIV     r0,r0,r1
;;;384        }
00001a  bd70              POP      {r4-r6,pc}
;;;385    
                          ENDP


                          AREA ||area_number.231||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv, LINKORDER=||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.231||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE4sizeEv||
                          DCD      0x80aab0b0

                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj, CODE, READONLY, ALIGN=1

                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::operator [](unsigned)
;;;437        //
;;;438        reference       operator[] (size_type __n) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;439    
;;;440    #ifdef _RWSTD_BOUNDS_CHECKING
;;;441    
;;;442            _RWSTD_REQUIRES (__n < size (),
;;;443                             (_RWSTD_ERROR_OUT_OF_RANGE,
;;;444                              _RWSTD_FUNC ("vector::operator[](size_type)"),
;;;445                              __n, size ()));
;;;446    
;;;447    #endif   // _RWSTD_BOUNDS_CHECKING
;;;448    
;;;449            return *(begin() + __n);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin()
00000c  eb040144          ADD      r1,r4,r4,LSL #1
000010  eb000081          ADD      r0,r0,r1,LSL #2
;;;450    
;;;451        }
000014  bd70              POP      {r4-r6,pc}
;;;452      
                          ENDP


                          AREA ||area_number.238||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.238||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EEixEj||
                          DCD      0x80aab0b0

                          AREA ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv, CODE, READONLY, ALIGN=1

                  _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::capacity() const
;;;396    
;;;397        size_type capacity () const {
000000  4601              MOV      r1,r0
;;;398            return _C_end_of_storage - _C_start;
000002  680a              LDR      r2,[r1,#0]
000004  6888              LDR      r0,[r1,#8]
000006  1a80              SUBS     r0,r0,r2
000008  220c              MOVS     r2,#0xc
00000a  fb90f0f2          SDIV     r0,r0,r2
;;;399        }
00000e  4770              BX       lr
;;;400        
                          ENDP


                          AREA ||area_number.245||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv, LINKORDER=||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.245||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE8capacityEv||
                          DCD      0x00000001

                          AREA ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_, CODE, READONLY, ALIGN=1

                  _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_ PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::erase(_PLOT<double>::_POINT*, _PLOT<double>::_POINT*)
;;;595    
;;;596        iterator erase (iterator __first, iterator __last) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;597            if (!empty ()) {
00000a  4626              MOV      r6,r4
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin() const
000012  4607              MOV      r7,r0
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end() const
00001a  4287              CMP      r7,r0
00001c  d101              BNE      |L251.34|
00001e  2001              MOVS     r0,#1
000020  e000              B        |L251.36|
                  |L251.34|
000022  2000              MOVS     r0,#0
                  |L251.36|
000024  bb20              CBNZ     r0,|L251.112|
;;;598                iterator __i = copy (__last, end(), __first);
000026  4646              MOV      r6,r8
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
00002e  4681              MOV      r9,r0
000030  462f              MOV      r7,r5
000032  e005              B        |L251.64|
                  |L251.52|
000034  e8960007          LDM      r6,{r0-r2}
000038  e8870007          STM      r7,{r0-r2}
00003c  360c              ADDS     r6,r6,#0xc
00003e  370c              ADDS     r7,r7,#0xc
                  |L251.64|
000040  454e              CMP      r6,r9
000042  d1f7              BNE      |L251.52|
000044  46ba              MOV      r10,r7
;;;599                iterator __tmp = end ();
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end()
00004c  4683              MOV      r11,r0
;;;600                _C_destroy(__i, __tmp);
00004e  465a              MOV      r2,r11
000050  4651              MOV      r1,r10
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       _ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE10_C_destroyEPS2_S5_ ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::_C_destroy(_PLOT<double>::_POINT*, _PLOT<double>::_POINT*)
;;;601                _C_finish -= (__last - __first);
000058  eba80005          SUB      r0,r8,r5
00005c  210c              MOVS     r1,#0xc
00005e  fb90f0f1          SDIV     r0,r0,r1
000062  eb000040          ADD      r0,r0,r0,LSL #1
000066  6861              LDR      r1,[r4,#4]
000068  eba10080          SUB      r0,r1,r0,LSL #2
00006c  6060              STR      r0,[r4,#4]
;;;602            }
00006e  bf00              NOP      
                  |L251.112|
;;;603            return __first;
000070  4628              MOV      r0,r5
;;;604        }
000072  e8bd9ff0          POP      {r4-r12,pc}
;;;605    
                          ENDP


                          AREA ||area_number.252||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_, LINKORDER=||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.252||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr1
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_||

                          AREA ||area_number.253||, COMGROUP=_ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.253||, ||.ARM.extab||
                  ||.extab._ZNSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5eraseEPS2_S5_||
                          DCD      0x8101a700
                          DCD      0x8400b0b0
                          DCD      0x00000000

                          AREA ||i._ZN3_LM7RefreshEv||, COMGROUP=_ZN3_LM7RefreshEv, CODE, READONLY, ALIGN=1

                  _ZN3_LM7RefreshEv PROC ; _LM::Refresh()
;;;69     		void 					Increment(int, int);
;;;70     		void 					Refresh(void)		{Increment(0,0);}
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       _ZN3_LM9IncrementEii ; _LM::Increment(int, int)
00000e  bd10              POP      {r4,pc}
;;;71     		void					ChangeOffset(int);
                          ENDP


                          AREA ||area_number.260||, COMGROUP=_ZN3_LM7RefreshEv, LINKORDER=||i._ZN3_LM7RefreshEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.260||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN3_LM7RefreshEv||
                          DCD      0x80a8b0b0

                          AREA ||t._ZNSaIN5_PLOTIdE6_POINTEEC1Ev||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEEC1Ev, CODE, READONLY, ALIGN=1

                  _ZNSaIN5_PLOTIdE6_POINTEEC2Ev                  ; Alternate entry point ; std::allocator<_PLOT<double>::_POINT>::allocator__sub_object()
                  _ZNSaIN5_PLOTIdE6_POINTEEC1Ev PROC ; std::allocator<_PLOT<double>::_POINT>::allocator()
;;;150    
;;;151        allocator () _THROWS (()) { }
;;;152    
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.267||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEEC1Ev, LINKORDER=||t._ZNSaIN5_PLOTIdE6_POINTEEC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.267||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSaIN5_PLOTIdE6_POINTEEC1Ev||
                          DCD      0x00000001

                          AREA ||t._ZNSaIN5_PLOTIdE6_POINTEEC1ERKS2_||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEEC1ERKS2_, CODE, READONLY, ALIGN=1

                  _ZNSaIN5_PLOTIdE6_POINTEEC2ERKS2_                  ; Alternate entry point ; std::allocator<_PLOT<double>::_POINT>::allocator__sub_object(const std::allocator<_PLOT<double>::_POINT>&)
                  _ZNSaIN5_PLOTIdE6_POINTEEC1ERKS2_ PROC ; std::allocator<_PLOT<double>::_POINT>::allocator(const std::allocator<_PLOT<double>::_POINT>&)
;;;152    
;;;153        allocator (const allocator &__rhs) _THROWS (()) {
;;;154            // working around an HP aCC warning 431
;;;155            _RWSTD_UNUSED (__rhs);
;;;156        }
;;;157    
000000  4770              BX       lr
                          ENDP


                          AREA ||area_number.274||, COMGROUP=_ZNSaIN5_PLOTIdE6_POINTEEC1ERKS2_, LINKORDER=||t._ZNSaIN5_PLOTIdE6_POINTEEC1ERKS2_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.274||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNSaIN5_PLOTIdE6_POINTEEC1ERKS2_||
                          DCD      0x00000001

                          AREA ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv, CODE, READONLY, ALIGN=1

                  _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::begin() const
;;;349    
;;;350        const_iterator begin () const {
000000  4601              MOV      r1,r0
;;;351            return _C_make_iter (_C_start);
000002  6808              LDR      r0,[r1,#0]
000004  bf00              NOP      
;;;352        }
000006  4770              BX       lr
;;;353    
                          ENDP


                          AREA ||area_number.281||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv, LINKORDER=||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.281||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE5beginEv||
                          DCD      0x00000001

                          AREA ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv, CODE, READONLY, ALIGN=1

                  _ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv PROC ; std::vector<_PLOT<double>::_POINT, std::allocator<_PLOT<double>::_POINT>>::end() const
;;;357    
;;;358        const_iterator end ()   const {
000000  4601              MOV      r1,r0
;;;359            return _C_make_iter (_C_finish);
000002  6848              LDR      r0,[r1,#4]
000004  bf00              NOP      
;;;360        }
000006  4770              BX       lr
;;;361        
                          ENDP


                          AREA ||area_number.288||, COMGROUP=_ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv, LINKORDER=||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.288||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._ZNKSt6vectorIN5_PLOTIdE6_POINTESaIS2_EE3endEv||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "Source\\lm.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_lm_cpp_a6e1da08___Z7__REV16j|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_lm_cpp_a6e1da08___Z7__REV16j| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_lm_cpp_a6e1da08___Z7__REVSHi|
#line 128
|__asm___6_lm_cpp_a6e1da08___Z7__REVSHi| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
