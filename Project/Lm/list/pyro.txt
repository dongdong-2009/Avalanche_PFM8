; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave --exceptions -o.\output\pyro.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\pyro.d --cpu=Cortex-M3 --apcs=interwork//ropi -O0 --diag_suppress=9931 -I.\Include -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32F4-Discovery -I..\lib\inc -I..\..\Utilities\FatFs_R0_10b\src -I..\..\Utilities\MP3 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\..\..\Desktop\rapidjson-master\include -IC:\Users\MOCNIK\Documents\stm32\Project\Lm\RTE -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7\Device\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7 -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F2XX -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 -D__IOC_V2__ --omf_browse=.\output\pyro.crf Source\pyro.cpp]
                          THUMB

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;224    /*******************************************************************************/
;;;225    void	TIM2_IRQHandler(void) {
000000  b510              PUSH     {r4,lr}
;;;226    			if (TIM_GetITStatus(TIM2,TIM_IT_Update) != RESET) {
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b140              CBZ      r0,|L1.30|
;;;227    				TIM_ClearITPendingBit(TIM2,TIM_IT_Update);
00000c  2101              MOVS     r1,#1
00000e  0788              LSLS     r0,r1,#30
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;228    				me->ISR(NULL);
000014  2100              MOVS     r1,#0
000016  4802              LDR      r0,|L1.32|
000018  6800              LDR      r0,[r0,#0]  ; me
00001a  f7fffffe          BL       _ZN5_PYRO3ISREPS_ ; _PYRO::ISR(_PYRO*)
                  |L1.30|
;;;229    				}
;;;230    			}
00001e  bd10              POP      {r4,pc}
;;;231    }
                          ENDP

                  |L1.32|
                          DCD      ||me||

                          AREA ||i._ZN5_PYRO10initFilterEv||, CODE, READONLY, ALIGN=1

                  _ZN5_PYRO10initFilterEv PROC ; _PYRO::initFilter()
;;;160    *******************************************************************************/
;;;161    void	_PYRO::initFilter() {
000000  f5007120          ADD      r1,r0,#0x280
;;;162    			memset (&S1,0, sizeof(arm_biquad_casd_df1_inst_f32));
000004  2200              MOVS     r2,#0
000006  668a              STR      r2,[r1,#0x68]
000008  66ca              STR      r2,[r1,#0x6c]
00000a  670a              STR      r2,[r1,#0x70]
;;;163    			nsamples=0;
00000c  2100              MOVS     r1,#0
00000e  6101              STR      r1,[r0,#0x10]
;;;164    }
000010  4770              BX       lr
;;;165    /*******************************************************************************
                          ENDP


                          AREA ||i._ZN5_PYRO11printFilterEv||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  _ZN5_PYRO11printFilterEv PROC ; _PYRO::printFilter()
;;;170    *******************************************************************************/
;;;171    void	_PYRO::printFilter() {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  4682              MOV      r10,r0
;;;172    			for(int i=0; i<S1.numStages; ++i)
000008  f04f0b00          MOV      r11,#0
00000c  e046              B        |L3.156|
                  |L3.14|
;;;173    				printf("\r\n+f %f,%f,%f,%f,%f",iirCoeffs32[5*i],iirCoeffs32[5*i+1],iirCoeffs32[5*i+2],iirCoeffs32[5*i+3],iirCoeffs32[5*i+4]);
00000e  eb0b018b          ADD      r1,r11,r11,LSL #2
000012  1d09              ADDS     r1,r1,#4
000014  f10a0214          ADD      r2,r10,#0x14
000018  f8520021          LDR      r0,[r2,r1,LSL #2]
00001c  f7fffffe          BL       __aeabi_f2d
000020  4604              MOV      r4,r0
000022  460d              MOV      r5,r1
000024  eb0b018b          ADD      r1,r11,r11,LSL #2
000028  1cc9              ADDS     r1,r1,#3
00002a  f10a0214          ADD      r2,r10,#0x14
00002e  f8520021          LDR      r0,[r2,r1,LSL #2]
000032  f7fffffe          BL       __aeabi_f2d
000036  4606              MOV      r6,r0
000038  460f              MOV      r7,r1
00003a  eb0b018b          ADD      r1,r11,r11,LSL #2
00003e  1c89              ADDS     r1,r1,#2
000040  f10a0214          ADD      r2,r10,#0x14
000044  f8520021          LDR      r0,[r2,r1,LSL #2]
000048  f7fffffe          BL       __aeabi_f2d
00004c  4680              MOV      r8,r0
00004e  4689              MOV      r9,r1
000050  eb0b018b          ADD      r1,r11,r11,LSL #2
000054  1c49              ADDS     r1,r1,#1
000056  f10a0214          ADD      r2,r10,#0x14
00005a  f8520021          LDR      r0,[r2,r1,LSL #2]
00005e  f7fffffe          BL       __aeabi_f2d
000062  eb0b028b          ADD      r2,r11,r11,LSL #2
000066  e9cd010a          STRD     r0,r1,[sp,#0x28]
00006a  f10a0114          ADD      r1,r10,#0x14
00006e  f8510022          LDR      r0,[r1,r2,LSL #2]
000072  f7fffffe          BL       __aeabi_f2d
000076  e9cd8902          STRD     r8,r9,[sp,#8]
00007a  e9cd6704          STRD     r6,r7,[sp,#0x10]
00007e  e9cd4506          STRD     r4,r5,[sp,#0x18]
000082  e9cd0108          STRD     r0,r1,[sp,#0x20]
000086  e9dd010a          LDRD     r0,r1,[sp,#0x28]
00008a  e9cd0100          STRD     r0,r1,[sp,#0]
00008e  a007              ADR      r0,|L3.172|
000090  e9dd2308          LDRD     r2,r3,[sp,#0x20]
000094  f7fffffe          BL       __2printf
000098  f10b0b01          ADD      r11,r11,#1            ;172
                  |L3.156|
00009c  f8da02e8          LDR      r0,[r10,#0x2e8]       ;172
0000a0  4558              CMP      r0,r11                ;172
0000a2  d8b4              BHI      |L3.14|
;;;174    }
0000a4  b00d              ADD      sp,sp,#0x34
0000a6  e8bd8ff0          POP      {r4-r11,pc}
;;;175    /*******************************************************************************
                          ENDP

0000aa  0000              DCW      0x0000
                  |L3.172|
0000ac  0d0a2b66          DCB      "\r\n+f %f,%f,%f,%f,%f",0
0000b0  2025662c
0000b4  25662c25
0000b8  662c2566
0000bc  2c256600

                          AREA ||i._ZN5_PYRO12LoadSettingsEPSt6__FILE||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  _ZN5_PYRO12LoadSettingsEPSt6__FILE PROC ; _PYRO::LoadSettings(std::__FILE*)
;;;129    	*/
;;;130    void	_PYRO::LoadSettings(FILE *f) {
000000  b530              PUSH     {r4,r5,lr}
000002  b0a1              SUB      sp,sp,#0x84
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;131    char	c[128];
;;;132    			fgets(c,sizeof(c),f);
000008  4622              MOV      r2,r4
00000a  2180              MOVS     r1,#0x80
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       fgets
;;;133    			sscanf(c,"%d",&period);
000012  f5057243          ADD      r2,r5,#0x30c
000016  a103              ADR      r1,|L4.36|
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       __0sscanf
;;;134    }
00001e  b021              ADD      sp,sp,#0x84
000020  bd30              POP      {r4,r5,pc}
;;;135    /*******************************************************************************/
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
000024  256400            DCB      "%d",0
000027  00                DCB      0

                          AREA ||i._ZN5_PYRO12SaveSettingsEPSt6__FILE||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _ZN5_PYRO12SaveSettingsEPSt6__FILE PROC ; _PYRO::SaveSettings(std::__FILE*)
;;;140    	*/
;;;141    void	_PYRO::SaveSettings(FILE *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;142    			fprintf(f,"%5d                   /.. pyro\r\n",period);
000006  a103              ADR      r1,|L5.20|
000008  4628              MOV      r0,r5
00000a  f8d4230c          LDR      r2,[r4,#0x30c]
00000e  f7fffffe          BL       __2fprintf
;;;143    }
000012  bd70              POP      {r4-r6,pc}
;;;144    /*******************************************************************************
                          ENDP

                  |L5.20|
000014  25356420          DCB      "%5d                   /.. pyro\r\n",0
000018  20202020
00001c  20202020
000020  20202020
000024  20202020
000028  20202f2e
00002c  2e207079
000030  726f0d0a
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i._ZN5_PYRO3ISREPS_||, CODE, READONLY, ALIGN=2

                  _ZN5_PYRO3ISREPS_ PROC ; _PYRO::ISR(_PYRO*)
;;;30     
;;;31     void	_PYRO::ISR(_PYRO *p) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;32     			if(p) {																						// klic za prijavo instance
000006  b155              CBZ      r5,|L6.30|
;;;33     				me=p;
000008  483e              LDR      r0,|L6.260|
00000a  6005              STR      r5,[r0,#0]  ; me
;;;34     				me->buffer=_buffer_init(3*1000*sizeof(short));
00000c  f2417070          MOV      r0,#0x1770
000010  f7fffffe          BL       _buffer_init
000014  493b              LDR      r1,|L6.260|
000016  6809              LDR      r1,[r1,#0]  ; me
000018  f8c10300          STR      r0,[r1,#0x300]
00001c  e019              B        |L6.82|
                  |L6.30|
;;;35     			} else																						// klic iz ISR, instanca in buffer morata bit ze formirana 																							
;;;36     				if(nbits++) {
00001e  6861              LDR      r1,[r4,#4]
000020  1c48              ADDS     r0,r1,#1
000022  6060              STR      r0,[r4,#4]
000024  b189              CBZ      r1,|L6.74|
;;;37     					temp = temp<<1;		
000026  68a0              LDR      r0,[r4,#8]
000028  0040              LSLS     r0,r0,#1
00002a  60a0              STR      r0,[r4,#8]
;;;38     					if(GPIO_ReadInputDataBit(PYRO_PORT,PYRO_BIT)==SET)
00002c  f44f4180          MOV      r1,#0x4000
000030  4835              LDR      r0,|L6.264|
000032  f7fffffe          BL       GPIO_ReadInputDataBit
000036  2801              CMP      r0,#1
000038  d103              BNE      |L6.66|
;;;39     						temp |= 1;
00003a  68a0              LDR      r0,[r4,#8]
00003c  f0400001          ORR      r0,r0,#1
000040  60a0              STR      r0,[r4,#8]
                  |L6.66|
;;;40     						TIM2->ARR=_Ts-1;
000042  2009              MOVS     r0,#9
000044  0781              LSLS     r1,r0,#30
000046  62c8              STR      r0,[r1,#0x2c]
000048  e003              B        |L6.82|
                  |L6.74|
;;;41     					} else
;;;42     						TIM2->ARR=1000-(_MAXBITS-1)*_Ts-1;
00004a  f24020b1          MOV      r0,#0x2b1
00004e  0781              LSLS     r1,r0,#30
000050  62c8              STR      r0,[r1,#0x2c]
                  |L6.82|
;;;43     					
;;;44     					PYRO_PORT->BSRRH   =  PYRO_BIT;								// low
000052  f44f4080          MOV      r0,#0x4000
000056  492c              LDR      r1,|L6.264|
000058  311a              ADDS     r1,r1,#0x1a
00005a  8008              STRH     r0,[r1,#0]
;;;45     					PYRO_PORT->OTYPER	&= ~PYRO_BIT;								// PP
00005c  482a              LDR      r0,|L6.264|
00005e  1d00              ADDS     r0,r0,#4
000060  6800              LDR      r0,[r0,#0]
000062  f4204080          BIC      r0,r0,#0x4000
000066  4928              LDR      r1,|L6.264|
000068  1d09              ADDS     r1,r1,#4
00006a  6008              STR      r0,[r1,#0]
;;;46     					PYRO_PORT->BSRRL   =  PYRO_BIT;								// high
00006c  f44f4080          MOV      r0,#0x4000
000070  4925              LDR      r1,|L6.264|
000072  3118              ADDS     r1,r1,#0x18
000074  8008              STRH     r0,[r1,#0]
;;;47     					PYRO_PORT->OTYPER |=  PYRO_BIT;								// OD
000076  4824              LDR      r0,|L6.264|
000078  1d00              ADDS     r0,r0,#4
00007a  6800              LDR      r0,[r0,#0]
00007c  f4404080          ORR      r0,r0,#0x4000
000080  4921              LDR      r1,|L6.264|
000082  1d09              ADDS     r1,r1,#4
000084  6008              STR      r0,[r1,#0]
;;;48     
;;;49     					if(nbits > _MAXBITS) {
000086  6860              LDR      r0,[r4,#4]
000088  2820              CMP      r0,#0x20
00008a  dd39              BLE      |L6.256|
;;;50     						count += _To;							
00008c  68e0              LDR      r0,[r4,#0xc]
00008e  300a              ADDS     r0,r0,#0xa
000090  60e0              STR      r0,[r4,#0xc]
;;;51     						if(enabled && count >= period) {
000092  f8940308          LDRB     r0,[r4,#0x308]
000096  b358              CBZ      r0,|L6.240|
000098  f8d4130c          LDR      r1,[r4,#0x30c]
00009c  68e0              LDR      r0,[r4,#0xc]
00009e  4288              CMP      r0,r1
0000a0  db26              BLT      |L6.240|
;;;52     							count=0;
0000a2  2000              MOVS     r0,#0
0000a4  60e0              STR      r0,[r4,#0xc]
;;;53     							short i=__time__ - sync;
0000a6  f8b40304          LDRH     r0,[r4,#0x304]
0000aa  4918              LDR      r1,|L6.268|
0000ac  6809              LDR      r1,[r1,#0]  ; __time__
0000ae  1a08              SUBS     r0,r1,r0
0000b0  b200              SXTH     r0,r0
0000b2  9000              STR      r0,[sp,#0]
;;;54     							_buffer_push(buffer,&i,sizeof(short));
0000b4  2202              MOVS     r2,#2
0000b6  4669              MOV      r1,sp
0000b8  f8d40300          LDR      r0,[r4,#0x300]
0000bc  f7fffffe          BL       _buffer_push
;;;55     							i=temp &  0x3fff;
0000c0  8920              LDRH     r0,[r4,#8]
0000c2  f3c0000d          UBFX     r0,r0,#0,#14
0000c6  9000              STR      r0,[sp,#0]
;;;56     							_buffer_push(buffer,&i,sizeof(short));
0000c8  2202              MOVS     r2,#2
0000ca  4669              MOV      r1,sp
0000cc  f8d40300          LDR      r0,[r4,#0x300]
0000d0  f7fffffe          BL       _buffer_push
;;;57     							i=(short)((temp >> 14) - 0x1000);
0000d4  f44f5180          MOV      r1,#0x1000
0000d8  68a0              LDR      r0,[r4,#8]
0000da  ebc130a0          RSB      r0,r1,r0,ASR #14
0000de  b200              SXTH     r0,r0
0000e0  9000              STR      r0,[sp,#0]
;;;58     							_buffer_push(buffer,&i,sizeof(short));
0000e2  2202              MOVS     r2,#2
0000e4  4669              MOV      r1,sp
0000e6  f8d40300          LDR      r0,[r4,#0x300]
0000ea  f7fffffe          BL       _buffer_push
;;;59                 }
0000ee  bf00              NOP      
                  |L6.240|
;;;60     						temp=nbits=0;
0000f0  2000              MOVS     r0,#0
0000f2  6060              STR      r0,[r4,#4]
0000f4  60a0              STR      r0,[r4,#8]
;;;61     						TIM2->ARR=1000*(_To-1)-1;
0000f6  f2423027          MOV      r0,#0x2327
0000fa  f04f4180          MOV      r1,#0x40000000
0000fe  62c8              STR      r0,[r1,#0x2c]
                  |L6.256|
;;;62     					}
;;;63     		}
000100  bd38              POP      {r3-r5,pc}
;;;64     /*******************************************************************************
                          ENDP

000102  0000              DCW      0x0000
                  |L6.260|
                          DCD      ||me||
                  |L6.264|
                          DCD      0x40020400
                  |L6.268|
                          DCD      __time__

                          AREA ||i._ZN5_PYRO9IncrementEii||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _ZN5_PYRO9IncrementEii PROC ; _PYRO::Increment(int, int)
;;;149    *******************************************************************************/
;;;150    int		_PYRO::Increment(int a, int b) {	
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;151    			period 		= __min(__max(10,period+10*a),2000);	
000008  210a              MOVS     r1,#0xa
00000a  f8d4030c          LDR      r0,[r4,#0x30c]
00000e  fb010005          MLA      r0,r1,r5,r0
000012  280a              CMP      r0,#0xa
000014  da01              BGE      |L7.26|
000016  200a              MOVS     r0,#0xa
000018  e004              B        |L7.36|
                  |L7.26|
00001a  210a              MOVS     r1,#0xa
00001c  f8d4030c          LDR      r0,[r4,#0x30c]
000020  fb010005          MLA      r0,r1,r5,r0
                  |L7.36|
000024  f5b06ffa          CMP      r0,#0x7d0
000028  da0e              BGE      |L7.72|
00002a  210a              MOVS     r1,#0xa
00002c  f8d4030c          LDR      r0,[r4,#0x30c]
000030  fb010005          MLA      r0,r1,r5,r0
000034  280a              CMP      r0,#0xa
000036  da01              BGE      |L7.60|
000038  200a              MOVS     r0,#0xa
00003a  e007              B        |L7.76|
                  |L7.60|
00003c  210a              MOVS     r1,#0xa
00003e  f8d4030c          LDR      r0,[r4,#0x30c]
000042  fb010005          MLA      r0,r1,r5,r0
000046  e001              B        |L7.76|
                  |L7.72|
000048  f44f60fa          MOV      r0,#0x7d0
                  |L7.76|
00004c  f8c4030c          STR      r0,[r4,#0x30c]
;;;152    			printf("\r:thermopile  %3d",period);		
000050  a003              ADR      r0,|L7.96|
000052  f8d4130c          LDR      r1,[r4,#0x30c]
000056  f7fffffe          BL       __2printf
;;;153    			return period;
00005a  f8d4030c          LDR      r0,[r4,#0x30c]
;;;154    }
00005e  bd70              POP      {r4-r6,pc}
;;;155    /*******************************************************************************
                          ENDP

                  |L7.96|
000060  0d3a7468          DCB      "\r:thermopile  %3d",0
000064  65726d6f
000068  70696c65
00006c  20202533
000070  6400    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i._ZN5_PYRO9addFilterEPc||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_real
                  _ZN5_PYRO9addFilterEPc PROC ; _PYRO::addFilter(char*)
;;;180    *******************************************************************************/
;;;181    void	_PYRO::addFilter(char *c) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;182    			int	i=S1.numStages;
000006  f8d452e8          LDR      r5,[r4,#0x2e8]
;;;183    			arm_biquad_cascade_df1_init_f32(&S1,i+1,iirCoeffs32,iirStateF32);
00000a  1c68              ADDS     r0,r5,#1
00000c  b2c1              UXTB     r1,r0
00000e  f50473a8          ADD      r3,r4,#0x150
000012  f1040214          ADD      r2,r4,#0x14
000016  f504703a          ADD      r0,r4,#0x2e8
00001a  f7fffffe          BL       arm_biquad_cascade_df1_init_f32
;;;184    			sscanf(c,"%f,%f,%f,%f,%f",&iirCoeffs32[5*i],&iirCoeffs32[5*i+1],&iirCoeffs32[5*i+2],&iirCoeffs32[5*i+3],&iirCoeffs32[5*i+4]);
00001e  eb050085          ADD      r0,r5,r5,LSL #2
000022  1d00              ADDS     r0,r0,#4
000024  f1040114          ADD      r1,r4,#0x14
000028  eb010080          ADD      r0,r1,r0,LSL #2
00002c  eb050185          ADD      r1,r5,r5,LSL #2
000030  1cc9              ADDS     r1,r1,#3
000032  f1040214          ADD      r2,r4,#0x14
000036  eb020181          ADD      r1,r2,r1,LSL #2
00003a  eb050285          ADD      r2,r5,r5,LSL #2
00003e  1c92              ADDS     r2,r2,#2
000040  f1040314          ADD      r3,r4,#0x14
000044  eb030282          ADD      r2,r3,r2,LSL #2
000048  e9cd2100          STRD     r2,r1,[sp,#0]
00004c  9002              STR      r0,[sp,#8]
00004e  eb050085          ADD      r0,r5,r5,LSL #2
000052  1c40              ADDS     r0,r0,#1
000054  4619              MOV      r1,r3
000056  eb010380          ADD      r3,r1,r0,LSL #2
00005a  eb050185          ADD      r1,r5,r5,LSL #2
00005e  f1040014          ADD      r0,r4,#0x14
000062  eb000281          ADD      r2,r0,r1,LSL #2
000066  a10c              ADR      r1,|L8.152|
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       __0sscanf
;;;185    			memset(iirStateF32,0,++i*sizeof(float32_t));
00006e  1c68              ADDS     r0,r5,#1
000070  4605              MOV      r5,r0
000072  0081              LSLS     r1,r0,#2
000074  f50470a8          ADD      r0,r4,#0x150
000078  f7fffffe          BL       __aeabi_memclr4
;;;186    			memset(in,0,_BLOCKSIZE*sizeof(float32_t));
00007c  2120              MOVS     r1,#0x20
00007e  f504702a          ADD      r0,r4,#0x2a8
000082  f7fffffe          BL       __aeabi_memclr4
;;;187    			memset(out,0,_BLOCKSIZE*sizeof(float32_t));
000086  2120              MOVS     r1,#0x20
000088  f5047032          ADD      r0,r4,#0x2c8
00008c  f7fffffe          BL       __aeabi_memclr4
;;;188    			nsamples=0;
000090  2000              MOVS     r0,#0
000092  6120              STR      r0,[r4,#0x10]
;;;189    }
000094  bdfe              POP      {r1-r7,pc}
;;;190    /*******************************************************************************
                          ENDP

000096  0000              DCW      0x0000
                  |L8.152|
000098  25662c25          DCB      "%f,%f,%f,%f,%f",0
00009c  662c2566
0000a0  2c25662c
0000a4  256600  
0000a7  00                DCB      0

                          AREA ||i._ZN5_PYRO9addSampleEi||, CODE, READONLY, ALIGN=1

                  _ZN5_PYRO9addSampleEi PROC ; _PYRO::addSample(int)
;;;195    *******************************************************************************/
;;;196    int		_PYRO::addSample(int i) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;197    			in[nsamples]=i;			
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       __aeabi_i2f
00000c  f504712a          ADD      r1,r4,#0x2a8
000010  6922              LDR      r2,[r4,#0x10]
000012  f8410022          STR      r0,[r1,r2,LSL #2]
;;;198    			i=out[nsamples++];					
000016  6922              LDR      r2,[r4,#0x10]
000018  1c51              ADDS     r1,r2,#1
00001a  6121              STR      r1,[r4,#0x10]
00001c  f5047132          ADD      r1,r4,#0x2c8
000020  f8510022          LDR      r0,[r1,r2,LSL #2]
000024  f7fffffe          BL       __aeabi_f2iz
000028  4605              MOV      r5,r0
;;;199    			if(nsamples==_BLOCKSIZE) {
00002a  6920              LDR      r0,[r4,#0x10]
00002c  2808              CMP      r0,#8
00002e  d115              BNE      |L9.92|
;;;200    				nsamples=0;
000030  2000              MOVS     r0,#0
000032  6120              STR      r0,[r4,#0x10]
;;;201    				if(S1.numStages > 0)
000034  f8d402e8          LDR      r0,[r4,#0x2e8]
000038  b148              CBZ      r0,|L9.78|
;;;202    					arm_biquad_cascade_df1_f32(&S1, in, out, _BLOCKSIZE);
00003a  2308              MOVS     r3,#8
00003c  f5047232          ADD      r2,r4,#0x2c8
000040  f504712a          ADD      r1,r4,#0x2a8
000044  f504703a          ADD      r0,r4,#0x2e8
000048  f7fffffe          BL       arm_biquad_cascade_df1_f32
00004c  e006              B        |L9.92|
                  |L9.78|
;;;203    				else
;;;204    					memcpy(out,in,sizeof(out));
00004e  2220              MOVS     r2,#0x20
000050  f504712a          ADD      r1,r4,#0x2a8
000054  f5047032          ADD      r0,r4,#0x2c8
000058  f7fffffe          BL       __aeabi_memcpy4
                  |L9.92|
;;;205    //				int m,n;
;;;206    //				for(m=n=0; n<_BLOCKSIZE; ++n)
;;;207    //					m += out[n];
;;;208    //				m /=_BLOCKSIZE;
;;;209    //				for(int n=0; n<_BLOCKSIZE; ++n)
;;;210    //					out[n]=m;
;;;211    			}
;;;212    			return i;
00005c  4628              MOV      r0,r5
;;;213    }
00005e  bd70              POP      {r4-r6,pc}
;;;214    
                          ENDP


                          AREA ||i._ZN5_PYROC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN5_PYROC2Ev                  ; Alternate entry point ; _PYRO::_PYRO__sub_object()
                  _ZN5_PYROC1Ev PROC ; _PYRO::_PYRO()
;;;69     *******************************************************************************/
;;;70     _PYRO::_PYRO() {	
;;;71           io=_stdio(NULL);
;;;72           _stdio(io);
;;;73     			nbits=temp=count=nsamples=0;
;;;74     			period=10;
;;;75     			sync=0;
;;;76     			enabled=false;
;;;77     			S1.numStages=0;
;;;78     			ISR(this);
;;;79     	
;;;80     GPIO_InitTypeDef					
;;;81     			GPIO_InitStructure;
;;;82     			GPIO_StructInit(&GPIO_InitStructure);
;;;83     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;84     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;85     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
;;;86     			GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
;;;87     			GPIO_InitStructure.GPIO_Pin = PYRO_BIT;
;;;88     			GPIO_Init(PYRO_PORT, &GPIO_InitStructure);
;;;89     			GPIO_SetBits(PYRO_PORT,PYRO_BIT);
;;;90     
;;;91     			TIM_TimeBaseInitTypeDef TIM;
;;;92     			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
;;;93     			TIM_TimeBaseStructInit(&TIM);
;;;94     			TIM.TIM_Prescaler = (SystemCoreClock/2000000)-1;
;;;95     			TIM.TIM_Period = 1000;
;;;96     			TIM.TIM_ClockDivision = 0;
;;;97     			TIM.TIM_CounterMode = TIM_CounterMode_Up;
;;;98     			TIM_TimeBaseInit(TIM2,&TIM);
;;;99     			TIM_ARRPreloadConfig(TIM2,DISABLE);
;;;100    			TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE);
;;;101    			NVIC_EnableIRQ(TIM2_IRQn);
;;;102    			TIM_Cmd(TIM2,ENABLE);
;;;103    
;;;104    			memset (&S2,0, sizeof(arm_fir_instance_f32));
;;;105    			arm_fir_init_f32(&S2, _MAX_TAPS, firCoeffs32, firStateF32, _BLOCKSIZE);
;;;106    			memset(firStateF32,0,sizeof(firStateF32));
;;;107    			memset(in,0,sizeof(in));
;;;108    			memset(out,0,sizeof(out));
;;;109    			
;;;110    			for(int i=0; i< _MAX_TAPS; ++i)
;;;111    				firCoeffs32[i]=1.0/_MAX_TAPS;
;;;112    }
;;;113    /*******************************************************************************
000000  b510              PUSH     {r4,lr}
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       _stdio
00000c  6020              STR      r0,[r4,#0]
00000e  6820              LDR      r0,[r4,#0]
000010  f7fffffe          BL       _stdio
000014  2000              MOVS     r0,#0
000016  6120              STR      r0,[r4,#0x10]
000018  60e0              STR      r0,[r4,#0xc]
00001a  60a0              STR      r0,[r4,#8]
00001c  6060              STR      r0,[r4,#4]
00001e  200a              MOVS     r0,#0xa
000020  f8c4030c          STR      r0,[r4,#0x30c]
000024  2000              MOVS     r0,#0
000026  f8c40304          STR      r0,[r4,#0x304]
00002a  f8840308          STRB     r0,[r4,#0x308]
00002e  f8c402e8          STR      r0,[r4,#0x2e8]
000032  4621              MOV      r1,r4
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       _ZN5_PYRO3ISREPS_ ; _PYRO::ISR(_PYRO*)
00003a  a804              ADD      r0,sp,#0x10
00003c  f7fffffe          BL       GPIO_StructInit
000040  2001              MOVS     r0,#1
000042  f88d0014          STRB     r0,[sp,#0x14]
000046  2003              MOVS     r0,#3
000048  f88d0015          STRB     r0,[sp,#0x15]
00004c  2002              MOVS     r0,#2
00004e  f88d0017          STRB     r0,[sp,#0x17]
000052  2001              MOVS     r0,#1
000054  f88d0016          STRB     r0,[sp,#0x16]
000058  0380              LSLS     r0,r0,#14
00005a  9004              STR      r0,[sp,#0x10]
00005c  a904              ADD      r1,sp,#0x10
00005e  4835              LDR      r0,|L10.308|
000060  f7fffffe          BL       GPIO_Init
000064  f44f4180          MOV      r1,#0x4000
000068  4832              LDR      r0,|L10.308|
00006a  f7fffffe          BL       GPIO_SetBits
00006e  2101              MOVS     r1,#1
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       RCC_APB1PeriphClockCmd
000076  a801              ADD      r0,sp,#4
000078  f7fffffe          BL       TIM_TimeBaseStructInit
00007c  482e              LDR      r0,|L10.312|
00007e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000080  492e              LDR      r1,|L10.316|
000082  fbb0f0f1          UDIV     r0,r0,r1
000086  1e40              SUBS     r0,r0,#1
000088  b280              UXTH     r0,r0
00008a  f8ad0004          STRH     r0,[sp,#4]
00008e  f44f707a          MOV      r0,#0x3e8
000092  9002              STR      r0,[sp,#8]
000094  2000              MOVS     r0,#0
000096  f8ad000c          STRH     r0,[sp,#0xc]
00009a  f8ad0006          STRH     r0,[sp,#6]
00009e  a901              ADD      r1,sp,#4
0000a0  f04f4080          MOV      r0,#0x40000000
0000a4  f7fffffe          BL       TIM_TimeBaseInit
0000a8  2100              MOVS     r1,#0
0000aa  f04f4080          MOV      r0,#0x40000000
0000ae  f7fffffe          BL       TIM_ARRPreloadConfig
0000b2  2201              MOVS     r2,#1
0000b4  4611              MOV      r1,r2
0000b6  0790              LSLS     r0,r2,#30
0000b8  f7fffffe          BL       TIM_ITConfig
0000bc  201c              MOVS     r0,#0x1c
0000be  2101              MOVS     r1,#1
0000c0  4081              LSLS     r1,r1,r0
0000c2  0942              LSRS     r2,r0,#5
0000c4  0092              LSLS     r2,r2,#2
0000c6  f10222e0          ADD      r2,r2,#0xe000e000
0000ca  f8c21100          STR      r1,[r2,#0x100]
0000ce  bf00              NOP      
0000d0  2101              MOVS     r1,#1
0000d2  0788              LSLS     r0,r1,#30
0000d4  f7fffffe          BL       TIM_Cmd
0000d8  f5047020          ADD      r0,r4,#0x280
0000dc  2100              MOVS     r1,#0
0000de  6741              STR      r1,[r0,#0x74]
0000e0  6781              STR      r1,[r0,#0x78]
0000e2  67c1              STR      r1,[r0,#0x7c]
0000e4  2008              MOVS     r0,#8
0000e6  f5047306          ADD      r3,r4,#0x218
0000ea  f10402dc          ADD      r2,r4,#0xdc
0000ee  211d              MOVS     r1,#0x1d
0000f0  9000              STR      r0,[sp,#0]
0000f2  f504703d          ADD      r0,r4,#0x2f4
0000f6  f7fffffe          BL       arm_fir_init_f32
0000fa  2190              MOVS     r1,#0x90
0000fc  f5047006          ADD      r0,r4,#0x218
000100  f7fffffe          BL       __aeabi_memclr4
000104  2120              MOVS     r1,#0x20
000106  f504702a          ADD      r0,r4,#0x2a8
00010a  f7fffffe          BL       __aeabi_memclr4
00010e  2120              MOVS     r1,#0x20
000110  f5047032          ADD      r0,r4,#0x2c8
000114  f7fffffe          BL       __aeabi_memclr4
000118  2000              MOVS     r0,#0
00011a  e005              B        |L10.296|
                  |L10.284|
00011c  4a08              LDR      r2,|L10.320|
00011e  f10401dc          ADD      r1,r4,#0xdc
000122  f8412020          STR      r2,[r1,r0,LSL #2]
000126  1c40              ADDS     r0,r0,#1
                  |L10.296|
000128  281d              CMP      r0,#0x1d
00012a  dbf7              BLT      |L10.284|
00012c  4620              MOV      r0,r4
00012e  b006              ADD      sp,sp,#0x18
000130  bd10              POP      {r4,pc}
                          ENDP

000132  0000              DCW      0x0000
                  |L10.308|
                          DCD      0x40020400
                  |L10.312|
                          DCD      SystemCoreClock
                  |L10.316|
                          DCD      0x001e8480
                  |L10.320|
                          DCD      0x3d0d3dcb

                          AREA ||i._ZN5_PYROD1Ev||, CODE, READONLY, ALIGN=2

                  _ZN5_PYROD2Ev                  ; Alternate entry point ; _PYRO::~_PYRO__sub_object()
                  _ZN5_PYROD1Ev PROC ; _PYRO::~_PYRO()
;;;118    *******************************************************************************/
;;;119    _PYRO::~_PYRO() {	
;;;120    			TIM_ITConfig(TIM2,TIM_IT_Update,DISABLE);
;;;121    			NVIC_DisableIRQ(TIM2_IRQn);
;;;122    			_buffer_close(buffer);
;;;123    }
;;;124    /*******************************************************************************/
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  2200              MOVS     r2,#0
000006  2101              MOVS     r1,#1
000008  0788              LSLS     r0,r1,#30
00000a  f7fffffe          BL       TIM_ITConfig
00000e  201c              MOVS     r0,#0x1c
000010  2101              MOVS     r1,#1
000012  4081              LSLS     r1,r1,r0
000014  4a05              LDR      r2,|L11.44|
000016  0943              LSRS     r3,r0,#5
000018  f8421023          STR      r1,[r2,r3,LSL #2]
00001c  bf00              NOP      
00001e  f8d40300          LDR      r0,[r4,#0x300]
000022  f7fffffe          BL       _buffer_close
000026  4620              MOV      r0,r4
000028  bd10              POP      {r4,pc}
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      0xe000e180

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN5_PYRO3ISREPS_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO3ISREPS_||
                          DCD      0x8000a9b0

                          AREA ||area_number.13||, LINKORDER=||i.TIM2_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i.TIM2_IRQHandler||
                          DCD      0x80a8b0b0

                          AREA ||area_number.14||, LINKORDER=||i._ZN5_PYROC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYROC1Ev||
                          DCD      0x8005a8b0

                          AREA ||area_number.15||, LINKORDER=||i._ZN5_PYROD1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYROD1Ev||
                          DCD      0x80a8b0b0

                          AREA ||area_number.16||, LINKORDER=||i._ZN5_PYRO9IncrementEii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO9IncrementEii||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._ZN5_PYRO12LoadSettingsEPSt6__FILE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO12LoadSettingsEPSt6__FILE||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._ZN5_PYRO12SaveSettingsEPSt6__FILE||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO12SaveSettingsEPSt6__FILE||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._ZN5_PYRO10initFilterEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO10initFilterEv||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._ZN5_PYRO9addFilterEPc||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO9addFilterEPc||
                          DCD      0x8002abb0

                          AREA ||area_number.21||, LINKORDER=||i._ZN5_PYRO9addSampleEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO9addSampleEi||
                          DCD      0x80aab0b0

                          AREA ||area_number.22||, LINKORDER=||i._ZN5_PYRO11printFilterEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5_PYRO11printFilterEv||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  ||me||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\pyro.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_pyro_cpp_64f982b9___Z7__REV16j|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_pyro_cpp_64f982b9___Z7__REV16j| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___8_pyro_cpp_64f982b9___Z7__REVSHi|
#line 128
|__asm___8_pyro_cpp_64f982b9___Z7__REVSHi| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
