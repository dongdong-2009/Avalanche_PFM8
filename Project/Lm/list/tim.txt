; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave --exceptions -o.\output\tim.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\tim.d --cpu=Cortex-M3 --apcs=interwork//ropi -O0 --diag_suppress=9931 -I.\Include -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32F4-Discovery -I..\lib\inc -I..\..\Utilities\FatFs_R0_10b\src -I..\..\Utilities\MP3 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\..\..\Desktop\rapidjson-master\include -IC:\Users\MOCNIK\Documents\stm32\Project\Lm\RTE -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7\Device\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32F2xx_DFP\1.0.7 -D__MICROLIB -D__UVISION_VERSION=515 -DSTM32F2XX -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM3 -D__IOC_V2__ --omf_browse=.\output\tim.crf Source\tim.cpp]
                          THUMB

                          AREA ||i._ZN4_TIM3PwmEi||, CODE, READONLY, ALIGN=2

                  _ZN4_TIM3PwmEi PROC ; _TIM::Pwm(int)
;;;205    *******************************************************************************/
;;;206    int		_TIM::Pwm(int tim) {
000000  4602              MOV      r2,r0
;;;207    			switch(tim) {
000002  2908              CMP      r1,#8
000004  d220              BCS      |L1.72|
000006  e8dff001          TBB      [pc,r1]
00000a  0407              DCB      0x04,0x07
00000c  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
000010  171b              DCB      0x17,0x1b
;;;208    				case 0: return TIM1->CCR1;
000012  480f              LDR      r0,|L1.80|
000014  6b40              LDR      r0,[r0,#0x34]
                  |L1.22|
;;;209    				case 1: return TIM1->CCR2;
;;;210    				case 2: return TIM1->CCR3;
;;;211    				case 3: return TIM1->CCR4;
;;;212    				case 4: return TIM8->CCR1;
;;;213    				case 5: return TIM8->CCR2;
;;;214    				case 6: return TIM8->CCR3;
;;;215    				case 7: return TIM8->CCR4;
;;;216    				default:return EOF;
;;;217    			}
;;;218    }
000016  4770              BX       lr
000018  480d              LDR      r0,|L1.80|
00001a  6b80              LDR      r0,[r0,#0x38]         ;209
00001c  e7fb              B        |L1.22|
00001e  480c              LDR      r0,|L1.80|
000020  6bc0              LDR      r0,[r0,#0x3c]         ;210
000022  e7f8              B        |L1.22|
000024  480a              LDR      r0,|L1.80|
000026  6c00              LDR      r0,[r0,#0x40]         ;211
000028  e7f5              B        |L1.22|
00002a  480a              LDR      r0,|L1.84|
00002c  6800              LDR      r0,[r0,#0]            ;212
00002e  e7f2              B        |L1.22|
000030  4808              LDR      r0,|L1.84|
000032  1d00              ADDS     r0,r0,#4              ;213
000034  6800              LDR      r0,[r0,#0]            ;213
000036  e7ee              B        |L1.22|
000038  4806              LDR      r0,|L1.84|
00003a  3008              ADDS     r0,r0,#8              ;214
00003c  6800              LDR      r0,[r0,#0]            ;214
00003e  e7ea              B        |L1.22|
000040  4804              LDR      r0,|L1.84|
000042  300c              ADDS     r0,r0,#0xc            ;215
000044  6800              LDR      r0,[r0,#0]            ;215
000046  e7e6              B        |L1.22|
                  |L1.72|
000048  f04f30ff          MOV      r0,#0xffffffff        ;216
00004c  e7e3              B        |L1.22|
;;;219    /*******************************************************************************
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40010000
                  |L1.84|
                          DCD      0x40010434

                          AREA ||i._ZN4_TIM3PwmEii||, CODE, READONLY, ALIGN=2

                  _ZN4_TIM3PwmEii PROC ; _TIM::Pwm(int, int)
;;;185    *******************************************************************************/
;;;186    int		_TIM::Pwm(int tim, int value ) {
000000  4603              MOV      r3,r0
;;;187    			switch(tim) {
000002  2908              CMP      r1,#8
000004  d220              BCS      |L2.72|
000006  e8dff001          TBB      [pc,r1]
00000a  0407              DCB      0x04,0x07
00000c  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
000010  171b              DCB      0x17,0x1b
;;;188    				case 0: TIM1->CCR1=value; break;
000012  4810              LDR      r0,|L2.84|
000014  6342              STR      r2,[r0,#0x34]
000016  e01a              B        |L2.78|
;;;189    				case 1: TIM1->CCR2=value; break;
000018  480e              LDR      r0,|L2.84|
00001a  6382              STR      r2,[r0,#0x38]
00001c  e017              B        |L2.78|
;;;190    				case 2: TIM1->CCR3=value; break;
00001e  480d              LDR      r0,|L2.84|
000020  63c2              STR      r2,[r0,#0x3c]
000022  e014              B        |L2.78|
;;;191    				case 3: TIM1->CCR4=value; break;
000024  480b              LDR      r0,|L2.84|
000026  6402              STR      r2,[r0,#0x40]
000028  e011              B        |L2.78|
;;;192    				case 4: TIM8->CCR1=value; break;
00002a  480b              LDR      r0,|L2.88|
00002c  6002              STR      r2,[r0,#0]
00002e  e00e              B        |L2.78|
;;;193    				case 5: TIM8->CCR2=value; break;
000030  4809              LDR      r0,|L2.88|
000032  1d00              ADDS     r0,r0,#4
000034  6002              STR      r2,[r0,#0]
000036  e00a              B        |L2.78|
;;;194    				case 6: TIM8->CCR3=value; break;
000038  4807              LDR      r0,|L2.88|
00003a  3008              ADDS     r0,r0,#8
00003c  6002              STR      r2,[r0,#0]
00003e  e006              B        |L2.78|
;;;195    				case 7: TIM8->CCR4=value; break;
000040  4805              LDR      r0,|L2.88|
000042  300c              ADDS     r0,r0,#0xc
000044  6002              STR      r2,[r0,#0]
000046  e002              B        |L2.78|
                  |L2.72|
;;;196    				default:return -1;
000048  f04f30ff          MOV      r0,#0xffffffff
                  |L2.76|
;;;197    			}
;;;198    			return value;
;;;199    }
00004c  4770              BX       lr
                  |L2.78|
00004e  bf00              NOP                            ;188
000050  4610              MOV      r0,r2                 ;198
000052  e7fb              B        |L2.76|
;;;200    /*******************************************************************************
                          ENDP

                  |L2.84|
                          DCD      0x40010000
                  |L2.88|
                          DCD      0x40010434

                          AREA ||i._ZN4_TIM3PwmEiiii||, CODE, READONLY, ALIGN=2

                  _ZN4_TIM3PwmEiiii PROC ; _TIM::Pwm(int, int, int, int)
;;;236    *******************************************************************************/
;;;237    int		_TIM::Pwm(int tim, int value, int i, int j ) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;238    			Pwm(tim, value);
000010  463a              MOV      r2,r7
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _ZN4_TIM3PwmEii ; _TIM::Pwm(int, int)
;;;239    			t1[tim]=__time__ + i;
00001a  4809              LDR      r0,|L3.64|
00001c  6800              LDR      r0,[r0,#0]  ; __time__
00001e  4430              ADD      r0,r0,r6
000020  f8440025          STR      r0,[r4,r5,LSL #2]
;;;240    			t2[tim]=__time__ + j;
000024  4806              LDR      r0,|L3.64|
000026  6800              LDR      r0,[r0,#0]  ; __time__
000028  eb000108          ADD      r1,r0,r8
00002c  f1040020          ADD      r0,r4,#0x20
000030  f8401025          STR      r1,[r0,r5,LSL #2]
;;;241    			return Pwm(tim);
000034  4629              MOV      r1,r5
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       _ZN4_TIM3PwmEi ; _TIM::Pwm(int)
;;;242    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;243    /*******************************************************************************
                          ENDP

                  |L3.64|
                          DCD      __time__

                          AREA ||i._ZN4_TIM4BusyEi||, CODE, READONLY, ALIGN=1

                  _ZN4_TIM4BusyEi PROC ; _TIM::Busy(int)
;;;224    *******************************************************************************/
;;;225    bool	_TIM::Busy(int tim) {
000000  4602              MOV      r2,r0
;;;226    			if(t1[tim] || t2[tim])
000002  f8520021          LDR      r0,[r2,r1,LSL #2]
000006  b920              CBNZ     r0,|L4.18|
000008  f1020020          ADD      r0,r2,#0x20
00000c  f8500021          LDR      r0,[r0,r1,LSL #2]
000010  b108              CBZ      r0,|L4.22|
                  |L4.18|
;;;227    				return true;
000012  2001              MOVS     r0,#1
                  |L4.20|
;;;228    			else
;;;229    				return false;
;;;230    }
000014  4770              BX       lr
                  |L4.22|
000016  2000              MOVS     r0,#0                 ;229
000018  e7fc              B        |L4.20|
;;;231    /*******************************************************************************
                          ENDP


                          AREA ||i._ZN4_TIM4PollEv||, CODE, READONLY, ALIGN=2

                  _ZN4_TIM4PollEv PROC ; _TIM::Poll()
;;;248    *******************************************************************************/
;;;249    void	_TIM::Poll(void) {
000000  b530              PUSH     {r4,r5,lr}
000002  4605              MOV      r5,r0
;;;250    			for(int n=0; n<8; ++n) { 
000004  2400              MOVS     r4,#0
000006  e036              B        |L5.118|
                  |L5.8|
;;;251    				if(t1[n] && __time__ >= t1[n]) {
000008  f8550024          LDR      r0,[r5,r4,LSL #2]
00000c  b300              CBZ      r0,|L5.80|
00000e  f8550024          LDR      r0,[r5,r4,LSL #2]
000012  491a              LDR      r1,|L5.124|
000014  6809              LDR      r1,[r1,#0]  ; __time__
000016  4288              CMP      r0,r1
000018  dc1a              BGT      |L5.80|
;;;252    					t1[n]=0;
00001a  2000              MOVS     r0,#0
00001c  f8450024          STR      r0,[r5,r4,LSL #2]
;;;253    					if(Pwm(n) == _PWon)									// striktno samo na ti dve vrednosti
000020  4621              MOV      r1,r4
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       _ZN4_TIM3PwmEi ; _TIM::Pwm(int)
000028  f5b06fe1          CMP      r0,#0x708
00002c  d105              BNE      |L5.58|
;;;254    						Pwm(n,_PWoff);										// da preskoci prop. ventil !!!
00002e  2200              MOVS     r2,#0
000030  4621              MOV      r1,r4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       _ZN4_TIM3PwmEii ; _TIM::Pwm(int, int)
000038  e00a              B        |L5.80|
                  |L5.58|
;;;255    					else
;;;256    						if(Pwm(n) == _PWoff)
00003a  4621              MOV      r1,r4
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       _ZN4_TIM3PwmEi ; _TIM::Pwm(int)
000042  b928              CBNZ     r0,|L5.80|
;;;257    							Pwm(n,_PWon);
000044  f44f62e1          MOV      r2,#0x708
000048  4621              MOV      r1,r4
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       _ZN4_TIM3PwmEii ; _TIM::Pwm(int, int)
                  |L5.80|
;;;258    				}
;;;259    				if(t2[n] && __time__ >= t2[n]) {
000050  f1050020          ADD      r0,r5,#0x20
000054  f8500024          LDR      r0,[r0,r4,LSL #2]
000058  b160              CBZ      r0,|L5.116|
00005a  f1050020          ADD      r0,r5,#0x20
00005e  f8500024          LDR      r0,[r0,r4,LSL #2]
000062  4906              LDR      r1,|L5.124|
000064  6809              LDR      r1,[r1,#0]  ; __time__
000066  4288              CMP      r0,r1
000068  dc04              BGT      |L5.116|
;;;260    					t2[n]=0;
00006a  2100              MOVS     r1,#0
00006c  f1050020          ADD      r0,r5,#0x20
000070  f8401024          STR      r1,[r0,r4,LSL #2]
                  |L5.116|
000074  1c64              ADDS     r4,r4,#1              ;250
                  |L5.118|
000076  2c08              CMP      r4,#8                 ;250
000078  dbc6              BLT      |L5.8|
;;;261    				}
;;;262    			}		
;;;263    }
00007a  bd30              POP      {r4,r5,pc}
;;;264    
                          ENDP

                  |L5.124|
                          DCD      __time__

                          AREA ||i._ZN4_TIM8InstanceEv||, CODE, READONLY, ALIGN=2

                  _ZN4_TIM8InstanceEv PROC ; _TIM::Instance()
;;;27     /*******************************************************************************/
;;;28     _TIM*	_TIM::Instance() {
000000  b570              PUSH     {r4-r6,lr}
;;;29     	if(me==NULL)
000002  480a              LDR      r0,|L6.44|
000004  6800              LDR      r0,[r0,#0]  ; me
000006  b960              CBNZ     r0,|L6.34|
;;;30     		me=new _TIM();
000008  2600              MOVS     r6,#0
00000a  2040              MOVS     r0,#0x40
00000c  f7fffffe          BL       _Znwj ; operator new(unsigned)
000010  4604              MOV      r4,r0
000012  2601              MOVS     r6,#1
000014  f7fffffe          BL       _ZN4_TIMC1Ev ; _TIM::_TIM()
000018  4604              MOV      r4,r0
00001a  2600              MOVS     r6,#0
00001c  4803              LDR      r0,|L6.44|
00001e  6004              STR      r4,[r0,#0]  ; me
;;;31     	return me;
000020  bf00              NOP      
                  |L6.34|
000022  4802              LDR      r0,|L6.44|
000024  6805              LDR      r5,[r0,#0]  ; me
000026  4628              MOV      r0,r5
;;;32     }
000028  bd70              POP      {r4-r6,pc}
;;;33     /*******************************************************************************
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      ||me||

                          AREA ||i._ZN4_TIM8InstanceEv.clean||, CODE, READONLY, ALIGN=1

000000  b116              CBZ      r6,|L7.8|
000002  4620              MOV      r0,r4
000004  f7fffffe          BL       _ZdlPv ; operator delete (void*)
                  |L7.8|
000008  f7fffffe          BL       __cxa_end_cleanup

                          AREA ||i._ZN4_TIMC1Ev||, CODE, READONLY, ALIGN=2

                  _ZN4_TIMC2Ev                  ; Alternate entry point ; _TIM::_TIM__sub_object()
                  _ZN4_TIMC1Ev PROC ; _TIM::_TIM()
;;;38     *******************************************************************************/
;;;39     _TIM::_TIM() {
;;;40     TIM_TimeBaseInitTypeDef		TIM_TimeBaseStructure;
;;;41     TIM_OCInitTypeDef					TIM_OCInitStructure;
;;;42     TIM_ICInitTypeDef					TIM_ICInitStructure;
;;;43     
;;;44     #ifndef __SIMULATION__
;;;45     GPIO_InitTypeDef					GPIO_InitStructure;
;;;46     // ________________________________________________________________________________
;;;47     // TIM1-TIM8, IGBT pwm outputs
;;;48     
;;;49     			GPIO_StructInit(&GPIO_InitStructure);
;;;50     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
;;;51     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;52     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;53     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;54     
;;;55     			GPIO_PinAFConfig(GPIOE, GPIO_PinSource9,	GPIO_AF_TIM1);
;;;56     			GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_TIM1);
;;;57     			GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_TIM1);
;;;58     			GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_TIM1);
;;;59     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 |	GPIO_Pin_11 |GPIO_Pin_13 |	GPIO_Pin_14 ;
;;;60     			GPIO_Init(GPIOE, &GPIO_InitStructure);
;;;61     
;;;62     			GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);
;;;63     			GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_TIM8);
;;;64     			GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM8);
;;;65     			GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_TIM8);
;;;66     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 |	GPIO_Pin_7 |GPIO_Pin_8 |	GPIO_Pin_9 ;
;;;67     			GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;68     
;;;69     // TIM4, fan && pilot pwm output	
;;;70     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
;;;71     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;72     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;73     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;74     			
;;;75     			GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
;;;76     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13;
;;;77     			GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;78     
;;;79     // TIM3 pump && fan tacho
;;;80     			GPIO_StructInit(&GPIO_InitStructure);
;;;81     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;82     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
;;;83     			
;;;84     			GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
;;;85     			GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM3);
;;;86     			
;;;87     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
;;;88     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;89     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
;;;90     			GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;91     // ________________________________________________________________________________
;;;92     // TIMebase setup
;;;93     #endif
;;;94     			TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
;;;95     			TIM_OCStructInit(&TIM_OCInitStructure);
;;;96     
;;;97     			TIM_TimeBaseStructure.TIM_Prescaler = SystemCoreClock/4000000-1;
;;;98     			TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
;;;99     			TIM_TimeBaseStructure.TIM_RepetitionCounter=1;
;;;100    
;;;101    // TIM 1,8
;;;102    
;;;103    			TIM_TimeBaseStructure.TIM_Period = _PWM_RATE;
;;;104    			TIM_DeInit(TIM1);
;;;105    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
;;;106    			TIM_TimeBaseInit(TIM1,&TIM_TimeBaseStructure);
;;;107    			TIM_DeInit(TIM8);
;;;108    			RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
;;;109    			TIM_TimeBaseInit(TIM8,&TIM_TimeBaseStructure);
;;;110    // TIM3
;;;111    			TIM_DeInit(TIM3);
;;;112    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
;;;113    			
;;;114    			TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
;;;115    			TIM_ICStructInit(&TIM_ICInitStructure);
;;;116    			TIM_TimeBaseStructure.TIM_Prescaler = 60;
;;;117    			TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;118    			TIM_TimeBaseStructure.TIM_Period = 0xffff;
;;;119    			TIM_TimeBaseInit(TIM3,&TIM_TimeBaseStructure);
;;;120    // TIM 4 
;;;121    			TIM_DeInit(TIM4);
;;;122    			RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
;;;123    			
;;;124    			TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
;;;125    			TIM_TimeBaseStructure.TIM_Prescaler = 0;
;;;126    			TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;127    			TIM_TimeBaseStructure.TIM_Period = SystemCoreClock/2/25000;
;;;128    
;;;129    			TIM_TimeBaseInit(TIM4,&TIM_TimeBaseStructure);
;;;130    // ________________________________________________________________________________
;;;131    // Output Compares	TIM1,8
;;;132    			TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;133    			TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;134    			TIM_OCInitStructure.TIM_Pulse=0;
;;;135    			TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;136    
;;;137    			TIM_OC1Init(TIM1, &TIM_OCInitStructure);
;;;138    			TIM_OC1Init(TIM8, &TIM_OCInitStructure);
;;;139    			TIM_OC3Init(TIM1, &TIM_OCInitStructure);
;;;140    			TIM_OC3Init(TIM8, &TIM_OCInitStructure);
;;;141    
;;;142    			TIM_OC2Init(TIM1, &TIM_OCInitStructure);
;;;143    			TIM_OC2Init(TIM8, &TIM_OCInitStructure);
;;;144    			TIM_OC4Init(TIM1, &TIM_OCInitStructure);
;;;145    			TIM_OC4Init(TIM8, &TIM_OCInitStructure);
;;;146    
;;;147    // Input Compares	TIM3, fan && pump tacho
;;;148    			TIM_ICStructInit(&TIM_ICInitStructure);	
;;;149    			TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
;;;150    			TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
;;;151    			TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
;;;152    			TIM_ICInitStructure.TIM_ICFilter = 0;
;;;153    			TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;
;;;154    			TIM_ICInit(TIM3, &TIM_ICInitStructure);
;;;155    			TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;
;;;156    			TIM_ICInit(TIM3, &TIM_ICInitStructure);
;;;157    			
;;;158    //_________________________________________________________________________________
;;;159    // Output Compares	TIM4
;;;160    			TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;161    			TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;162    			TIM_OCInitStructure.TIM_Pulse=0;
;;;163    			TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;164    			TIM_OC1Init(TIM4, &TIM_OCInitStructure);
;;;165    			TIM_OC2Init(TIM4, &TIM_OCInitStructure);
;;;166    // ________________________________________________________________________________
;;;167    // Startup
;;;168    			TIM_CtrlPWMOutputs(TIM1, ENABLE);
;;;169    			TIM_CtrlPWMOutputs(TIM8, ENABLE);
;;;170    			TIM_CtrlPWMOutputs(TIM4, ENABLE);
;;;171    
;;;172    			TIM_Cmd(TIM1,ENABLE);
;;;173    			TIM_Cmd(TIM8,ENABLE);
;;;174    			TIM_Cmd(TIM3,ENABLE);
;;;175    			TIM_Cmd(TIM4,ENABLE);
;;;176    				
;;;177    			memset(t1, 0, sizeof(t1)); 
;;;178    			memset(t2, 0, sizeof(t2)); 
;;;179    }
;;;180    /*******************************************************************************
000000  b510              PUSH     {r4,lr}
000002  b08e              SUB      sp,sp,#0x38
000004  4604              MOV      r4,r0
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       GPIO_StructInit
00000c  2002              MOVS     r0,#2
00000e  f88d000b          STRB     r0,[sp,#0xb]
000012  f88d0008          STRB     r0,[sp,#8]
000016  2000              MOVS     r0,#0
000018  f88d000a          STRB     r0,[sp,#0xa]
00001c  2003              MOVS     r0,#3
00001e  f88d0009          STRB     r0,[sp,#9]
000022  2201              MOVS     r2,#1
000024  2109              MOVS     r1,#9
000026  48a6              LDR      r0,|L8.704|
000028  f7fffffe          BL       GPIO_PinAFConfig
00002c  2201              MOVS     r2,#1
00002e  210b              MOVS     r1,#0xb
000030  48a3              LDR      r0,|L8.704|
000032  f7fffffe          BL       GPIO_PinAFConfig
000036  2201              MOVS     r2,#1
000038  210d              MOVS     r1,#0xd
00003a  48a1              LDR      r0,|L8.704|
00003c  f7fffffe          BL       GPIO_PinAFConfig
000040  2201              MOVS     r2,#1
000042  210e              MOVS     r1,#0xe
000044  489e              LDR      r0,|L8.704|
000046  f7fffffe          BL       GPIO_PinAFConfig
00004a  f44f40d4          MOV      r0,#0x6a00
00004e  9001              STR      r0,[sp,#4]
000050  a901              ADD      r1,sp,#4
000052  489b              LDR      r0,|L8.704|
000054  f7fffffe          BL       GPIO_Init
000058  2203              MOVS     r2,#3
00005a  2106              MOVS     r1,#6
00005c  4899              LDR      r0,|L8.708|
00005e  f7fffffe          BL       GPIO_PinAFConfig
000062  2203              MOVS     r2,#3
000064  2107              MOVS     r1,#7
000066  4897              LDR      r0,|L8.708|
000068  f7fffffe          BL       GPIO_PinAFConfig
00006c  2203              MOVS     r2,#3
00006e  2108              MOVS     r1,#8
000070  4894              LDR      r0,|L8.708|
000072  f7fffffe          BL       GPIO_PinAFConfig
000076  2203              MOVS     r2,#3
000078  2109              MOVS     r1,#9
00007a  4892              LDR      r0,|L8.708|
00007c  f7fffffe          BL       GPIO_PinAFConfig
000080  f44f7070          MOV      r0,#0x3c0
000084  9001              STR      r0,[sp,#4]
000086  a901              ADD      r1,sp,#4
000088  488e              LDR      r0,|L8.708|
00008a  f7fffffe          BL       GPIO_Init
00008e  2001              MOVS     r0,#1
000090  f88d000b          STRB     r0,[sp,#0xb]
000094  2002              MOVS     r0,#2
000096  f88d0008          STRB     r0,[sp,#8]
00009a  2000              MOVS     r0,#0
00009c  f88d000a          STRB     r0,[sp,#0xa]
0000a0  2003              MOVS     r0,#3
0000a2  f88d0009          STRB     r0,[sp,#9]
0000a6  2202              MOVS     r2,#2
0000a8  210c              MOVS     r1,#0xc
0000aa  4887              LDR      r0,|L8.712|
0000ac  f7fffffe          BL       GPIO_PinAFConfig
0000b0  f44f5040          MOV      r0,#0x3000
0000b4  9001              STR      r0,[sp,#4]
0000b6  a901              ADD      r1,sp,#4
0000b8  4883              LDR      r0,|L8.712|
0000ba  f7fffffe          BL       GPIO_Init
0000be  a801              ADD      r0,sp,#4
0000c0  f7fffffe          BL       GPIO_StructInit
0000c4  2002              MOVS     r0,#2
0000c6  f88d0008          STRB     r0,[sp,#8]
0000ca  2000              MOVS     r0,#0
0000cc  f88d0009          STRB     r0,[sp,#9]
0000d0  2202              MOVS     r2,#2
0000d2  2106              MOVS     r1,#6
0000d4  487d              LDR      r0,|L8.716|
0000d6  f7fffffe          BL       GPIO_PinAFConfig
0000da  2202              MOVS     r2,#2
0000dc  2107              MOVS     r1,#7
0000de  487b              LDR      r0,|L8.716|
0000e0  f7fffffe          BL       GPIO_PinAFConfig
0000e4  2001              MOVS     r0,#1
0000e6  f88d000b          STRB     r0,[sp,#0xb]
0000ea  2002              MOVS     r0,#2
0000ec  f88d0008          STRB     r0,[sp,#8]
0000f0  20c0              MOVS     r0,#0xc0
0000f2  9001              STR      r0,[sp,#4]
0000f4  a901              ADD      r1,sp,#4
0000f6  4875              LDR      r0,|L8.716|
0000f8  f7fffffe          BL       GPIO_Init
0000fc  a80b              ADD      r0,sp,#0x2c
0000fe  f7fffffe          BL       TIM_TimeBaseStructInit
000102  a806              ADD      r0,sp,#0x18
000104  f7fffffe          BL       TIM_OCStructInit
000108  4871              LDR      r0,|L8.720|
00010a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00010c  4971              LDR      r1,|L8.724|
00010e  fbb0f0f1          UDIV     r0,r0,r1
000112  1e40              SUBS     r0,r0,#1
000114  b280              UXTH     r0,r0
000116  f8ad002c          STRH     r0,[sp,#0x2c]
00011a  2020              MOVS     r0,#0x20
00011c  f8ad002e          STRH     r0,[sp,#0x2e]
000120  2001              MOVS     r0,#1
000122  f88d0036          STRB     r0,[sp,#0x36]
000126  f44f60fa          MOV      r0,#0x7d0
00012a  900c              STR      r0,[sp,#0x30]
00012c  486a              LDR      r0,|L8.728|
00012e  f7fffffe          BL       TIM_DeInit
000132  2101              MOVS     r1,#1
000134  4608              MOV      r0,r1
000136  f7fffffe          BL       RCC_APB2PeriphClockCmd
00013a  a90b              ADD      r1,sp,#0x2c
00013c  4866              LDR      r0,|L8.728|
00013e  f7fffffe          BL       TIM_TimeBaseInit
000142  4866              LDR      r0,|L8.732|
000144  f7fffffe          BL       TIM_DeInit
000148  2101              MOVS     r1,#1
00014a  2002              MOVS     r0,#2
00014c  f7fffffe          BL       RCC_APB2PeriphClockCmd
000150  a90b              ADD      r1,sp,#0x2c
000152  4862              LDR      r0,|L8.732|
000154  f7fffffe          BL       TIM_TimeBaseInit
000158  4861              LDR      r0,|L8.736|
00015a  f7fffffe          BL       TIM_DeInit
00015e  2101              MOVS     r1,#1
000160  2002              MOVS     r0,#2
000162  f7fffffe          BL       RCC_APB1PeriphClockCmd
000166  a80b              ADD      r0,sp,#0x2c
000168  f7fffffe          BL       TIM_TimeBaseStructInit
00016c  a803              ADD      r0,sp,#0xc
00016e  f7fffffe          BL       TIM_ICStructInit
000172  203c              MOVS     r0,#0x3c
000174  f8ad002c          STRH     r0,[sp,#0x2c]
000178  2000              MOVS     r0,#0
00017a  f8ad002e          STRH     r0,[sp,#0x2e]
00017e  f64f70ff          MOV      r0,#0xffff
000182  900c              STR      r0,[sp,#0x30]
000184  a90b              ADD      r1,sp,#0x2c
000186  4856              LDR      r0,|L8.736|
000188  f7fffffe          BL       TIM_TimeBaseInit
00018c  4855              LDR      r0,|L8.740|
00018e  f7fffffe          BL       TIM_DeInit
000192  2101              MOVS     r1,#1
000194  2004              MOVS     r0,#4
000196  f7fffffe          BL       RCC_APB1PeriphClockCmd
00019a  a80b              ADD      r0,sp,#0x2c
00019c  f7fffffe          BL       TIM_TimeBaseStructInit
0001a0  2000              MOVS     r0,#0
0001a2  f8ad002c          STRH     r0,[sp,#0x2c]
0001a6  f8ad002e          STRH     r0,[sp,#0x2e]
0001aa  4849              LDR      r0,|L8.720|
0001ac  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
0001ae  0840              LSRS     r0,r0,#1
0001b0  f24611a8          MOV      r1,#0x61a8
0001b4  fbb0f0f1          UDIV     r0,r0,r1
0001b8  900c              STR      r0,[sp,#0x30]
0001ba  a90b              ADD      r1,sp,#0x2c
0001bc  4849              LDR      r0,|L8.740|
0001be  f7fffffe          BL       TIM_TimeBaseInit
0001c2  2001              MOVS     r0,#1
0001c4  f8ad001a          STRH     r0,[sp,#0x1a]
0001c8  2060              MOVS     r0,#0x60
0001ca  f8ad0018          STRH     r0,[sp,#0x18]
0001ce  2000              MOVS     r0,#0
0001d0  9008              STR      r0,[sp,#0x20]
0001d2  f8ad0024          STRH     r0,[sp,#0x24]
0001d6  a906              ADD      r1,sp,#0x18
0001d8  483f              LDR      r0,|L8.728|
0001da  f7fffffe          BL       TIM_OC1Init
0001de  a906              ADD      r1,sp,#0x18
0001e0  483e              LDR      r0,|L8.732|
0001e2  f7fffffe          BL       TIM_OC1Init
0001e6  a906              ADD      r1,sp,#0x18
0001e8  483b              LDR      r0,|L8.728|
0001ea  f7fffffe          BL       TIM_OC3Init
0001ee  a906              ADD      r1,sp,#0x18
0001f0  483a              LDR      r0,|L8.732|
0001f2  f7fffffe          BL       TIM_OC3Init
0001f6  a906              ADD      r1,sp,#0x18
0001f8  4837              LDR      r0,|L8.728|
0001fa  f7fffffe          BL       TIM_OC2Init
0001fe  a906              ADD      r1,sp,#0x18
000200  4836              LDR      r0,|L8.732|
000202  f7fffffe          BL       TIM_OC2Init
000206  a906              ADD      r1,sp,#0x18
000208  4833              LDR      r0,|L8.728|
00020a  f7fffffe          BL       TIM_OC4Init
00020e  a906              ADD      r1,sp,#0x18
000210  4832              LDR      r0,|L8.732|
000212  f7fffffe          BL       TIM_OC4Init
000216  a803              ADD      r0,sp,#0xc
000218  f7fffffe          BL       TIM_ICStructInit
00021c  200a              MOVS     r0,#0xa
00021e  f8ad000e          STRH     r0,[sp,#0xe]
000222  2001              MOVS     r0,#1
000224  f8ad0010          STRH     r0,[sp,#0x10]
000228  2000              MOVS     r0,#0
00022a  f8ad0012          STRH     r0,[sp,#0x12]
00022e  f8ad0014          STRH     r0,[sp,#0x14]
000232  f8ad000c          STRH     r0,[sp,#0xc]
000236  a903              ADD      r1,sp,#0xc
000238  4829              LDR      r0,|L8.736|
00023a  f7fffffe          BL       TIM_ICInit
00023e  2004              MOVS     r0,#4
000240  f8ad000c          STRH     r0,[sp,#0xc]
000244  a903              ADD      r1,sp,#0xc
000246  4826              LDR      r0,|L8.736|
000248  f7fffffe          BL       TIM_ICInit
00024c  2001              MOVS     r0,#1
00024e  f8ad001a          STRH     r0,[sp,#0x1a]
000252  2060              MOVS     r0,#0x60
000254  f8ad0018          STRH     r0,[sp,#0x18]
000258  2000              MOVS     r0,#0
00025a  9008              STR      r0,[sp,#0x20]
00025c  f8ad0024          STRH     r0,[sp,#0x24]
000260  a906              ADD      r1,sp,#0x18
000262  4820              LDR      r0,|L8.740|
000264  f7fffffe          BL       TIM_OC1Init
000268  a906              ADD      r1,sp,#0x18
00026a  481e              LDR      r0,|L8.740|
00026c  f7fffffe          BL       TIM_OC2Init
000270  2101              MOVS     r1,#1
000272  4819              LDR      r0,|L8.728|
000274  f7fffffe          BL       TIM_CtrlPWMOutputs
000278  2101              MOVS     r1,#1
00027a  4818              LDR      r0,|L8.732|
00027c  f7fffffe          BL       TIM_CtrlPWMOutputs
000280  2101              MOVS     r1,#1
000282  4818              LDR      r0,|L8.740|
000284  f7fffffe          BL       TIM_CtrlPWMOutputs
000288  2101              MOVS     r1,#1
00028a  4813              LDR      r0,|L8.728|
00028c  f7fffffe          BL       TIM_Cmd
000290  2101              MOVS     r1,#1
000292  4812              LDR      r0,|L8.732|
000294  f7fffffe          BL       TIM_Cmd
000298  2101              MOVS     r1,#1
00029a  4811              LDR      r0,|L8.736|
00029c  f7fffffe          BL       TIM_Cmd
0002a0  2101              MOVS     r1,#1
0002a2  4810              LDR      r0,|L8.740|
0002a4  f7fffffe          BL       TIM_Cmd
0002a8  2120              MOVS     r1,#0x20
0002aa  4620              MOV      r0,r4
0002ac  f7fffffe          BL       __aeabi_memclr4
0002b0  2120              MOVS     r1,#0x20
0002b2  f1040020          ADD      r0,r4,#0x20
0002b6  f7fffffe          BL       __aeabi_memclr4
0002ba  4620              MOV      r0,r4
0002bc  b00e              ADD      sp,sp,#0x38
0002be  bd10              POP      {r4,pc}
                          ENDP

                  |L8.704|
                          DCD      0x40021000
                  |L8.708|
                          DCD      0x40020800
                  |L8.712|
                          DCD      0x40020c00
                  |L8.716|
                          DCD      0x40020000
                  |L8.720|
                          DCD      SystemCoreClock
                  |L8.724|
                          DCD      0x003d0900
                  |L8.728|
                          DCD      0x40010000
                  |L8.732|
                          DCD      0x40010400
                  |L8.736|
                          DCD      0x40000400
                  |L8.740|
                          DCD      0x40000800

                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN4_TIMC1Ev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIMC1Ev||
                          DCD      0x800da8b0

                          AREA ||area_number.10||, LINKORDER=||i._ZN4_TIM8InstanceEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIM8InstanceEv||
                          DCD      0x00000000
                          RELOC 42, ||.extab._ZN4_TIM8InstanceEv||

                          AREA ||area_number.11||, LINKORDER=||i._ZN4_TIM8InstanceEv.clean||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIM8InstanceEv.clean||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN4_TIM3PwmEii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIM3PwmEii||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i._ZN4_TIM3PwmEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIM3PwmEi||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i._ZN4_TIM4PollEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIM4PollEv||
                          DCD      0x80a9b0b0

                          AREA ||area_number.15||, LINKORDER=||i._ZN4_TIM4BusyEi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIM4BusyEi||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._ZN4_TIM3PwmEiiii||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          REQUIRE __aeabi_unwind_cpp_pr0
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4_TIM3PwmEiiii||
                          DCD      0x80acb0b0

                          AREA ||.ARM.extab||, DATA, READONLY, ALIGN=2

                  ||.extab._ZN4_TIM8InstanceEv||
                          DCD      0x80aab0b0
000004  00020018          DCW      0x0002,0x0018
                          DCD      0x00000001
                          RELOC 42, ||i._ZN4_TIM8InstanceEv.clean||
                          DCD      0x00000000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  _ZN4_TIM7speakerE ; _TIM::speaker
                          %        2000

                          AREA ||.data||, DATA, ALIGN=2

                  ||me||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\tim.cpp"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_tim_cpp_me___Z7__REV16j|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_tim_cpp_me___Z7__REV16j| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_tim_cpp_me___Z7__REVSHi|
#line 128
|__asm___7_tim_cpp_me___Z7__REVSHi| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
